{"file_contents":{"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { backupScheduler } from \"./backup-scheduler\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertPatientSchema, insertDoctorSchema, insertServiceSchema, insertBillSchema, insertBillItemSchema, insertPathologyTestSchema, insertSystemSettingsSchema, insertPathologyCategorySchema, insertDynamicPathologyTestSchema, insertPatientPaymentSchema, insertPatientDiscountSchema, insertServiceCategorySchema, insertDoctorServiceRateSchema, insertDoctorEarningSchema, insertDoctorPaymentSchema, insertAdmissionSchema, insertPatientVisitSchema, insertPatientServiceSchema } from \"@shared/schema\";\nimport { pathologyCatalog, getAllPathologyTests, getTestsByCategory, getTestByName, getCategories, addCategoryToFile, addTestToFile, deleteCategoryFromFile, deleteTestFromFile } from \"./pathology-catalog\";\nimport { updatePatientSchema } from \"../shared/schema\";\nimport * as db from \"./storage\"; // Alias storage as db for brevity as seen in changes\nimport * as schema from \"@shared/schema\"; // Import schema for Drizzle ORM\nimport { eq, gte, lte, and, inArray } from \"drizzle-orm\"; // Import Drizzle ORM operators\nimport { patientServices, patients } from \"@shared/schema\"; // Import necessary schemas\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"hospital-management-secret-key\";\n\n// Middleware for authentication\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n\n// Alias for authenticateToken to match the change snippet\nconst requireAuth = authenticateToken;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check if user account is active\n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account has been deactivated\" });\n      }\n\n      const isValid = await storage.verifyPassword(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const rolesArray = JSON.parse(user.roles);\n\n      const token = jwt.sign({\n        id: user.id,\n        username: user.username,\n        roles: rolesArray,\n        role: rolesArray[0] // Use first role for backward compatibility\n      }, JWT_SECRET, { expiresIn: '8h' });\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          fullName: user.fullName,\n          roles: rolesArray,\n          role: rolesArray[0] // Use first role for backward compatibility\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req: any, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n\n      // Ensure roles is properly formatted\n      if (userData.roles && Array.isArray(userData.roles)) {\n        userData.roles = JSON.stringify(userData.roles);\n      } else if (userData.roles && typeof userData.roles === 'string') {\n        // If it's already a string, try to parse and re-stringify to validate\n        try {\n          const parsed = JSON.parse(userData.roles);\n          userData.roles = JSON.stringify(parsed);\n        } catch {\n          // If parsing fails, treat as single role\n          userData.roles = JSON.stringify([userData.roles]);\n        }\n      } else {\n        // Default to admin role if no roles provided\n        userData.roles = JSON.stringify(['admin']);\n      }\n\n      // Parse roles if it's a string, and set primaryRole to the first role in the array\n      let parsedRoles = userData.roles;\n      if (typeof userData.roles === 'string') {\n        try {\n          parsedRoles = JSON.parse(userData.roles);\n        } catch {\n          parsedRoles = [userData.roles];\n        }\n      }\n\n      // Ensure parsedRoles is an array\n      if (!Array.isArray(parsedRoles)) {\n        parsedRoles = [parsedRoles];\n      }\n\n      // Set primaryRole to the first role in the array\n      const userDataWithPrimaryRole = {\n        ...userData,\n        roles: parsedRoles,\n        primaryRole: parsedRoles[0]\n      };\n\n      const user = await storage.createUser(userDataWithPrimaryRole);\n\n      // Log activity for user creation (use the creator's ID if available, otherwise use the new user's ID)\n      const actorUserId = req.user?.id || user.id;\n      await storage.createActivity({\n        userId: actorUserId,\n        activityType: \"user_created\",\n        title: \"New User Created\",\n        description: `User ${user.username} (${user.fullName}) created with role: ${parsedRoles.join(', ')}`,\n        entityId: user.id,\n        entityType: \"user\",\n        metadata: JSON.stringify({\n          username: user.username,\n          fullName: user.fullName,\n          roles: parsedRoles,\n          createdBy: req.user?.username || 'self-registration'\n        }),\n      });\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        fullName: user.fullName,\n        roles: user.rolesArray,\n        role: user.rolesArray[0] // Use first role for backward compatibility\n      });\n    } catch (error) {\n      console.error(\"User registration error:\", error);\n      res.status(400).json({ message: \"Registration failed\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/me\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({\n        id: user.id,\n        username: user.username,\n        fullName: user.fullName,\n        roles: user.rolesArray,\n        role: user.rolesArray[0] // Use first role for backward compatibility\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Profile routes - Allow users to edit their own profile\n  app.put(\"/api/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      // Import the schema for validation\n      const { updateProfileSchema } = await import(\"@shared/schema\");\n\n      // Validate request body with Zod schema\n      const validatedData = updateProfileSchema.parse(req.body);\n      const userId = req.user.id;\n\n      // If username is being changed, check if it's already taken\n      if (validatedData.username) {\n        const existingUser = await storage.getUserByUsername(validatedData.username);\n        if (existingUser && existingUser.id !== userId) {\n          return res.status(400).json({ message: \"Username already taken\" });\n        }\n      }\n\n      // Update the user's own profile (storage.updateUser handles password hashing)\n      const updatedUser = await storage.updateUser(userId, validatedData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: updatedUser.id,\n        username: updatedUser.username,\n        fullName: updatedUser.fullName,\n        roles: updatedUser.rolesArray,\n        role: updatedUser.rolesArray[0] // Use first role for backward compatibility\n      });\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: error.errors\n        });\n      }\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  app.get(\"/api/users\", authenticateToken, async (req, res) => {\n    try {\n      // Check if user has admin or super_user role\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({\n        id: user.id,\n        username: user.username,\n        fullName: user.fullName,\n        roles: user.rolesArray,\n        role: user.rolesArray[0] // Use first role for backward compatibility\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get users\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userData = req.body;\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n\n      // Get user to check if it's the root user\n      const userToUpdate = await storage.getUserById(id);\n      if (!userToUpdate) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const targetUserRoles = userToUpdate.rolesArray || [];\n      const isEditingSelf = req.user.id === id;\n      const currentUserIsAdmin = userRoles.includes('admin');\n      const currentUserIsSuperUser = userRoles.includes('super_user');\n      const targetIsAdmin = targetUserRoles.includes('admin');\n      const targetIsSuperUser = targetUserRoles.includes('super_user');\n\n      // Prevent editing root user unless the current user is a super_user\n      if (userToUpdate.username === 'root' && !currentUserIsSuperUser) {\n        return res.status(403).json({ message: \"Cannot edit the root user\" });\n      }\n\n      // Permission checks based on user roles\n      if (currentUserIsSuperUser) {\n        // Super users can edit anyone (no restrictions)\n      } else if (currentUserIsAdmin) {\n        // Admins can edit themselves and non-admin users\n        if (!isEditingSelf && targetIsAdmin) {\n          return res.status(403).json({ message: \"Admins cannot edit other administrator accounts\" });\n        }\n        if (!isEditingSelf && targetIsSuperUser) {\n          return res.status(403).json({ message: \"Admins cannot edit super user accounts\" });\n        }\n\n        // Role restrictions for admin users\n        if (isEditingSelf && userData.roles) {\n          return res.status(403).json({ message: \"Cannot modify your own roles\" });\n        }\n\n        // Prevent admin from granting admin or super_user roles to others\n        if (!isEditingSelf && userData.roles) {\n          if (userData.roles.includes('admin') || userData.roles.includes('super_user')) {\n            return res.status(403).json({ message: \"Cannot grant admin or super user roles\" });\n          }\n        }\n      } else {\n        // Non-admin, non-super users\n        if (!isEditingSelf && (targetIsAdmin || targetIsSuperUser)) {\n          return res.status(403).json({ message: \"Cannot edit administrator or super user accounts\" });\n        }\n\n        // Role restrictions for non-admin users\n        if (isEditingSelf && userData.roles) {\n          return res.status(403).json({ message: \"Cannot modify your own roles\" });\n        }\n\n        // Prevent non-admin from granting admin or super_user roles to others\n        if (!isEditingSelf && userData.roles) {\n          if (userData.roles.includes('admin') || userData.roles.includes('super_user')) {\n            return res.status(403).json({ message: \"Cannot grant admin or super user roles\" });\n          }\n        }\n      }\n\n      const updatedUser = await storage.updateUser(id, userData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: updatedUser.id,\n        username: updatedUser.username,\n        fullName: updatedUser.fullName,\n        roles: updatedUser.rolesArray,\n        role: updatedUser.rolesArray[0] // Use first role for backward compatibility\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", authenticateToken, async (req, res) => {\n    try {\n      // Check if user has admin or super_user role\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const { id } = req.params;\n\n      // Prevent deleting self\n      if (req.user.id === id) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n\n      // Get user to check if it's the root user\n      const userToDelete = await storage.getUserById(id);\n      if (!userToDelete) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Prevent deleting root user unless the current user is a super_user\n      if (userToDelete.username === 'root' && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Cannot delete the root user\" });\n      }\n\n      // Only super users can delete admin users\n      const targetUserRoles = userToDelete.rolesArray || [];\n      if (targetUserRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Only super users can delete administrator accounts\" });\n      }\n\n      const deleted = await storage.deleteUser(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      // Prevent caching to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Dashboard stats error:', error);\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-activities\", requireAuth, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const activities = await storage.getRecentActivities(5);\n      res.json(activities);\n    } catch (error) {\n      console.error('Recent activities error:', error);\n      res.status(500).json({ error: \"Failed to fetch recent activities\" });\n    }\n  });\n\n  // Patient routes\n  app.get(\"/api/patients\", authenticateToken, async (req, res) => {\n    try {\n      const patients = await storage.getPatients();\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get patients\" });\n    }\n  });\n\n  app.get(\"/api/patients/search\", authenticateToken, async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n      const patients = await storage.searchPatients(q);\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search patients\" });\n    }\n  });\n\n  app.post(\"/api/patients\", authenticateToken, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot create patients.\" });\n      }\n\n      const patientData = insertPatientSchema.parse(req.body);\n      // Set createdAt to current time in Indian timezone (UTC+5:30)\n      const now = new Date();\n      // Add 5.5 hours (5 hours 30 minutes) to UTC to get Indian time\n      const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n      patientData.createdAt = indianTime.toISOString();\n\n      const patient = await storage.createPatient(patientData, req.user.id);\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Patient creation error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to create patient\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", authenticateToken, async (req, res) => {\n    try {\n      const patient = await storage.getPatientById(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get patient\" });\n    }\n  });\n\n\n  app.patch(\"/api/patients/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot update patient information.\" });\n      }\n\n      const { id } = req.params;\n\n      // Validate incoming data (allow partial updates)\n      const patientData = updatePatientSchema.parse(req.body);\n\n      const updated = await storage.updatePatient(id, patientData);\n\n      if (!updated) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Patient update error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to update patient\" });\n    }\n  });\n\n  // Doctor routes\n  app.get(\"/api/doctors\", authenticateToken, async (req, res) => {\n    try {\n      const doctors = await storage.getDoctors();\n      res.json(doctors);\n    } catch (error) {\n      console.error(\"Doctors fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch doctors\" });\n    }\n  });\n\n  app.get(\"/api/doctors/deleted\", authenticateToken, async (req, res) => {\n    try {\n      const deletedDoctors = await storage.getDeletedDoctors();\n      res.json(deletedDoctors);\n    } catch (error) {\n      console.error(\"Deleted doctors fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch deleted doctors\" });\n    }\n  });\n\n  app.post(\"/api/doctors\", authenticateToken, async (req: any, res) => {\n    try {\n      const doctorData = insertDoctorSchema.parse(req.body);\n      const doctor = await storage.createDoctor(doctorData, req.user?.id);\n      res.json(doctor);\n    } catch (error) {\n      console.error(\"Doctor creation error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to create doctor\" });\n    }\n  });\n\n  app.put(\"/api/doctors/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const doctorData = insertDoctorSchema.parse(req.body);\n      const doctor = await storage.updateDoctor(id, doctorData);\n      res.json(doctor);\n    } catch (error) {\n      console.error(\"Doctor update error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to update doctor\" });\n    }\n  });\n\n  app.delete(\"/api/doctors/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get doctor details before deletion for activity log\n      const doctor = await storage.getDoctorById(id);\n      if (!doctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      const deleted = await storage.deleteDoctor(id, req.user?.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      // Create activity log for doctor deactivation\n      await storage.createActivity({\n        userId: req.user?.id,\n        activityType: 'doctor_deactivated',\n        title: 'Doctor Deactivated',\n        description: `${doctor.name} has been deactivated`,\n        entityId: id,\n        entityType: \"doctor\",\n        metadata: JSON.stringify({\n          doctorId: id,\n          deactivatedBy: req.user?.username,\n        }),\n      });\n      \n      res.json({ message: \"Doctor deactivated successfully\" });\n    } catch (error) {\n      console.error(\"Doctor deactivation error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to deactivate doctor\" });\n    }\n  });\n\n  app.get(\"/api/doctors/:id\", authenticateToken, async (req, res) => {\n    try {\n      const doctor = await storage.getDoctorById(req.params.id);\n      if (!doctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      res.json(doctor);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get doctor\" });\n    }\n  });\n\n  // Added restore doctor route\n  app.put(\"/api/doctors/:id/restore\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const restored = await storage.restoreDoctor(id, req.user?.id);\n      if (!restored) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      res.json({ message: \"Doctor restored successfully\", doctor: restored });\n    } catch (error) {\n      console.error(\"Doctor restoration error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to restore doctor\" });\n    }\n  });\n\n  // Added permanent delete endpoint for doctors\n  app.delete(\"/api/doctors/:id/permanent\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get doctor details before deletion for activity log\n      const doctor = await storage.getDoctorById(id);\n      if (!doctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      const deleted = await storage.permanentlyDeleteDoctor(id, req.user?.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n\n      // Create activity log for permanent deletion\n      await storage.createActivity({\n        userId: req.user?.id,\n        activityType: 'doctor_permanently_deleted',\n        title: 'Doctor Permanently Deleted',\n        description: `${doctor.name} - ${doctor.specialization} has been permanently deleted`,\n        entityId: id,\n        entityType: \"doctor\",\n        metadata: JSON.stringify({\n          doctorId: id,\n          doctorName: doctor.name,\n          specialization: doctor.specialization,\n          deletedBy: req.user?.username,\n        }),\n      });\n\n      res.json({ message: \"Doctor permanently deleted successfully\" });\n    } catch (error) {\n      console.error(\"Doctor permanent deletion error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to permanently delete doctor\" });\n    }\n  });\n\n  // Doctor Service Rate routes\n  app.get(\"/api/doctors/:doctorId/salary-rates\", authenticateToken, async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const rates = await storage.getDoctorServiceRates(doctorId);\n      res.json(rates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get doctor service rates\" });\n    }\n  });\n\n  app.put(\"/api/doctors/:doctorId/salary-rates\", authenticateToken, async (req: any, res) => {\n    try {\n      const { doctorId } = req.params;\n      const { rates } = req.body;\n\n\n      if (!Array.isArray(rates)) {\n        return res.status(400).json({ message: \"Rates must be an array\" });\n      }\n\n      // Verify the authenticated user exists\n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      // Verify the doctor exists\n      const doctor = await storage.getDoctorById(doctorId);\n      if (!doctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n\n      // First, delete existing rates for this doctor\n      const existingRates = await storage.getDoctorServiceRates(doctorId);\n      for (const existingRate of existingRates) {\n        await storage.deleteDoctorServiceRate(existingRate.id);\n      }\n\n      // Then create new rates\n      const createdRates = [];\n      for (const rate of rates) {\n        if (rate.isSelected && rate.salaryBasis && (rate.amount > 0 || rate.percentage > 0)) {\n          let actualServiceId = rate.serviceId;\n          let actualServiceName = rate.serviceName;\n\n          // Handle special service IDs that might need mapping\n          if (rate.serviceId === 'opd_placeholder' || rate.serviceId === 'opd_consultation_placeholder') {\n            // Try to find an actual OPD/consultation service\n            const services = await storage.getServices();\n            let opdService = services.find(s =>\n              s.category?.toLowerCase() === 'consultation'\n            );\n\n            if (!opdService) {\n              opdService = services.find(s =>\n                s.name?.toLowerCase().includes('opd') ||\n                s.name?.toLowerCase().includes('consultation') ||\n                s.name?.toLowerCase().includes('visit')\n              );\n            }\n\n            if (opdService) {\n              actualServiceId = opdService.id;\n              actualServiceName = opdService.name;\n            } else {\n              // Create a generic OPD service record if none exists\n              try {\n                const newOpdService = await storage.createService({\n                  name: 'OPD Consultation',\n                  category: 'consultation',\n                  price: 500, // Default consultation fee\n                  description: 'General OPD consultation service',\n                  isActive: true,\n                  createdBy: req.user.id\n                });\n                actualServiceId = newOpdService.id;\n                actualServiceName = newOpdService.name;\n              } catch (serviceCreationError) {\n                console.error('Failed to create OPD service:', serviceCreationError);\n                continue; // Skip this rate if service creation fails\n              }\n            }\n          } else if (rate.serviceId === 'lab_tests_all') {\n            // Handle Lab Tests placeholder - create a generic lab service if none exists\n            const services = await storage.getServices();\n            let labService = services.find(s =>\n              s.category?.toLowerCase() === 'pathology' ||\n              s.category?.toLowerCase() === 'lab_tests' ||\n              s.name?.toLowerCase().includes('lab') ||\n              s.name?.toLowerCase().includes('pathology')\n            );\n\n            if (labService) {\n              actualServiceId = labService.id;\n              actualServiceName = labService.name;\n            } else {\n              // Create a generic lab service record if none exists\n              try {\n                const newLabService = await storage.createService({\n                  name: 'Lab Tests',\n                  category: 'pathology',\n                  price: 0, // Lab tests have variable pricing\n                  description: 'Pathology and laboratory testing services',\n                  isActive: true,\n                  createdBy: req.user.id\n                });\n                actualServiceId = newLabService.id;\n                actualServiceName = newLabService.name;\n              } catch (serviceCreationError) {\n                console.error('Failed to create Lab service:', serviceCreationError);\n                continue; // Skip this rate if service creation fails\n              }\n            }\n          } else {\n            // For regular services, verify they exist\n            const service = await storage.getServiceById(rate.serviceId);\n            if (!service) {\n              console.warn(`Service not found: ${rate.serviceId}, skipping rate creation`);\n              continue;\n            }\n          }\n\n          const rateData = {\n            doctorId,\n            serviceId: actualServiceId,\n            serviceName: actualServiceName,\n            serviceCategory: rate.serviceCategory,\n            rateType: rate.salaryBasis === 'percentage' ? 'percentage' : 'amount',\n            rateAmount: rate.salaryBasis === 'percentage' ? rate.percentage : rate.amount,\n            isActive: true,\n            notes: null,\n            createdBy: req.user.id,\n          };\n\n          try {\n            const validatedData = insertDoctorServiceRateSchema.parse(rateData);\n            const created = await storage.createDoctorServiceRate(validatedData);\n            createdRates.push(created);\n          } catch (createError) {\n            console.error(`Failed to create rate for service ${rate.serviceId}:`, createError);\n            if (createError instanceof z.ZodError) {\n              console.error(`Validation errors:`, createError.errors);\n            }\n            // Continue with other rates instead of failing completely\n          }\n        }\n      }\n\n      res.json({ message: \"Doctor service rates updated successfully\", rates: createdRates });\n    } catch (error) {\n      console.error(\"Update doctor service rates error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: error.errors,\n        });\n      }\n      res.status(500).json({ message: \"Failed to update doctor service rates\" });\n    }\n  });\n\n  // Service routes\n  app.get(\"/api/services\", authenticateToken, async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get services\" });\n    }\n  });\n\n  app.get(\"/api/services/search\", authenticateToken, async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n      const services = await storage.searchServices(q);\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search services\" });\n    }\n  });\n\n  // Services\n  app.post(\"/api/services\", authenticateToken, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot create services.\" });\n      }\n\n      console.log(\"Creating service with data:\", req.body);\n\n      // Ensure all required fields are present with defaults\n      const serviceData = {\n        name: req.body.name,\n        category: req.body.category || 'misc',\n        price: req.body.price || 0,\n        description: req.body.description || '',\n        isActive: req.body.isActive !== undefined ? req.body.isActive : true,\n        billingType: req.body.billingType || 'per_instance',\n        billingParameters: req.body.billingParameters || null\n      };\n\n      console.log(\"Processed service data:\", serviceData);\n\n      // Validate with schema\n      const validatedData = insertServiceSchema.parse(serviceData);\n      const service = await storage.createService(validatedData, req.user?.id);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Create service error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: error.errors,\n        });\n      }\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put(\"/api/services/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      console.log(\"Updating service with data:\", req.body);\n\n      // Ensure all required fields are present with defaults\n      const serviceData = {\n        name: req.body.name,\n        category: req.body.category || 'misc',\n        price: req.body.price || 0,\n        description: req.body.description || '',\n        isActive: req.body.isActive !== undefined ? req.body.isActive : true,\n        billingType: req.body.billingType || 'per_instance',\n        billingParameters: req.body.billingParameters || null\n      };\n\n      console.log(\"Processed service update data:\", serviceData);\n\n      // Validate with schema\n      const validatedData = insertServiceSchema.parse(serviceData);\n      const service = await storage.updateService(req.params.id, validatedData, req.user?.id);\n\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n\n      res.json(service);\n    } catch (error) {\n      console.error(\"Update service error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: error.errors,\n        });\n      }\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete(\"/api/services/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const deleted = await storage.deleteService(req.params.id, req.user.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Pathology Categories routes\n  app.get(\"/api/pathology-categories\", authenticateToken, async (req, res) => {\n    try {\n      const categories = await storage.getPathologyCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology categories\" });\n    }\n  });\n\n  // Create pathology category (creates custom categories in database)\n  app.post(\"/api/pathology-categories\", authenticateToken, async (req, res) => {\n    try {\n      const { name, description } = req.body;\n\n      if (!name) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n\n      // Check if system category with same name exists\n      const systemCategories = getCategories();\n      if (systemCategories.includes(name)) {\n        return res.status(400).json({ message: \"A system category with this name already exists\" });\n      }\n\n      const category = await storage.createPathologyCategory({\n        name,\n        description: description || '',\n        isActive: true\n      });\n\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating pathology category:\", error);\n      res.status(500).json({ message: \"Failed to create pathology category\" });\n    }\n  });\n\n  app.put(\"/api/pathology-categories/:id\", authenticateToken, async (req, res) => {\n    try {\n      const categoryData = insertPathologyCategorySchema.partial().parse(req.body);\n      const category = await storage.updatePathologyCategory(req.params.id, categoryData);\n      if (!category) {\n        return res.status(404).json({ message: \"Pathology category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update pathology category\" });\n    }\n  });\n\n  app.delete(\"/api/pathology-categories/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Check if it's a system category (categoryId is a string that matches system category name)\n      const systemCategories = getCategories();\n      const isSystemCategory = systemCategories.includes(id);\n\n      if (isSystemCategory) {\n        try {\n          deleteCategoryFromFile(id);\n          res.json({ message: \"System pathology category deleted successfully\" });\n        } catch (error) {\n          res.status(500).json({ message: \"Failed to delete system pathology category\" });\n        }\n      } else {\n        // Handle custom category deletion\n        const deleted = await storage.deletePathologyCategory(id);\n        if (!deleted) {\n          return res.status(404).json({ message: \"Pathology category not found or has associated tests\" });\n        }\n        res.json({ message: \"Pathology category deleted successfully\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete pathology category\" });\n    }\n  });\n\n  // Dynamic Pathology Tests routes\n  app.get(\"/api/dynamic-pathology-tests\", authenticateToken, async (req, res) => {\n    try {\n      const { categoryId } = req.query;\n      let tests;\n      if (categoryId && typeof categoryId === 'string') {\n        tests = await storage.getDynamicPathologyTestsByCategory(categoryId);\n      } else {\n        tests = await storage.getDynamicPathologyTests();\n      }\n      res.json(tests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get dynamic pathology tests\" });\n    }\n  });\n\n  // Create dynamic pathology test (works for both system and custom categories)\n  app.post(\"/api/dynamic-pathology-tests\", authenticateToken, async (req, res) => {\n    try {\n      const { testName, price, categoryId } = req.body;\n\n      if (!testName || typeof price !== 'number' || !categoryId) {\n        return res.status(400).json({ message: \"Missing required fields: testName, price, categoryId\" });\n      }\n\n      // Check if it's a system category (categoryId is a string that matches system category name)\n      const systemCategories = getCategories();\n      const isSystemCategory = systemCategories.includes(categoryId);\n\n      if (isSystemCategory) {\n        // Add test to the JSON file for system categories\n        try {\n          addTestToFile(categoryId, {\n            test_name: testName,\n            price: price,\n            subtests: []\n          });\n\n          // Return a mock response that matches the expected format\n          res.json({\n            id: `system-${Date.now()}`,\n            testName,\n            price,\n            categoryId,\n            isActive: true\n          });\n        } catch (fileError) {\n          console.error(\"Error adding test to system category:\", fileError);\n          res.status(500).json({ message: \"Failed to add test to system category\" });\n        }\n      } else {\n        // Check if custom category exists\n        const customCategories = await storage.getPathologyCategories();\n        const categoryExists = customCategories.some(cat => cat.id === categoryId);\n\n        if (!categoryExists) {\n          return res.status(400).json({ message: \"Category not found\" });\n        }\n\n        // Add test to database for custom categories\n        const test = await storage.createDynamicPathologyTest({\n          testName,\n          price,\n          categoryId,\n          isActive: true\n        });\n\n        res.json(test);\n      }\n    } catch (error) {\n      console.error(\"Error creating dynamic pathology test:\", error);\n      res.status(400).json({ message: \"Failed to create dynamic pathology test\" });\n    }\n  });\n\n\n  app.put(\"/api/dynamic-pathology-tests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const testData = insertDynamicPathologyTestSchema.partial().parse(req.body);\n      const test = await storage.updateDynamicPathologyTest(req.params.id, testData);\n      if (!test) {\n        return res.status(404).json({ message: \"Dynamic pathology test not found\" });\n      }\n      res.json(test);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update dynamic pathology test\" });\n    }\n  });\n\n  app.delete(\"/api/dynamic-pathology-tests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const deleted = await storage.deleteDynamicPathologyTest(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Dynamic pathology test not found\" });\n      }\n      res.json({ message: \"Dynamic pathology test deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete dynamic pathology test\" });\n    }\n  });\n\n  // Delete system pathology test\n  app.delete(\"/api/pathology-tests/system/:categoryName/:testName\", authenticateToken, async (req, res) => {\n    try {\n      const { categoryName, testName } = req.params;\n\n      deleteTestFromFile(categoryName, testName);\n      res.json({ message: \"System pathology test deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting system pathology test:\", error);\n      res.status(500).json({ message: \"Failed to delete system pathology test\" });\n    }\n  });\n\n  // Bulk upload pathology tests from JSON\n  app.post(\"/api/pathology-tests/bulk-upload\", authenticateToken, async (req, res) => {\n    try {\n      const { categories } = req.body;\n\n      if (!categories || !Array.isArray(categories)) {\n        return res.status(400).json({ message: \"Invalid data format. Expected categories array.\" });\n      }\n\n      const results: any = {\n        categories: [],\n        tests: [],\n        errors: []\n      };\n\n      for (const categoryData of categories) {\n        try {\n          if (!categoryData.name || !categoryData.tests) {\n            results.errors.push(`Invalid category data: missing name or tests`);\n            continue;\n          }\n\n          // Create or get category\n          let category;\n          try {\n            const categoryInsert = insertPathologyCategorySchema.parse({\n              name: categoryData.name,\n              description: categoryData.description || null\n            });\n            category = await storage.createPathologyCategory(categoryInsert);\n            results.categories.push(category);\n          } catch (error) {\n            // Category might already exist, try to find it\n            const categories = await storage.getPathologyCategories();\n            category = categories.find(c => c.name === categoryData.name);\n            if (!category) {\n              results.errors.push(`Failed to create category: ${categoryData.name}`);\n              continue;\n            }\n          }\n\n          // Create tests for this category\n          const testsToCreate = categoryData.tests.map((test: any) =>\n            insertDynamicPathologyTestSchema.parse({\n              categoryId: category.id,\n              testName: test.test_name || test.name,\n              price: test.price || 0,\n              normalRange: test.normal_range || null,\n              description: test.description || null\n            })\n          );\n\n          const createdTests = await storage.bulkCreateDynamicPathologyTests(testsToCreate);\n          results.tests.push(...createdTests);\n\n        } catch (error) {\n          results.errors.push(`Error processing category ${categoryData.name}: ${error}`);\n        }\n      }\n\n      res.json(results);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to bulk upload pathology tests\" });\n    }\n  });\n\n  // Get combined pathology tests (system + custom)\n  app.get(\"/api/pathology-tests/combined\", authenticateToken, async (req, res) => {\n    try {\n      const systemCategories = getCategories();\n      const customCategories = await storage.getPathologyCategories();\n      const customTests = await storage.getDynamicPathologyTests();\n\n      // Create combined categories structure\n      const combinedCategories = [...systemCategories.map(name => ({\n        id: name,\n        name,\n        description: '',\n        isHardcoded: true,\n        isSystem: true,\n        tests: getTestsByCategory(name).map(test => ({\n          ...test,\n          id: `system-${name}-${test.test_name}`,\n          isHardcoded: true,\n          name: test.test_name,\n          testName: test.test_name\n        }))\n      }))];\n\n      // Add custom categories\n      for (const customCat of customCategories) {\n        const testsInCategory = customTests.filter(test => test.categoryId === customCat.id);\n        combinedCategories.push({\n          id: customCat.id,\n          name: customCat.name,\n          description: customCat.description || '',\n          isHardcoded: false,\n          isSystem: false,\n          tests: testsInCategory.map(test => ({\n            id: test.id,\n            test_name: test.testName,\n            testName: test.testName,\n            name: test.testName,\n            price: test.price,\n            category: customCat.name,\n            categoryId: test.categoryId,\n            normalRange: test.normalRange,\n            description: test.description,\n            isActive: test.isActive,\n            isHardcoded: false,\n            subtests: []\n          }))\n        });\n      }\n\n      res.json({ categories: combinedCategories });\n    } catch (error) {\n      console.error(\"Error fetching combined pathology tests:\", error);\n      res.status(500).json({ message: \"Failed to fetch pathology tests\" });\n    }\n  });\n\n  // Bill routes\n  app.get(\"/api/bills\", authenticateToken, async (req, res) => {\n    try {\n      const { fromDate, toDate, paymentStatus } = req.query;\n\n      const bills = await storage.getBillsWithFilters({\n        fromDate: fromDate as string,\n        toDate: toDate as string,\n        paymentStatus: paymentStatus as string\n      });\n\n      console.log(`Retrieved ${bills.length} bills with filters:`, {\n        fromDate,\n        toDate,\n        paymentStatus\n      });\n\n      res.json(bills);\n    } catch (error) {\n      console.error(\"Error fetching bills:\", error);\n      res.status(500).json({ message: \"Failed to get bills\" });\n    }\n  });\n\n  app.post(\"/api/bills\", authenticateToken, async (req, res) => {\n    try {\n      const { bill, items } = req.body;\n\n      const billData = insertBillSchema.parse({\n        ...bill,\n        createdBy: req.user.id,\n        billDate: new Date().toISOString().split('T')[0],\n      });\n\n      const itemsData = items.map((item: any) => insertBillItemSchema.parse(item));\n\n      const createdBill = await storage.createBill(billData, itemsData, req.user.id);\n      res.json(createdBill);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create bill\" });\n    }\n  });\n\n  app.get(\"/api/bills/:id\", authenticateToken, async (req, res) => {\n    try {\n      const bill = await storage.getBillById(req.params.id);\n      if (!bill) {\n        return res.status(404).json({ message: \"Bill not found\" });\n      }\n      const items = await storage.getBillItems(req.params.id);\n      res.json({ ...bill, items });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get bill\" });\n    }\n  });\n\n  // Pathology Test Catalog routes\n  app.get(\"/api/pathology/catalog\", authenticateToken, async (req, res) => {\n    try {\n      const tests = getAllPathologyTests();\n      res.json(tests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology catalog\" });\n    }\n  });\n\n  app.get(\"/api/pathology/catalog/categories\", authenticateToken, async (req, res) => {\n    try {\n      const categories = getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology categories\" });\n    }\n  });\n\n  app.get(\"/api/pathology/catalog/category/:categoryName\", authenticateToken, async (req, res) => {\n    try {\n      const tests = getTestsByCategory(req.params.categoryName);\n      res.json(tests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get tests for category\" });\n    }\n  });\n\n  // Pathology routes\n  app.get(\"/api/pathology\", authenticateToken, async (req, res) => {\n    try {\n      const { fromDate, toDate } = req.query;\n      const orders = await storage.getPathologyOrders(fromDate as string, toDate as string);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology orders\" });\n    }\n  });\n\n  app.post(\"/api/pathology\", authenticateToken, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot create pathology orders.\" });\n      }\n\n      console.log(\"Received pathology order request:\", JSON.stringify(req.body, null, 2));\n      const { orderData, tests } = req.body;\n\n      if (!orderData || !tests) {\n        return res.status(400).json({ message: \"Missing orderData or tests\" });\n      }\n\n      // Ensure doctorId is null if empty string or \"external\"\n      const processedOrderData = {\n        ...orderData,\n        doctorId: orderData.doctorId === \"\" || orderData.doctorId === \"external\" ? null : orderData.doctorId\n      };\n\n      const order = await storage.createPathologyOrder(processedOrderData, tests, req.user.id);\n      res.json(order);\n    } catch (error: any) {\n      console.error(\"Error creating pathology order:\", error);\n      res.status(400).json({ message: \"Failed to create pathology order\", error: error.message });\n    }\n  });\n\n  app.patch(\"/api/pathology/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n\n      const updatedOrder = await storage.updatePathologyOrderStatus(id, status);\n      res.json(updatedOrder);\n    } catch (error: any) {\n      console.error(\"Error updating pathology order status:\", error);\n      res.status(400).json({ message: \"Failed to update order status\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/pathology/:id\", authenticateToken, async (req, res) => {\n    try {\n      const orderDetails = await storage.getPathologyOrderById(req.params.id);\n      if (!orderDetails) {\n        return res.status(404).json({ message: \"Pathology order not found\" });\n      }\n      res.json(orderDetails);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology order details\" });\n    }\n  });\n\n  app.get(\"/api/pathology/patient/:patientId\", authenticateToken, async (req, res) => {\n    try {\n      const orders = await storage.getPathologyOrdersByPatient(req.params.patientId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get patient pathology orders\" });\n    }\n  });\n\n  // Patient Services Routes\n  app.get(\"/api/patient-services\", requireAuth, async (req, res) => {\n    try {\n      const { serviceType, fromDate, toDate, doctorId, serviceName, status, patientId } = req.query;\n\n      // Build filters object\n      const filters: any = {};\n\n      if (patientId) {\n        filters.patientId = patientId as string;\n      }\n\n      if (serviceType) {\n        // Handle multiple service types (comma-separated)\n        if ((serviceType as string).includes(',')) {\n          const serviceTypes = (serviceType as string).split(',').map(type => {\n            const serviceTypeMapping: { [key: string]: string } = {\n              'labtest': 'diagnostic',\n              'lab': 'diagnostic',\n              'opd': 'opd',\n              'diagnostic': 'diagnostic',\n              'diagnostics': 'diagnostic',\n              'procedure': 'procedure',\n              'procedures': 'procedure',\n              'operation': 'operation',\n              'operations': 'operation',\n              'misc': 'misc'\n            };\n            return serviceTypeMapping[type.trim()] || type.trim();\n          });\n          filters.serviceTypes = serviceTypes;\n        } else {\n          // Map frontend serviceType values to database values\n          const serviceTypeMapping: { [key: string]: string } = {\n            'labtest': 'diagnostic',\n            'lab': 'diagnostic',\n            'opd': 'opd',\n            'diagnostic': 'diagnostic',\n            'diagnostics': 'diagnostic',\n            'procedure': 'procedure',\n            'procedures': 'procedure',\n            'operation': 'operation',\n            'operations': 'operation',\n            'misc': 'misc'\n          };\n\n          filters.serviceType = serviceTypeMapping[serviceType as string] || serviceType as string;\n        }\n      }\n\n      if (fromDate) {\n        filters.fromDate = fromDate as string;\n      }\n\n      if (toDate) {\n        filters.toDate = toDate as string;\n      }\n\n      if (doctorId && doctorId !== \"all\") {\n        filters.doctorId = doctorId as string;\n      }\n\n      if (serviceName && serviceName !== \"all\") {\n        filters.serviceName = serviceName as string;\n      }\n\n      if (status) {\n        filters.status = status as string;\n      }\n\n      // Use storage method with filters - this already includes patient and doctor names\n      const services = await storage.getPatientServicesWithFilters(filters);\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching patient services:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Patient Services Management\n  // Single service creation\n  app.post(\"/api/patient-services\", authenticateToken, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot create patient services.\" });\n      }\n\n      const serviceData = req.body;\n\n      console.log('Creating patient service with data:', JSON.stringify(serviceData, null, 2));\n\n      // Validate required fields\n      if (!serviceData.patientId) {\n        return res.status(400).json({ error: \"Patient ID is required\" });\n      }\n\n      if (!serviceData.serviceType) {\n        return res.status(400).json({ error: \"Service type is required\" });\n      }\n\n      if (!serviceData.serviceName) {\n        return res.status(400).json({ error: \"Service name is required\" });\n      }\n\n      if (!serviceData.scheduledDate) {\n        return res.status(400).json({ error: \"Scheduled date is required\" });\n      }\n\n      if (!serviceData.scheduledTime) {\n        return res.status(400).json({ error: \"Scheduled time is required\" });\n      }\n\n      // Convert scheduled date/time to IST and store as ISO string\n      if (serviceData.scheduledDate && serviceData.scheduledTime) {\n        const scheduledDateTime = new Date(`${serviceData.scheduledDate}T${serviceData.scheduledTime}:00`);\n        // Add 5.5 hours to convert to IST and store\n        const istDateTime = new Date(scheduledDateTime.getTime() + (5.5 * 60 * 60 * 1000));\n        serviceData.createdAt = istDateTime.toISOString();\n        serviceData.updatedAt = istDateTime.toISOString();\n      }\n\n      // Special validation for OPD services\n      if (serviceData.serviceType === \"opd\") {\n        if (!serviceData.doctorId || serviceData.doctorId === \"\" || serviceData.doctorId === \"none\" || serviceData.doctorId === \"external\") {\n          return res.status(400).json({ error: \"Doctor is required for OPD consultation\" });\n        }\n\n        if (!serviceData.price || serviceData.price <= 0) {\n          return res.status(400).json({ error: \"Valid consultation fee is required for OPD\" });\n        }\n      }\n\n      console.log('Doctor ID in service data:', serviceData.doctorId);\n      const service = await storage.createPatientService(serviceData, req.user.id);\n      console.log('Created patient service:', JSON.stringify(service, null, 2));\n\n      // Log activity for service scheduling\n      const patient = await storage.getPatientById(serviceData.patientId);\n\n      await storage.createActivity({\n        userId: req.user.id,\n        activityType: \"service_scheduled\",\n        title: \"Service Scheduled\",\n        description: `${serviceData.serviceName} scheduled for ${patient?.name || 'Patient'}`,\n        entityId: service.id,\n        entityType: \"patient_service\",\n        metadata: JSON.stringify({\n          patientId: serviceData.patientId,\n          serviceType: serviceData.serviceType,\n          serviceName: serviceData.serviceName,\n          scheduledDate: serviceData.scheduledDate,\n          scheduledTime: serviceData.scheduledTime,\n        }),\n      });\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error creating patient service:\", error);\n      res.status(500).json({\n        error: \"Failed to create patient service\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Batch service creation - multiple services with same order ID\n  app.post(\"/api/patient-services/batch\", authenticateToken, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot create patient services.\" });\n      }\n\n      console.log(\"=== BATCH SERVICE CREATION API ===\");\n      console.log(\"Raw request body:\", JSON.stringify(req.body, null, 2));\n\n      // Validate array of services\n      if (!Array.isArray(req.body)) {\n        return res.status(400).json({ message: \"Request body must be an array of services\" });\n      }\n\n      if (req.body.length === 0) {\n        return res.status(400).json({ message: \"No services provided\" });\n      }\n\n      // Generate a single receipt number and orderId for the entire batch\n      const firstService = req.body[0];\n      const serviceType = firstService.serviceType === \"opd\" ? \"opd\" : \"service\";\n      const eventDate = new Date(firstService.scheduledDate).toISOString().split(\"T\")[0];\n\n      // Get daily count for receipt numbering\n      let count;\n      try {\n        const response = await fetch(`http://localhost:5000/api/receipts/daily-count/${serviceType}/${eventDate}`, {\n          headers: {\n            Authorization: `Bearer ${req.headers.authorization?.split(' ')[1]}`,\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          count = data.count;\n        } else {\n          count = 1;\n        }\n      } catch (error) {\n        console.error(\"Error fetching daily count:\", error);\n        count = 1;\n      }\n\n      // Generate receipt number\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj.toISOString().slice(2, 10).replace(/-/g, \"\").slice(0, 6);\n      const typeCode = serviceType === \"opd\" ? \"OPD\" : \"SRV\";\n      const receiptNumber = `${yymmdd}-${typeCode}-${String(count).padStart(4, \"0\")}`;\n\n      console.log(\"Generated receipt number:\", receiptNumber);\n\n      // Add receipt number to all services (orderId will be generated by storage)\n      const servicesWithReceipt = req.body.map((service: any) => ({\n        ...service,\n        receiptNumber: receiptNumber,\n      }));\n\n      console.log(`Creating batch of ${servicesWithReceipt.length} services with receipt number: ${receiptNumber}`);\n\n      const services = await storage.createPatientServicesBatch(servicesWithReceipt, req.user.id);\n\n      console.log(`Successfully created ${services.length} services with shared orderId: ${services[0]?.orderId}`);\n\n      // Log activity for service scheduling\n      if (services.length > 0) {\n        const patient = await storage.getPatientById(servicesWithReceipt[0].patientId);\n        const serviceNames = services.map(s => s.serviceName).join(\", \");\n\n        await storage.createActivity({\n          userId: req.user.id,\n          activityType: \"service_scheduled\",\n          title: \"Service Scheduled\",\n          description: `${serviceNames} scheduled for ${patient?.name || 'Patient'}`,\n          entityId: services[0].orderId || services[0].id,\n          entityType: \"patient_service\",\n          metadata: JSON.stringify({\n            patientId: servicesWithReceipt[0].patientId,\n            serviceCount: services.length,\n            services: services.map(s => ({\n              serviceName: s.serviceName,\n              serviceType: s.serviceType,\n              scheduledDate: s.scheduledDate,\n              scheduledTime: s.scheduledTime,\n            })),\n          }),\n        });\n      }\n\n      res.json(services);\n    } catch (error: any) {\n      console.error(\"Batch service creation error:\", error);\n      res.status(400).json({ message: \"Failed to create batch services\", error: error.message });\n    }\n  });\n\n\n  app.put(\"/api/patient-services/:id\", authenticateToken, async (req, res) => {\n    try {\n      const service = await storage.updatePatientService(req.params.id, req.body, req.user.id);\n\n      // Log activity if service is being completed\n      if (req.body.status === \"completed\") {\n        const patient = await storage.getPatientById(service.patientId);\n\n        await storage.createActivity({\n          userId: req.user.id,\n          activityType: \"service_completed\",\n          title: \"Service Completed\",\n          description: `${service.serviceName} completed for ${patient?.name || 'Patient'}`,\n          entityId: service.id,\n          entityType: \"patient_service\",\n          metadata: JSON.stringify({\n            patientId: service.patientId,\n            serviceName: service.serviceName,\n            serviceType: service.serviceType,\n          }),\n        });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error updating patient service:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Patient Admissions Routes\n  app.get(\"/api/admissions\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId, fromDate, toDate } = req.query;\n      const admissions = await storage.getAdmissions(patientId as string, fromDate as string, toDate as string);\n      res.json(admissions);\n    } catch (error) {\n      console.error(\"Error fetching admissions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admissions\", authenticateToken, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot create admissions.\" });\n      }\n\n      // Normalize admission date to ISO format if provided\n      const requestBody = { ...req.body };\n      if (requestBody.admissionDate && typeof requestBody.admissionDate === 'string') {\n        try {\n          requestBody.admissionDate = new Date(requestBody.admissionDate).toISOString();\n        } catch (e) {\n          return res.status(400).json({ error: \"Invalid admission date format\" });\n        }\n      }\n      if (requestBody.dischargeDate && typeof requestBody.dischargeDate === 'string') {\n        try {\n          requestBody.dischargeDate = new Date(requestBody.dischargeDate).toISOString();\n        } catch (e) {\n          return res.status(400).json({ error: \"Invalid discharge date format\" });\n        }\n      }\n\n      const admission = await storage.createAdmission(requestBody, req.user.id);\n\n      // Log activity for admission\n      const patient = await storage.getPatientById(admission.patientId);\n      const doctor = await storage.getDoctorById(admission.doctorId);\n\n      await storage.createActivity({\n        userId: req.user.id,\n        activityType: \"patient_admitted\",\n        title: \"Patient Admitted\",\n        description: `${patient?.name || 'Patient'} admitted under ${doctor?.name || 'Doctor'} - ${admission.currentWardType}`,\n        entityId: admission.id,\n        entityType: \"admission\",\n        metadata: JSON.stringify({\n          patientId: admission.patientId,\n          doctorId: admission.doctorId,\n          wardType: admission.currentWardType,\n          admissionDate: admission.admissionDate,\n        }),\n      });\n\n      res.json(admission);\n    } catch (error) {\n      console.error(\"Error creating admission:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/admissions/:id\", authenticateToken, async (req, res) => {\n    try {\n      // Normalize admission date to ISO format if provided\n      const requestBody = { ...req.body };\n      if (requestBody.admissionDate && typeof requestBody.admissionDate === 'string') {\n        try {\n          requestBody.admissionDate = new Date(requestBody.admissionDate).toISOString();\n        } catch (e) {\n          return res.status(400).json({ error: \"Invalid admission date format\" });\n        }\n      }\n      if (requestBody.dischargeDate && typeof requestBody.dischargeDate === 'string') {\n        try {\n          requestBody.dischargeDate = new Date(requestBody.dischargeDate).toISOString();\n        } catch (e) {\n          return res.status(400).json({ error: \"Invalid discharge date format\" });\n        }\n      }\n\n      const admission = await storage.updateAdmission(req.params.id, requestBody, req.user.id);\n      res.json(admission);\n    } catch (error) {\n      console.error(\"Error updating admission:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/admissions/:id\", authenticateToken, async (req, res) => {\n    try {\n      // Normalize admission date to ISO format if provided\n      const requestBody = { ...req.body };\n      if (requestBody.admissionDate && typeof requestBody.admissionDate === 'string') {\n        try {\n          requestBody.admissionDate = new Date(requestBody.admissionDate).toISOString();\n        } catch (e) {\n          return res.status(400).json({ error: \"Invalid admission date format\" });\n        }\n      }\n      if (requestBody.dischargeDate && typeof requestBody.dischargeDate === 'string') {\n        try {\n          requestBody.dischargeDate = new Date(requestBody.dischargeDate).toISOString();\n        } catch (e) {\n          return res.status(400).json({ error: \"Invalid discharge date format\" });\n        }\n      }\n\n      const admission = await storage.updateAdmission(req.params.id, requestBody, req.user.id);\n      res.json(admission);\n    } catch (error) {\n      console.error(\"Error updating admission:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get individual patient details\n  app.get(\"/api/patients/:id\", authenticateToken, async (req, res) => {\n    try {\n      const patient = await storage.getPatientById(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ error: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error fetching patient:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/pathology/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const updated = await storage.updatePathologyOrderStatus(req.params.id, status);\n      if (!updated) {\n        return res.status(404).json({ message: \"Pathology order not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update pathology order status\" });\n    }\n  });\n\n  app.patch(\"/api/pathology/test/:id/status\", authenticateToken, async (req: any, res) => {\n    try {\n      const { status, results } = req.body;\n      const updated = await storage.updatePathologyTestStatus(req.params.id, status, results, req.user.id);\n      if (!updated) {\n        return res.status(404).json({ message: \"Pathology test not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update pathology test status\" });\n    }\n  });\n\n  // ==================== OPD Visits ====================\n\n  // Get OPD visits with filters\n  app.get(\"/api/opd-visits\", requireAuth, async (req, res) => {\n    try {\n      const { doctorId, patientId, scheduledDate, status, fromDate, toDate } = req.query;\n\n      const filters: any = {};\n\n      if (doctorId && doctorId !== \"all\") {\n        filters.doctorId = doctorId as string;\n      }\n\n      if (patientId) {\n        filters.patientId = patientId as string;\n      }\n\n      if (scheduledDate) {\n        filters.scheduledDate = scheduledDate as string;\n      }\n\n      if (status && status !== \"all\") {\n        filters.status = status as string;\n      }\n\n      if (fromDate) {\n        filters.fromDate = fromDate as string;\n      }\n\n      if (toDate) {\n        filters.toDate = toDate as string;\n      }\n\n      const opdVisits = await storage.getOpdVisits(filters);\n      res.json(opdVisits);\n    } catch (error) {\n      console.error(\"Error fetching OPD visits:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create new OPD visit\n  app.post(\"/api/opd-visits\", requireAuth, async (req: any, res) => {\n    try {\n      // Check if user has billing staff role and restrict access\n      const userRoles = req.user.roles || [req.user.role]; // Backward compatibility\n      const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n      if (isBillingStaff) {\n        return res.status(403).json({ message: \"Access denied. Billing staff cannot create OPD visits.\" });\n      }\n\n      const visitData = req.body;\n\n      // Validate required fields\n      if (!visitData.patientId) {\n        return res.status(400).json({ error: \"Patient ID is required\" });\n      }\n\n      if (!visitData.doctorId) {\n        return res.status(400).json({ error: \"Doctor is required for OPD consultation\" });\n      }\n\n      if (!visitData.scheduledDate) {\n        return res.status(400).json({ error: \"Scheduled date is required\" });\n      }\n\n      // Ensure consultation fee is a valid number\n      const consultationFee = typeof visitData.consultationFee === 'number' && visitData.consultationFee >= 0\n        ? visitData.consultationFee\n        : 0;\n\n      // Create the OPD visit - storage will handle timestamps correctly\n      const opdVisit = await storage.createOpdVisit({\n        patientId: visitData.patientId,\n        doctorId: visitData.doctorId,\n        visitDate: visitData.scheduledDate,\n        scheduledDate: visitData.scheduledDate,\n        scheduledTime: visitData.scheduledTime || \"09:00\",\n        symptoms: visitData.symptoms || null,\n        diagnosis: visitData.diagnosis || null,\n        prescription: visitData.prescription || null,\n        consultationFee: consultationFee,\n        status: \"scheduled\"\n      }, req.user.id);\n\n      // Log activity for OPD scheduling\n      const patient = await storage.getPatientById(visitData.patientId);\n      const doctor = await storage.getDoctorById(visitData.doctorId);\n\n      await storage.createActivity({\n        userId: req.user.id,\n        activityType: \"opd_scheduled\",\n        title: \"OPD Appointment Scheduled\",\n        description: `${patient?.name || 'Patient'} scheduled for consultation with ${doctor?.name || 'Doctor'}`,\n        entityId: opdVisit.id,\n        entityType: \"patient_visit\",\n        metadata: JSON.stringify({\n          patientId: visitData.patientId,\n          doctorId: visitData.doctorId,\n          scheduledDate: visitData.scheduledDate,\n          scheduledTime: visitData.scheduledTime,\n        }),\n      });\n\n      res.status(201).json(opdVisit);\n    } catch (error) {\n      console.error(\"Error creating OPD visit:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update OPD visit status\n  app.patch(\"/api/opd-visits/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n\n      const updated = await storage.updateOpdVisitStatus(id, status, req.user.id);\n\n      if (!updated) {\n        return res.status(404).json({ error: \"OPD visit not found\" });\n      }\n\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating OPD visit status:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Room Type Management Routes\n  app.get(\"/api/room-types\", authenticateToken, async (req, res) => {\n    try {\n      const roomTypes = await storage.getAllRoomTypes();\n      res.json(roomTypes);\n    } catch (error) {\n      console.error(\"Error fetching room types:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/room-types\", authenticateToken, async (req: any, res) => {\n    try {\n      const roomType = await storage.createRoomType(req.body, req.user.id);\n      res.status(201).json(roomType);\n    } catch (error) {\n      console.error(\"Error creating room type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/room-types/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const updated = await storage.updateRoomType(req.params.id, req.body, req.user.id);\n      if (!updated) {\n        return res.status(404).json({ error: \"Room type not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating room type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/room-types/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      await storage.deleteRoomType(req.params.id, req.user.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting room type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Room Management Routes\n  app.get(\"/api/rooms\", authenticateToken, async (req, res) => {\n    try {\n      const rooms = await storage.getAllRooms();\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/rooms\", authenticateToken, async (req: any, res) => {\n    try {\n      const room = await storage.createRoom(req.body, req.user.id);\n      res.status(201).json(room);\n    } catch (error) {\n      console.error(\"Error creating room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/rooms/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const updated = await storage.updateRoom(req.params.id, req.body, req.user.id);\n      if (!updated) {\n        return res.status(404).json({ error: \"Room not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/rooms/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      await storage.deleteRoom(req.params.id, req.user.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/rooms/by-type/:roomTypeId\", authenticateToken, async (req, res) => {\n    try {\n      const rooms = await storage.getRoomsByType(req.params.roomTypeId);\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms by type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/rooms/:id/occupancy\", authenticateToken, async (req, res) => {\n    try {\n      const { isOccupied } = req.body;\n      const updated = await storage.updateRoomOccupancy(req.params.id, isOccupied, req.user.id);\n      if (!updated) {\n        return res.status(404).json({ error: \"Room not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating room occupancy:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Hospital Settings Routes\n  app.get(\"/api/settings/hospital\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"=== Hospital Settings API Call ===\");\n      const settings = await storage.getHospitalSettings();\n      console.log(\"Hospital settings from storage:\", settings);\n      console.log(\"=== End Hospital Settings API ===\");\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching hospital settings:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/settings/hospital\", authenticateToken, async (req, res) => {\n    try {\n      const settings = await storage.saveHospitalSettings(req.body, req.user.id);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error saving hospital settings:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/settings/upload-logo\", authenticateToken, async (req, res) => {\n    try {\n      const { logo } = req.body;\n      const logoPath = await storage.saveLogo(logo, req.user.id);\n      res.json({ logoPath });\n    } catch (error) {\n      console.error(\"Error uploading logo:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // System Settings Routes\n  app.get(\"/api/settings/system\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to access system settings\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      const settings = await storage.getSystemSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching system settings:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/settings/system\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to modify system settings\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      const settings = await storage.saveSystemSettings(req.body, req.user.id);\n\n      // Update backup scheduler based on new settings\n      if (settings.autoBackup) {\n        await backupScheduler.enableAutoBackup(settings.backupFrequency, settings.backupTime);\n      } else {\n        await backupScheduler.disableAutoBackup();\n      }\n\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error saving system settings:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Backup Routes\n  app.post(\"/api/backup/create\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to create backups\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      const { backupType = 'manual' } = req.body;\n      console.log(`Creating backup with type: ${backupType}`);\n\n      const backup = await storage.createBackup(backupType, req.user.id);\n      console.log(`Backup created successfully:`, backup);\n\n      res.json(backup);\n    } catch (error) {\n      console.error(\"Error creating backup:\", error);\n      res.status(500).json({ error: \"Failed to create backup\", message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n\n\n  app.get(\"/api/backup/logs\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to view backup logs\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      const logs = await storage.getBackupLogs();\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching backup logs:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/backup/history\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to view backup history\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      const history = await storage.getBackupHistory();\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching backup history:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/backup/cleanup\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to cleanup old backups\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      await storage.cleanOldBackups(req.user.id);\n      res.json({ message: \"Old backups cleaned up successfully\" });\n    } catch (error) {\n      console.error(\"Error cleaning up backups:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/backup/available\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to view available backups\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      const backups = await storage.getAvailableBackups();\n      res.json(backups);\n    } catch (error) {\n      console.error(\"Error fetching available backups:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/backup/restore\", authenticateToken, async (req: any, res) => {\n    try {\n      // Allow admin and super_user roles to restore backups\n      const userRoles = req.user.roles || [req.user.role];\n      if (!userRoles.includes('admin') && !userRoles.includes('super_user')) {\n        return res.status(403).json({ message: \"Access denied. Admin or super user role required.\" });\n      }\n\n      const { backupFilePath } = req.body;\n\n      if (!backupFilePath) {\n        return res.status(400).json({ error: \"Backup file path is required\" });\n      }\n\n      const result = await storage.restoreBackup(backupFilePath, req.user.id);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error restoring backup:\", error);\n      res.status(500).json({\n        error: \"Failed to restore backup\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Daily receipt count for receipt numbering\n  app.get(\"/api/receipts/daily-count/:serviceType/:date\", authenticateToken, async (req, res) => {\n    try {\n      const { serviceType, date } = req.params;\n      const count = await storage.getDailyReceiptCount(serviceType, date);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error getting daily receipt count:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admission Events Routes\n  app.get(\"/api/admissions/:id/events\", authenticateToken, async (req, res) => {\n    try {\n      const events = await storage.getAdmissionEvents(req.params.id);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching admission events:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admissions/:id/transfer\", authenticateToken, async (req: any, res) => {\n    try {\n      const { roomNumber, wardType } = req.body;\n      const updated = await storage.transferRoom(req.params.id, { roomNumber, wardType }, req.user.id);\n      if (!updated) {\n        return res.status(404).json({ error: \"Admission not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error transferring room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admissions/:id/discharge\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { dischargeDateTime } = req.body;\n\n      const admission = await storage.dischargePatient(id, req.user.id, dischargeDateTime);\n      if (!admission) {\n        return res.status(404).json({ error: \"Admission not found\" });\n      }\n\n      // Activity logging is already handled in storage.dischargePatient()\n      res.json(admission);\n    } catch (error) {\n      console.error(\"Error discharging patient:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Comprehensive Bill Generation\n  app.get(\"/api/patients/:patientId/comprehensive-bill\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const comprehensiveBill = await storage.generateComprehensiveBill(patientId);\n      res.json(comprehensiveBill);\n    } catch (error) {\n      console.error(\"Error generating comprehensive bill:\", error);\n      res.status(500).json({ error: \"Failed to generate comprehensive bill\" });\n    }\n  });\n\n  // Inpatient Management Detail Routes (IST-based calculations)\n  app.get(\"/api/inpatients/bed-occupancy\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const bedOccupancy = await storage.getBedOccupancyDetails();\n      res.json(bedOccupancy);\n    } catch (error) {\n      console.error(\"Error fetching bed occupancy:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/inpatients/currently-admitted\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const admittedPatients = await storage.getCurrentlyAdmittedPatients();\n      res.json(admittedPatients);\n    } catch (error) {\n      console.error(\"Error fetching currently admitted patients:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/inpatients/admitted-today\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const todayAdmissions = await storage.getTodayAdmissions();\n      res.json(todayAdmissions);\n    } catch (error) {\n      console.error(\"Error fetching today's admissions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/inpatients/discharged-today\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const todayDischarges = await storage.getTodayDischarges();\n      res.json(todayDischarges);\n    } catch (error) {\n      console.error(\"Error fetching today's discharges:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n\n\n  // Patient Payment Routes\n  app.post(\"/api/patients/:patientId/payments\", authenticateToken, async (req: any, res) => {\n    try {\n      const { patientId } = req.params;\n      const { amount, paymentMethod, reason, paymentDate } = req.body;\n\n      // Verify user ID exists\n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User authentication required\" });\n      }\n\n      const payment = await storage.createPatientPayment({\n        patientId,\n        amount,\n        paymentMethod,\n        reason: reason || \"Payment\",\n        paymentDate: paymentDate || new Date().toISOString(),\n        processedBy: req.user.id,\n      }, req.user.id);\n\n      // Log activity for payment\n      const patient = await storage.getPatientById(patientId);\n\n      res.json(payment);\n    } catch (error: any) {\n      console.error(\"Error creating patient payment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create payment\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/patients/:patientId/payments\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const payments = await storage.getPatientPayments(patientId);\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching patient payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.get(\"/api/patients/:patientId/financial-summary\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      console.log(`Generating financial summary for patient: ${patientId}`);\n      const summary = await storage.getPatientFinancialSummary(patientId);\n      console.log(`Financial summary - Total charges: ${summary.totalCharges}, Total paid: ${summary.totalPaid}`);\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching patient financial summary:\", error);\n      res.status(500).json({ message: \"Failed to fetch financial summary\" });\n    }\n  });\n\n  app.get(\"/api/patients/:patientId/comprehensive-bill\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      // Disable caching to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n\n      console.log(`Generating comprehensive bill for patient: ${patientId}`);\n      const comprehensiveBill = await storage.generateComprehensiveBill(patientId);\n      console.log(`Generated comprehensive bill with ${comprehensiveBill.billItems.length} items`);\n\n      res.json(comprehensiveBill);\n    } catch (error) {\n      console.error(\"Error generating comprehensive bill:\", error);\n      res.status(500).json({ message: \"Failed to generate comprehensive bill\" });\n    }\n  });\n\n  // Patient Discount Routes\n  app.post(\"/api/patients/:patientId/discounts\", authenticateToken, async (req: any, res) => {\n    try {\n      const { patientId } = req.params;\n      const { amount, reason, discountType, discountDate } = req.body;\n\n      // Verify user ID exists\n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User authentication required\" });\n      }\n\n      const discount = await storage.createPatientDiscount({\n        patientId,\n        amount,\n        reason,\n        discountType: discountType || \"manual\",\n        discountDate: discountDate || new Date().toISOString(),\n        approvedBy: req.user.id,\n      }, req.user.id);\n\n      // Log activity for discount\n      const patient = await storage.getPatientById(patientId);\n\n      res.json(discount);\n    } catch (error: any) {\n      console.error(\"Error creating patient discount:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create discount\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/patients/:patientId/discounts\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const discounts = await storage.getPatientDiscounts(patientId);\n      res.json(discounts);\n    } catch (error) {\n      console.error(\"Error fetching patient discounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch discounts\" });\n    }\n  });\n\n  // Bulk pending bills endpoint - optimized for performance\n  app.get(\"/api/patients/pending-bills/bulk\", authenticateToken, async (req, res) => {\n    try {\n      const pendingBills = await storage.getAllPatientsPendingBills();\n      res.json(pendingBills);\n    } catch (error) {\n      console.error(\"Error fetching pending bills:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending bills\" });\n    }\n  });\n\n  // Service Categories Routes\n  app.get(\"/api/service-categories\", authenticateToken, async (req, res) => {\n    try {\n      const categories = await storage.getServiceCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching service categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch service categories\" });\n    }\n  });\n\n\n\n  app.post(\"/api/service-categories\", authenticateToken, async (req: any, res) => {\n    try {\n      const categoryData = insertServiceCategorySchema.parse(req.body);\n      const category = await storage.createServiceCategory(categoryData, req.user.id);\n      res.json(category);\n    } catch (error: any) {\n      console.error(\"Error creating service category:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create service category\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/service-categories/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const categoryData = insertServiceCategorySchema.partial().parse(req.body);\n      const category = await storage.updateServiceCategory(req.params.id, categoryData, req.user.id);\n      if (!category) {\n        return res.status(404).json({ message: \"Service category not found\" });\n      }\n      res.json(category);\n    } catch (error: any) {\n      console.error(\"Error updating service category:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update service category\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/service-categories/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n\n      // Get the service category to find its name\n      const categories = await storage.getServiceCategories();\n      const categoryToDelete = categories.find(cat => cat.id === id);\n\n      if (!categoryToDelete) {\n        return res.status(404).json({ message: \"Service category not found\" });\n      }\n\n      // Check if there are any services using this category\n      const services = await storage.getServices();\n      const servicesInCategory = services.filter(service => service.category === categoryToDelete.name);\n\n      if (servicesInCategory.length > 0) {\n        return res.status(400).json({\n          message: `Cannot delete category \"${categoryToDelete.label}\". There are ${servicesInCategory.length} service(s) still using this category. Please delete or move these services to another category first.`,\n          servicesCount: servicesInCategory.length,\n          services: servicesInCategory.map(s => ({ id: s.id, name: s.name }))\n        });\n      }\n\n      const deleted = await storage.deleteServiceCategory(id, req.user.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Service category not found\" });\n      }\n      res.json({ message: \"Service category deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Error deleting service category:\", error);\n      res.status(500).json({ message: error.message || \"Failed to delete service category\" });\n    }\n  });\n\n  // Doctor Earnings Routes\n  app.get(\"/api/doctors/:doctorId/earnings\", authenticateToken, async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const { status } = req.query;\n      console.log(`GET /api/doctors/${doctorId}/earnings - status filter: ${status || 'all'}`);\n      const earnings = await storage.getDoctorEarnings(doctorId, status as string | undefined);\n      console.log(`Returning ${earnings.length} earnings for doctor ${doctorId}`);\n      res.json(earnings);\n    } catch (error) {\n      console.error(\"Error fetching doctor earnings:\", error);\n      res.status(500).json({ message: \"Failed to fetch doctor earnings\" });\n    }\n  });\n\n  app.post(\"/api/doctors/recalculate-earnings\", authenticateToken, async (req: any, res) => {\n    try {\n      const { doctorId } = req.body;\n      const result = await storage.recalculateDoctorEarnings(doctorId, req.user.id);\n      res.json({\n        message: `Recalculation complete: processed ${result.processed} services, created ${result.created} new earnings`,\n        ...result\n      });\n    } catch (error) {\n      console.error(\"Error recalculating doctor earnings:\", error);\n      res.status(500).json({ message: \"Failed to recalculate doctor earnings\" });\n    }\n  });\n\n  app.put(\"/api/doctors/:doctorId/mark-paid\", authenticateToken, async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n\n      // Get all pending earnings for this doctor\n      const pendingEarnings = await storage.getDoctorEarnings(doctorId, 'pending');\n\n      if (pendingEarnings.length === 0) {\n        return res.status(400).json({ message: \"No pending earnings found for this doctor\" });\n      }\n\n      // Mark all pending earnings as paid\n      for (const earning of pendingEarnings) {\n        await storage.updateDoctorEarningStatus(earning.id, 'paid', req.user.id);\n      }\n\n      res.json({\n        message: `Successfully marked ${pendingEarnings.length} earnings as paid`,\n        count: pendingEarnings.length\n      });\n    } catch (error) {\n      console.error(\"Error marking earnings as paid:\", error);\n      res.status(500).json({ message: \"Failed to mark earnings as paid\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":99746},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/patients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport React from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { UserPlus, Edit, Eye } from \"lucide-react\";\nimport { insertPatientSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ComprehensiveBillTemplate } from \"@/components/comprehensive-bill-template\";\nimport AccessRestricted from \"@/components/access-restricted\";\nimport type { Patient } from \"@shared/schema\";\nimport { useTimezone } from \"@/hooks/use-timezone\";\n\nexport default function Patients() {\n  const [, navigate] = useLocation();\n  const [isNewPatientOpen, setIsNewPatientOpen] = useState(false);\n  const [isEditPatientOpen, setIsEditPatientOpen] = useState(false);\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [comprehensiveBillData, setComprehensiveBillData] = useState<any>(null);\n  const [isComprehensiveBillOpen, setIsComprehensiveBillOpen] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const { formatDateTime } = useTimezone();\n\n  // Fetch hospital settings for bills\n  const { data: hospitalSettings, isLoading: isHospitalSettingsLoading, error: hospitalSettingsError } = useQuery({\n    queryKey: [\"/api/settings/hospital\"],\n    queryFn: async () => {\n      console.log(\"Fetching hospital settings for patients page...\");\n      const response = await fetch(\"/api/settings/hospital\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        console.error(\"Failed to fetch hospital settings:\", response.status, response.statusText);\n        throw new Error(\"Failed to fetch hospital settings\");\n      }\n      const data = await response.json();\n      console.log(\"Fetched hospital settings for patients page:\", data);\n      return data;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 3,\n    refetchOnMount: true,\n    refetchOnWindowFocus: false,\n  });\n\n  // Create hospital info object from settings - same as patient detail page\n  const hospitalInfo = React.useMemo(() => {\n    console.log(\"=== Hospital Info Creation (Patients Page) ===\");\n    console.log(\"Hospital settings in patients page:\", hospitalSettings);\n    console.log(\"Hospital settings loading:\", isHospitalSettingsLoading);\n    console.log(\"Hospital settings error:\", hospitalSettingsError);\n    \n    // Always create hospital info object, preferring saved settings over defaults\n    const info = {\n      name: hospitalSettings?.name || \"Health Care Hospital and Diagnostic Center\",\n      address: hospitalSettings?.address || \"In front of Maheshwari Garden, Binjhiya, Jabalpur Road, Mandla, Madhya Pradesh - 482001\",\n      phone: hospitalSettings?.phone || \"8889762101, 9826325958\",\n      email: hospitalSettings?.email || \"hospital@healthcare.in\",\n      registrationNumber: hospitalSettings?.registrationNumber || \"NH/3613/JUL-2021\",\n      logo: hospitalSettings?.logoPath || undefined,\n    };\n\n    console.log(\"Final hospital info constructed for patients page comprehensive bill:\", info);\n    console.log(\"=== End Hospital Info Creation (Patients Page) ===\");\n    return info;\n  }, [hospitalSettings, isHospitalSettingsLoading, hospitalSettingsError]);\n\n  const { data: patients = [], isLoading } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (patientData: any) => {\n      const response = await fetch(\"/api/patients\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(patientData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create patient\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      setIsNewPatientOpen(false);\n      form.reset({\n        name: \"\",\n        age: 0,\n        gender: \"\",\n        phone: \"\",\n        address: \"\",\n        email: \"\",\n        emergencyContact: \"\",\n      });\n      toast({\n        title: \"Patient created successfully\",\n        description: \"The patient has been registered in the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating patient\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePatientMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      // Remove empty string fields\n      const filteredUpdates = Object.fromEntries(\n        Object.entries(updates).filter(\n          ([_, value]) => value !== \"\" && value !== undefined && value !== null\n        )\n      );\n\n      const response = await fetch(`/api/patients/${id}`, {\n        method: \"PATCH\", // PATCH for partial updates\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(filteredUpdates),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update patient\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      setIsEditPatientOpen(false);\n      toast({\n        title: \"Patient updated successfully\",\n        description: \"The patient record has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error updating patient\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateComprehensiveBillMutation = useMutation({\n    mutationFn: async (patientId: string) => {\n      // Wait for hospital settings to load before generating bill\n      if (isHospitalSettingsLoading) {\n        throw new Error(\"Hospital settings are still loading. Please wait.\");\n      }\n\n      if (hospitalSettingsError) {\n        console.warn(\"Hospital settings error, proceeding with defaults:\", hospitalSettingsError);\n      }\n\n      console.log(\"=== Comprehensive Bill Generation (Patients Page) ===\");\n      console.log(\"Patient ID:\", patientId);\n      console.log(\"Hospital info being used:\", hospitalInfo);\n      \n      const response = await fetch(`/api/patients/${patientId}/comprehensive-bill`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Comprehensive bill API error:\", response.status, errorText);\n        throw new Error(`Failed to generate comprehensive bill: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"Comprehensive bill data received:\", data);\n      console.log(\"=== End Comprehensive Bill Generation (Patients Page) ===\");\n      return data;\n    },\n    onSuccess: (data) => {\n      setComprehensiveBillData(data);\n      setIsComprehensiveBillOpen(true);\n      toast({\n        title: \"Bill generated successfully\",\n        description: \"Comprehensive financial statement is ready for viewing.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Error generating comprehensive bill:\", error);\n      toast({\n        title: \"Error generating bill\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateComprehensiveBill = (patient: Patient) => {\n    // Check if hospital settings are still loading\n    if (isHospitalSettingsLoading) {\n      toast({\n        title: \"Loading...\",\n        description: \"Please wait for hospital settings to load.\",\n      });\n      return;\n    }\n\n    generateComprehensiveBillMutation.mutate(patient.id);\n  };\n\n  const form = useForm({\n    resolver: zodResolver(insertPatientSchema),\n    defaultValues: {\n      name: \"\",\n      age: undefined,\n      gender: \"\",\n      phone: \"\",\n      address: \"\",\n      email: \"\",\n      emergencyContact: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  const editForm = useForm({\n    resolver: zodResolver(insertPatientSchema),\n    defaultValues: {\n      name: \"\",\n      age: undefined,\n      gender: \"\",\n      phone: \"\",\n      address: \"\",\n      email: \"\",\n      emergencyContact: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n\n  const onSubmit = (data: any) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    \n    // Validate required fields explicitly\n    if (!data.name?.trim()) {\n      form.setError(\"name\", { message: \"Name is required\" });\n      return;\n    }\n    if (!data.age || data.age <= 0) {\n      form.setError(\"age\", { message: \"Valid age is required\" });\n      return;\n    }\n    if (!data.gender?.trim()) {\n      form.setError(\"gender\", { message: \"Gender is required\" });\n      return;\n    }\n    if (!data.phone?.trim()) {\n      form.setError(\"phone\", { message: \"Phone number is required\" });\n      return;\n    }\n    \n    createPatientMutation.mutate(data);\n  };\n\n  // Check user roles for billing staff restrictions\n  const currentUserRoles = user?.roles || [user?.role]; // Backward compatibility\n  const isBillingStaff = currentUserRoles.includes('billing_staff') && !currentUserRoles.includes('admin') && !currentUserRoles.includes('super_user');\n\n  const filteredPatients = patients.filter((patient: Patient) =>\n    patient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.patientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.phone.includes(searchQuery)\n  );\n\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Patient Registration\"\n        searchPlaceholder=\"Search patients by name, ID, or phone...\"\n        onSearch={setSearchQuery}\n        onNewAction={isBillingStaff ? undefined : () => setIsNewPatientOpen(true)}\n        newActionLabel={isBillingStaff ? undefined : \"New Patient\"}\n      />\n      \n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>All Patients</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Total: {filteredPatients.length} patients\n            </p>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                <p className=\"text-sm text-muted-foreground mt-2\">Loading patients...</p>\n              </div>\n            ) : filteredPatients.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No patients found</p>\n                {!isBillingStaff && (\n                  <Button \n                    onClick={() => setIsNewPatientOpen(true)}\n                    className=\"mt-4\"\n                    data-testid=\"button-first-patient\"\n                  >\n                    Register your first patient\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <Table data-testid=\"patients-table\">\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient ID</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Age/Gender</TableHead>\n                    <TableHead>Phone</TableHead>\n                    <TableHead>Registered</TableHead>\n                    {/* <TableHead>Status</TableHead> */}\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredPatients.map((patient: Patient) => (\n                    <TableRow key={patient.id} data-testid={`patient-row-${patient.id}`}>\n                      <TableCell className=\"font-medium\" data-testid={`patient-id-${patient.id}`}>\n                        {patient.patientId}\n                      </TableCell>\n                      <TableCell data-testid={`patient-name-${patient.id}`}>\n                        {patient.name}\n                      </TableCell>\n                      <TableCell data-testid={`patient-age-gender-${patient.id}`}>\n                        {patient.age}y, {patient.gender}\n                      </TableCell>\n                      <TableCell data-testid={`patient-phone-${patient.id}`}>\n                        {patient.phone}\n                      </TableCell>\n                      <TableCell data-testid={`patient-registered-${patient.id}`}>\n                        {patient.createdAt ? formatDateTime(patient.createdAt) : 'N/A'}\n                      </TableCell>\n                      {/* <TableCell>\n                        <Badge \n                          variant={patient.isActive ? \"default\" : \"secondary\"}\n                          data-testid={`patient-status-${patient.id}`}\n                        >\n                          {patient.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell> */}\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => navigate(`/patients/${patient.id}`)}\n                            data-testid={`button-view-${patient.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          {!isBillingStaff && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedPatient(patient);\n                                editForm.reset(patient);   // prefill fields\n                                setIsEditPatientOpen(true);\n                              }}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleGenerateComprehensiveBill(patient)}\n                            disabled={generateComprehensiveBillMutation.isPending || isHospitalSettingsLoading}\n                            data-testid={`button-bill-${patient.id}`}\n                            title=\"Generate Comprehensive Bill\"\n                          >\n                            {(generateComprehensiveBillMutation.isPending || isHospitalSettingsLoading) ? (\n                              <div className=\"w-4 h-4 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600\" />\n                            ) : (\n                              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                              </svg>\n                            )}\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* New Patient Dialog */}\n      <Dialog open={isNewPatientOpen} onOpenChange={setIsNewPatientOpen}>\n\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-patient-dialog\">\n          <DialogHeader>\n            <DialogTitle>Register New Patient</DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"Enter patient's full name\"\n                  data-testid=\"input-patient-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"age\">Age *</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  {...form.register(\"age\", { valueAsNumber: true })}\n                  placeholder=\"Enter age\"\n                  data-testid=\"input-patient-age\"\n                />\n                {form.formState.errors.age && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.age.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">Gender *</Label>\n                <Select \n                  value={form.watch(\"gender\")}\n                  onValueChange={(value) => form.setValue(\"gender\", value, { shouldValidate: true })}\n                >\n                  <SelectTrigger data-testid=\"select-patient-gender\">\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.gender && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.gender.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+91 XXXXX XXXXX\"\n                  data-testid=\"input-patient-phone\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                placeholder=\"patient@example.com\"\n                data-testid=\"input-patient-email\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                {...form.register(\"address\")}\n                placeholder=\"Enter complete address\"\n                rows={3}\n                data-testid=\"input-patient-address\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n              <Input\n                id=\"emergencyContact\"\n                {...form.register(\"emergencyContact\")}\n                placeholder=\"+91 XXXXX XXXXX\"\n                data-testid=\"input-patient-emergency\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewPatientOpen(false)}\n                data-testid=\"button-cancel-patient\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createPatientMutation.isPending || !form.formState.isValid}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-patient\"\n              >\n                {createPatientMutation.isPending ? \"Saving...\" : \"Register Patient\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n\n      {/* Edit Patient Dialog */}\n      <Dialog open={isEditPatientOpen} onOpenChange={setIsEditPatientOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"edit-patient-dialog\">\n          <DialogHeader>\n            <DialogTitle>Edit Patient: {selectedPatient?.name}</DialogTitle>\n          </DialogHeader>\n          \n          <form\n            onSubmit={editForm.handleSubmit((data) => {\n              if (!selectedPatient) return;\n              updatePatientMutation.mutate(\n                { id: selectedPatient.id, updates: data },\n                {\n                  onSuccess: () => {\n                    setIsEditPatientOpen(false);\n                    editForm.reset();\n                  },\n                }\n              );\n            })}\n            className=\"space-y-4\"\n          >\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...editForm.register(\"name\")}\n                  placeholder=\"Enter patient's full name\"\n                />\n                {editForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.name.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"age\">Age *</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  {...editForm.register(\"age\", { valueAsNumber: true })}\n                  placeholder=\"Enter age\"\n                />\n                {editForm.formState.errors.age && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.age.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">Gender *</Label>\n                <Select\n                  value={editForm.watch(\"gender\")}\n                  onValueChange={(value) =>\n                    editForm.setValue(\"gender\", value, { shouldValidate: true })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                {editForm.formState.errors.gender && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.gender.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...editForm.register(\"phone\")}\n                  placeholder=\"+91 XXXXX XXXXX\"\n                />\n                {editForm.formState.errors.phone && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.phone.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...editForm.register(\"email\")}\n                placeholder=\"patient@example.com\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                {...editForm.register(\"address\")}\n                placeholder=\"Enter complete address\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n              <Input\n                id=\"emergencyContact\"\n                {...editForm.register(\"emergencyContact\")}\n                placeholder=\"+91 XXXXX XXXXX\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditPatientOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={\n                  updatePatientMutation.isPending ||\n                  !editForm.formState.isValid\n                }\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n              >\n                {updatePatientMutation.isPending ? \"Saving...\" : \"Update Patient\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Comprehensive Bill Template */}\n      {comprehensiveBillData && (\n        <ComprehensiveBillTemplate\n          billData={comprehensiveBillData}\n          hospitalInfo={hospitalInfo}\n          isOpen={isComprehensiveBillOpen}\n          onClose={() => {\n            setIsComprehensiveBillOpen(false);\n            setComprehensiveBillData(null);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":27326},"client/src/hooks/use-auth.tsx":{"content":"\nimport { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { authApi, tokenStorage, type User } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = tokenStorage.get();\n      if (token) {\n        try {\n          const userData = await authApi.getMe();\n          setUser(userData);\n        } catch (error) {\n          tokenStorage.remove();\n        }\n      }\n      setIsLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const { token, user: userData } = await authApi.login(username, password);\n      tokenStorage.set(token);\n      setUser(userData);\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${userData.fullName}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    tokenStorage.remove();\n    setUser(null);\n    toast({\n      title: \"Logged out\",\n      description: \"You have been logged out successfully\",\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isLoading,\n      login,\n      logout,\n      isAuthenticated: !!user,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2104},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/currently-admitted.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  User, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  Stethoscope,\n  Phone,\n  MapPin\n} from \"lucide-react\";\nimport type { Admission, Patient, Doctor } from \"@shared/schema\";\n\ninterface AdmissionWithDetails extends Admission {\n  patient: Patient;\n  doctor: Doctor | null;\n}\n\nexport default function CurrentlyAdmittedPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch currently admitted patients\n  const { data: admittedPatients = [], isLoading } = useQuery<AdmissionWithDetails[]>({\n    queryKey: [\"/api/inpatients/currently-admitted\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Filter patients based on search\n  const filteredPatients = useMemo(() => {\n    if (!searchQuery) return admittedPatients;\n\n    return admittedPatients.filter(admission => {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        admission.patient?.name.toLowerCase().includes(searchLower) ||\n        admission.patient?.patientId.toLowerCase().includes(searchLower) ||\n        admission.admissionId.toLowerCase().includes(searchLower) ||\n        admission.currentWardType?.toLowerCase().includes(searchLower) ||\n        admission.doctor?.name.toLowerCase().includes(searchLower)\n      );\n    });\n  }, [admittedPatients, searchQuery]);\n\n  const calculateDays = (admissionDate: string) => {\n    const admission = new Date(admissionDate);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - admission.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Currently Admitted Patients\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"Currently Admitted Patients\" />\n\n      <div className=\"p-6\">\n        {/* Removed Summary Stats */}\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by patient name, ID, admission ID, ward type, or doctor...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Patients Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Currently Admitted Patients ({filteredPatients.length})\n            </CardTitle>\n            <CardDescription>\n              All patients currently admitted to the hospital\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredPatients.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient Details</TableHead>\n                    <TableHead>Admission Info</TableHead>\n                    <TableHead>Ward/Room</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Stay Duration</TableHead>\n                    <TableHead>Daily Cost</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredPatients.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.patient?.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            ID: {admission.patient?.patientId}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            {admission.patient?.phone}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-sm\">{admission.admissionId}</div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(admission.admissionDate).toLocaleDateString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.currentWardType || \"Not specified\"}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Room: {admission.currentRoomNumber || \"TBA\"}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {admission.doctor ? (\n                          <div>\n                            <div className=\"font-medium text-sm flex items-center gap-1\">\n                              <Stethoscope className=\"h-3 w-3\" />\n                              {admission.doctor.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {admission.doctor.specialization}\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">No doctor assigned</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {calculateDays(admission.admissionDate)} days\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">₹{admission.dailyCost.toLocaleString()}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          Total: ₹{admission.totalCost.toLocaleString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Patient\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <User className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No patients match your search criteria.\" : \"No patients are currently admitted.\"}\n                </p>\n                <Link href=\"/patients\">\n                  <Button className=\"mt-4\">\n                    Admit New Patient\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8341},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Hospital, \n  FileText, \n  Users, \n  TestTube, \n  UserPlus, \n  BarChart3, \n  Settings,\n  LogOut,\n  Building2,\n  UserCog\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { \n  Form, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormControl, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Profile edit form schema\nconst profileEditSchema = z.object({\n  username: z.string().min(1, \"Username is required\").trim(),\n  fullName: z.string().min(1, \"Full name is required\").trim(),\n  password: z.string().min(8, \"Password must be at least 8 characters\").optional().or(z.literal(\"\")),\n  confirmPassword: z.string().optional(),\n}).refine((data) => {\n  if (data.password && data.password !== \"\" && data.password !== data.confirmPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ninterface ProfileEditFormProps {\n  user: any;\n  onSuccess: () => void;\n}\n\nfunction ProfileEditForm({ user, onSuccess }: ProfileEditFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm({\n    resolver: zodResolver(profileEditSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      fullName: user?.fullName || \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const updateData: any = {\n        username: data.username,\n        fullName: data.fullName,\n      };\n      \n      // Only include password if it's provided\n      if (data.password && data.password.trim() !== \"\") {\n        updateData.password = data.password;\n      }\n      \n      const response = await fetch(\"/api/profile\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update profile\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      // Update the user data in cache\n      queryClient.setQueryData([\"/api/users/me\"], updatedUser);\n      onSuccess();\n      form.reset({\n        username: updatedUser.username,\n        fullName: updatedUser.fullName,\n        password: \"\",\n        confirmPassword: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"input-username\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"fullName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Full Name</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"input-fullname\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>New Password (optional)</FormLabel>\n              <FormControl>\n                <Input \n                  {...field} \n                  type=\"password\" \n                  placeholder=\"Leave blank to keep current password\"\n                  data-testid=\"input-password\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"confirmPassword\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirm New Password</FormLabel>\n              <FormControl>\n                <Input \n                  {...field} \n                  type=\"password\" \n                  placeholder=\"Confirm new password\"\n                  data-testid=\"input-confirm-password\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button \n            type=\"submit\" \n            disabled={updateProfileMutation.isPending}\n            data-testid=\"button-save-profile\"\n          >\n            {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={onSuccess}\n            data-testid=\"button-cancel-profile\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nconst baseNavigation = [\n  { name: \"Dashboard\", href: \"/\", icon: BarChart3, roles: [\"admin\", \"doctor\", \"receptionist\", \"billing_staff\", \"super_user\"] },\n  { name: \"Patient Registration\", href: \"/patients\", icon: Users, roles: [\"admin\", \"doctor\", \"receptionist\", \"billing_staff\", \"super_user\"] },\n  { name: \"Pathology Tests\", href: \"/pathology\", icon: TestTube, roles: [\"admin\", \"doctor\", \"receptionist\", \"billing_staff\", \"super_user\"] },\n  { name: \"Doctor Management\", href: \"/doctors\", icon: UserPlus, roles: [\"admin\", \"super_user\"] },\n  { name: \"Service Management\", href: \"/services\", icon: Building2, roles: [\"admin\", \"super_user\"] },\n  { name: \"Revenue & Payments\", href: \"/revenue\", icon: FileText, roles: [\"admin\", \"billing_staff\", \"super_user\"] },\n  { name: \"System Settings\", href: \"/settings\", icon: Settings, roles: [\"admin\", \"super_user\"] },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const [isProfileDialogOpen, setIsProfileDialogOpen] = useState(false);\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const isActive = (href: string) => {\n    return location === href || (href !== \"/\" && location.startsWith(href));\n  };\n\n  // Show all navigation items regardless of role\n  const navigation = baseNavigation;\n\n  return (\n    <aside className=\"w-64 bg-surface border-r border-border flex flex-col shadow-sm\">\n      {/* Logo and Hospital Name */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-medical-blue rounded-lg flex items-center justify-center\">\n            <Hospital className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-bold text-text-dark\">MedCare Pro</h1>\n            <p className=\"text-sm text-text-muted\">Hospital Management</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => (\n          <Link \n            key={item.name} \n            href={item.href}\n            className={cn(\n              \"flex items-center space-x-3 px-3 py-3 rounded-lg font-medium transition-colors\",\n              isActive(item.href)\n                ? \"bg-medical-blue text-white\"\n                : \"text-text-muted hover:bg-muted hover:text-text-dark\"\n            )}\n            data-testid={`nav-${item.href === \"/\" ? \"dashboard\" : item.href.substring(1)}`}\n          >\n            <item.icon className=\"w-5 h-5\" />\n            <span>{item.name}</span>\n          </Link>\n        ))}\n      </nav>\n\n      {/* User Profile Section */}\n      <div className=\"p-4 border-t border-border\">\n        <Dialog open={isProfileDialogOpen} onOpenChange={setIsProfileDialogOpen}>\n          <DialogTrigger asChild>\n            <div className=\"flex items-center space-x-3 mb-3 cursor-pointer hover:bg-muted rounded-lg p-2 transition-colors\" data-testid=\"profile-trigger\">\n              <div className=\"w-10 h-10 bg-healthcare-green rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-medium text-sm\" data-testid=\"user-initials\">\n                  {user ? getInitials(user.fullName) : \"U\"}\n                </span>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-text-dark truncate\" data-testid=\"user-name\">\n                  {user?.fullName || \"User\"}\n                </p>\n                <p className=\"text-xs text-text-muted capitalize\" data-testid=\"user-role\">\n                  {user?.role?.replace('_', ' ') || \"Role\"}\n                </p>\n              </div>\n              <UserCog className=\"w-4 h-4 text-text-muted\" />\n            </div>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Profile</DialogTitle>\n            </DialogHeader>\n            <ProfileEditForm user={user} onSuccess={() => setIsProfileDialogOpen(false)} />\n          </DialogContent>\n        </Dialog>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={logout}\n          className=\"w-full justify-start text-text-muted hover:text-text-dark\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </aside>\n  );\n}","size_bytes":10606},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(212 25% 16%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(212 25% 16%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(212 25% 16%);\n  --primary: hsl(208 88% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 8% 95%);\n  --secondary-foreground: hsl(212 25% 16%);\n  --muted: hsl(0 0% 97%);\n  --muted-foreground: hsl(210 8% 46%);\n  --accent: hsl(210 8% 95%);\n  --accent-foreground: hsl(208 88% 42%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 20% 90%);\n  --input: hsl(210 20% 95%);\n  --ring: hsl(208 88% 42%);\n  --chart-1: hsl(208 88% 42%);\n  --chart-2: hsl(155 100% 26%);\n  --chart-3: hsl(30 95% 54%);\n  --chart-4: hsl(147 62% 34%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(212 25% 16%);\n  --sidebar-primary: hsl(208 88% 42%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 8% 95%);\n  --sidebar-accent-foreground: hsl(208 88% 42%);\n  --sidebar-border: hsl(210 20% 90%);\n  --sidebar-ring: hsl(208 88% 42%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  \n  /* Hospital-specific colors */\n  --medical-blue: hsl(208 88% 42%);\n  --healthcare-green: hsl(155 62% 34%);\n  --alert-orange: hsl(14 95% 60%);\n  --light-gray: hsl(210 20% 98%);\n  --surface: hsl(0 0% 100%);\n  --text-dark: hsl(212 25% 16%);\n  --text-muted: hsl(210 8% 46%);\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(208 88% 52%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217 33% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 33% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 33% 17%);\n  --accent-foreground: hsl(208 88% 52%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(0 85% 97%);\n  --border: hsl(217 33% 17%);\n  --input: hsl(217 33% 17%);\n  --ring: hsl(208 88% 52%);\n  --chart-1: hsl(208 88% 52%);\n  --chart-2: hsl(155 100% 36%);\n  --chart-3: hsl(30 95% 64%);\n  --chart-4: hsl(147 62% 44%);\n  --chart-5: hsl(341 75% 61%);\n  --sidebar: hsl(222 84% 5%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(208 88% 52%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 33% 17%);\n  --sidebar-accent-foreground: hsl(208 88% 52%);\n  --sidebar-border: hsl(217 33% 17%);\n  --sidebar-ring: hsl(208 88% 52%);\n  \n  /* Hospital-specific dark colors */\n  --medical-blue: hsl(208 88% 52%);\n  --healthcare-green: hsl(155 62% 44%);\n  --alert-orange: hsl(14 95% 70%);\n  --light-gray: hsl(217 33% 12%);\n  --surface: hsl(222 84% 5%);\n  --text-dark: hsl(210 40% 98%);\n  --text-muted: hsl(215 20% 65%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .medical-blue {\n    color: var(--medical-blue);\n  }\n  \n  .bg-medical-blue {\n    background-color: var(--medical-blue);\n  }\n  \n  .healthcare-green {\n    color: var(--healthcare-green);\n  }\n  \n  .bg-healthcare-green {\n    background-color: var(--healthcare-green);\n  }\n  \n  .alert-orange {\n    color: var(--alert-orange);\n  }\n  \n  .bg-alert-orange {\n    background-color: var(--alert-orange);\n  }\n  \n  .text-medical-blue {\n    color: var(--medical-blue);\n  }\n  \n  .text-healthcare-green {\n    color: var(--healthcare-green);\n  }\n  \n  .text-alert-orange {\n    color: var(--alert-orange);\n  }\n}\n","size_bytes":3895},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/doctor-detail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Download, Stethoscope, IndianRupee, Calculator, Wallet } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport * as XLSX from \"xlsx\";\n\ninterface Doctor {\n  id: string;\n  name: string;\n  specialization: string;\n  qualification: string;\n  consultationFee: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface DoctorEarning {\n  earningId: string;\n  serviceName: string;\n  serviceCategory: string;\n  serviceDate: string;\n  earnedAmount: number;\n  status: string;\n  patientId: string;\n  servicePrice: number;\n  rateType: string;\n  rateAmount: number;\n}\n\ninterface DoctorRate {\n  id: string;\n  serviceName: string;\n  serviceCategory: string;\n  rateType: string;\n  rateAmount: number;\n  isActive: boolean;\n}\n\nexport default function DoctorDetail() {\n  const { doctorId } = useParams<{ doctorId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Fetch doctor details\n  const { data: doctor, isLoading: isDoctorLoading } = useQuery({\n    queryKey: [\"/api/doctors\", doctorId],\n    enabled: !!doctorId,\n  });\n\n  // Fetch doctor earnings - fetch all statuses to see the complete picture\n  const { data: earnings = [], isLoading: isEarningsLoading, refetch: refetchEarnings } = useQuery({\n    queryKey: [\"/api/doctors\", doctorId, \"earnings\"],\n    enabled: !!doctorId,\n  });\n\n  // Fetch doctor salary rates\n  const { data: salaryRates = [], isLoading: isRatesLoading } = useQuery({\n    queryKey: [\"/api/doctors\", doctorId, \"salary-rates\"],\n    enabled: !!doctorId,\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const exportToExcel = () => {\n    if (!doctor) return;\n\n    try {\n      // Create a new workbook\n      const workbook = XLSX.utils.book_new();\n\n      // Doctor Summary Sheet\n      const doctorSummary = [\n        [\"Doctor Details\", \"\"],\n        [\"Name\", doctor.name],\n        [\"Specialization\", doctor.specialization],\n        [\"Qualification\", doctor.qualification],\n        [\"Consultation Fee\", doctor.consultationFee],\n        [\"Status\", doctor.isActive ? \"Active\" : \"Inactive\"],\n        [\"Joined Date\", formatDate(doctor.createdAt)],\n        [\"\"],\n        [\"Earnings Summary\", \"\"],\n        [\"Total Pending Earnings\", earnings.filter((e: DoctorEarning) => e.status === 'pending').reduce((sum: number, e: DoctorEarning) => sum + e.earnedAmount, 0)],\n        [\"Total Services\", earnings.length],\n        [\"\"],\n      ];\n\n      const summarySheet = XLSX.utils.aoa_to_sheet(doctorSummary);\n      XLSX.utils.book_append_sheet(workbook, summarySheet, \"Doctor Summary\");\n\n      // Salary Rates Sheet\n      if (salaryRates.length > 0) {\n        const ratesData = [\n          [\"Service Name\", \"Category\", \"Rate Type\", \"Rate Amount\", \"Status\"],\n          ...salaryRates.map((rate: DoctorRate) => [\n            rate.serviceName,\n            rate.serviceCategory,\n            rate.rateType,\n            rate.rateAmount,\n            rate.isActive ? \"Active\" : \"Inactive\"\n          ])\n        ];\n\n        const ratesSheet = XLSX.utils.aoa_to_sheet(ratesData);\n        XLSX.utils.book_append_sheet(workbook, ratesSheet, \"Salary Rates\");\n      }\n\n      // Earnings Sheet\n      if (earnings.length > 0) {\n        const earningsData = [\n          [\"Earning ID\", \"Service Name\", \"Category\", \"Date\", \"Service Price\", \"Rate Type\", \"Rate Amount\", \"Earned Amount\", \"Status\"],\n          ...earnings.map((earning: DoctorEarning) => [\n            earning.earningId,\n            earning.serviceName,\n            earning.serviceCategory,\n            formatDate(earning.serviceDate),\n            earning.servicePrice,\n            earning.rateType,\n            earning.rateAmount,\n            earning.earnedAmount,\n            earning.status\n          ])\n        ];\n\n        const earningsSheet = XLSX.utils.aoa_to_sheet(earningsData);\n        XLSX.utils.book_append_sheet(workbook, earningsSheet, \"Earnings\");\n      }\n\n      // Export the file\n      const fileName = `${doctor.name.replace(/[^a-zA-Z0-9]/g, '_')}_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\n      XLSX.writeFile(workbook, fileName);\n\n      toast({\n        title: \"Excel Export Successful\",\n        description: `Doctor report exported as ${fileName}`,\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export doctor data to Excel\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isDoctorLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Loading...\" />\n        <div className=\"p-6 flex justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!doctor) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Doctor Not Found\" />\n        <div className=\"p-6 text-center\">\n          <p className=\"text-muted-foreground\">Doctor not found</p>\n          <Button onClick={() => setLocation(\"/doctors\")} className=\"mt-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Doctors\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Debug logging to see what we're getting\n  console.log(\"Doctor earnings data:\", earnings);\n  console.log(\"Number of earnings:\", earnings.length);\n\n  const pendingEarnings = earnings.filter((e: DoctorEarning) => e.status === 'pending');\n  console.log(\"Pending earnings:\", pendingEarnings);\n\n  const totalPendingEarnings = pendingEarnings.reduce((sum: number, e: DoctorEarning) => sum + e.earnedAmount, 0);\n  console.log(\"Total pending amount:\", totalPendingEarnings);\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title={`Dr. ${doctor.name}`} />\n\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"ghost\" onClick={() => setLocation(\"/doctors\")}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Doctors\n          </Button>\n          <Button onClick={exportToExcel} className=\"bg-green-600 hover:bg-green-700\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export to Excel\n          </Button>\n        </div>\n\n        {/* Doctor Profile Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 bg-healthcare-green rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-medium text-lg\">\n                  {doctor.name.split(' ').map((n: string) => n[0]).join('')}\n                </span>\n              </div>\n              <div>\n                <CardTitle className=\"text-2xl\">{doctor.name}</CardTitle>\n                <p className=\"text-muted-foreground text-lg\">{doctor.specialization}</p>\n                <Badge variant={doctor.isActive ? \"default\" : \"secondary\"} className=\"mt-2\">\n                  {doctor.isActive ? \"Active\" : \"Inactive\"}\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div>\n                <label className=\"text-sm text-muted-foreground\">Qualification</label>\n                <p className=\"font-medium\">{doctor.qualification}</p>\n              </div>\n              <div>\n                <label className=\"text-sm text-muted-foreground\">Consultation Fee</label>\n                <p className=\"font-medium\">{formatCurrency(doctor.consultationFee)}</p>\n              </div>\n              <div>\n                <label className=\"text-sm text-muted-foreground\">Joined Date</label>\n                <p className=\"font-medium\">{formatDate(doctor.createdAt)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <Wallet className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pending Earnings</p>\n                  <p className=\"text-xl font-semibold text-green-600\">\n                    {formatCurrency(totalPendingEarnings)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Calculator className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Services</p>\n                  <p className=\"text-xl font-semibold text-blue-600\">{earnings.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                  <IndianRupee className=\"w-5 h-5 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Salary Rates</p>\n                  <p className=\"text-xl font-semibold text-purple-600\">{salaryRates.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Detailed Information Tabs */}\n        <Tabs defaultValue=\"salary-rates\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"salary-rates\">Salary Rates</TabsTrigger>\n            <TabsTrigger value=\"earnings\">Earnings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"salary-rates\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Salary Rate Configuration</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {salaryRates.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Calculator className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No salary rates configured</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Service Name</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Rate Type</TableHead>\n                          <TableHead>Rate Amount</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {salaryRates.map((rate: DoctorRate) => {\n                          return (\n                            <TableRow key={rate.id}>\n                              <TableCell className=\"font-medium\">{rate.serviceName}</TableCell>\n                              <TableCell>\n                                <Badge variant=\"outline\">{rate.serviceCategory}</Badge>\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant=\"secondary\">\n                                  {rate.rateType === 'amount' ? 'Amount' : \n                                   rate.rateType === 'percentage' ? 'Percentage' : \n                                   rate.rateType === 'fixed_daily' ? 'Fixed Daily' : \n                                   rate.rateType}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                {rate.rateType === 'percentage' \n                                  ? `${rate.rateAmount}%` \n                                  : `₹${rate.rateAmount.toFixed(2)}`}\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={rate.isActive ? 'default' : 'secondary'}>\n                                  {rate.isActive ? 'Active' : 'Inactive'}\n                                </Badge>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"earnings\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Earnings History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {earnings.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Wallet className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No earnings recorded</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Service</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Date</TableHead>\n                          <TableHead>Service Price</TableHead>\n                          <TableHead>Rate</TableHead>\n                          <TableHead>Earned Amount</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {earnings.map((earning: DoctorEarning) => (\n                          <TableRow key={earning.earningId}>\n                            <TableCell className=\"font-medium\">{earning.serviceName}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">{earning.serviceCategory}</Badge>\n                            </TableCell>\n                            <TableCell>{formatDate(earning.serviceDate)}</TableCell>\n                            <TableCell>{formatCurrency(earning.servicePrice)}</TableCell>\n                            <TableCell>\n                              {earning.rateType === 'percentage' ? `${earning.rateAmount}%` : formatCurrency(earning.rateAmount)}\n                            </TableCell>\n                            <TableCell className=\"font-medium text-green-600\">\n                              {formatCurrency(earning.earnedAmount)}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={earning.status === 'pending' ? \"default\" : \"secondary\"}>\n                                {earning.status}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":16603},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport StatsCards from \"@/components/stats-cards\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { FakeBillDialog } from \"@/components/fake-bill-dialog\";\nimport AccessRestricted from \"@/components/access-restricted\";\nimport { insertPatientSchema, insertPathologyOrderSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { TestTubeDiagonal, Search, Check, ChevronsUpDown, Eye, UserPlus, UserX, Stethoscope, ClipboardPlus, UserMinus, UserCheck, Trash2, UserPen, IndianRupee, CircleUser, BedSingle, ClipboardX } from \"lucide-react\";\nimport { UserStarIcon } from \"@/components/ui/user-star-icon\";\n\ninterface DashboardStats {\n  opdPatients: number;\n  inpatients: number;\n  labTests: number;\n  diagnostics: number;\n}\n\ninterface Activity {\n  id: string;\n  activityType: string;\n  title: string;\n  description: string;\n  entityType: string;\n  createdAt: string;\n  userName: string;\n}\n\nexport default function Dashboard() {\n  const [isFakeBillDialogOpen, setIsFakeBillDialogOpen] = useState(false);\n  const [isNewPatientOpen, setIsNewPatientOpen] = useState(false);\n  const [isPathologyOrderOpen, setIsPathologyOrderOpen] = useState(false);\n  const [isAccessDeniedPatientOpen, setIsAccessDeniedPatientOpen] = useState(false);\n  const [isAccessDeniedLabTestOpen, setIsAccessDeniedLabTestOpen] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [selectedCatalogTests, setSelectedCatalogTests] = useState<any[]>([]);\n  const [catalogSearchQuery, setCatalogSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/stats\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n      return response.json();\n    },\n  });\n\n  const { data: recentActivities = [], isLoading: activitiesLoading } = useQuery<Activity[]>({\n    queryKey: [\"/api/dashboard/recent-activities\"],\n    staleTime: 0,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/recent-activities\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch recent activities\");\n      return response.json();\n    },\n  });\n\n  const { data: combinedTestData } = useQuery({\n    queryKey: [\"/api/pathology-tests/combined\"],\n  });\n\n  // Extract tests and categories from combined data\n  const testCatalog = combinedTestData?.categories?.flatMap(cat => \n    cat.tests?.map(test => ({\n      ...test,\n      category: cat.name\n    })) || []\n  ) || [];\n\n  const categories = combinedTestData?.categories?.map(cat => cat.name) || [];\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: doctors } = useQuery({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (patientData: any) => {\n      const response = await fetch(\"/api/patients\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(patientData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create patient\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/recent-activities\"] });\n      setIsNewPatientOpen(false);\n      form.reset({\n        name: \"\",\n        age: 0,\n        gender: \"\",\n        phone: \"\",\n        address: \"\",\n        email: \"\",\n        emergencyContact: \"\",\n      });\n      toast({\n        title: \"Patient created successfully\",\n        description: \"The patient has been registered in the system.\",\n      });\n      // Navigate to the patient's detail page\n      navigate(`/patients/${data.id}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating patient\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Sending order data:\", data);\n      const response = await fetch(\"/api/pathology\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error(\"Order creation failed:\", errorData);\n        throw new Error(`Failed to create pathology order: ${errorData}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (createdOrder) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pathology\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/recent-activities\"] });\n      setIsPathologyOrderOpen(false);\n      setSelectedCatalogTests([]);\n      pathologyForm.reset();\n      toast({\n        title: \"Order placed successfully\",\n        description: \"The pathology order has been placed.\",\n      });\n\n      // Automatically open the order details dialog\n      setSelectedOrder(createdOrder);\n    },\n    onError: (error) => {\n      console.error(\"Order mutation error:\", error);\n      toast({\n        title: \"Error placing order\",\n        description: `Please try again. ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertPatientSchema),\n    defaultValues: {\n      name: \"\",\n      age: undefined,\n      gender: \"\",\n      phone: \"\",\n      address: \"\",\n      email: \"\",\n      emergencyContact: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  const pathologyForm = useForm({\n    resolver: zodResolver(insertPathologyOrderSchema),\n    defaultValues: {\n      patientId: \"\",\n      doctorId: \"\",\n      orderedDate: (() => {\n        // Use local timezone for pathology order date\n        const now = new Date();\n        return now.getFullYear() + '-' + \n          String(now.getMonth() + 1).padStart(2, '0') + '-' + \n          String(now.getDate()).padStart(2, '0');\n      })(),\n      remarks: \"\",\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n\n    // Validate required fields explicitly\n    if (!data.name?.trim()) {\n      form.setError(\"name\", { message: \"Name is required\" });\n      return;\n    }\n    if (!data.age || data.age <= 0) {\n      form.setError(\"age\", { message: \"Valid age is required\" });\n      return;\n    }\n    if (!data.gender?.trim()) {\n      form.setError(\"gender\", { message: \"Gender is required\" });\n      return;\n    }\n    if (!data.phone?.trim()) {\n      form.setError(\"phone\", { message: \"Phone number is required\" });\n      return;\n    }\n\n    createPatientMutation.mutate(data);\n  };\n\n  const onPathologySubmit = (data: any) => {\n    if (selectedCatalogTests.length === 0) {\n      toast({\n        title: \"No tests selected\",\n        description: \"Please select at least one test from the catalog.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create single order with multiple tests\n    const orderData = {\n      patientId: data.patientId,\n      doctorId: data.doctorId === \"external\" || data.doctorId === \"\" ? null : data.doctorId, // Make doctor optional\n      orderedDate: data.orderedDate,\n      remarks: data.remarks,\n    };\n\n    const tests = selectedCatalogTests.map(test => ({\n      testName: test.test_name,\n      testCategory: test.category,\n      price: test.price,\n    }));\n\n    createOrderMutation.mutate({ orderData, tests });\n  };\n\n  // Patient Search Combobox Component for pathology\n  function PatientSearchCombobox({ value, onValueChange, patients }: {\n    value: string;\n    onValueChange: (value: string) => void;\n    patients: any[];\n  }) {\n    const [open, setOpen] = useState(false);\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const filteredPatients = (patients || []).filter((patient: any) => {\n      if (!searchValue.trim()) return true; // Show all patients when no search\n      const searchLower = searchValue.toLowerCase().trim();\n      return (\n        patient.name?.toLowerCase().includes(searchLower) ||\n        patient.patientId?.toLowerCase().includes(searchLower) ||\n        patient.phone?.includes(searchValue.trim()) ||\n        patient.email?.toLowerCase().includes(searchLower)\n      );\n    });\n\n    const selectedPatient = patients?.find((patient: any) => patient.id === value);\n\n    const formatPatientDisplay = (patient: any) => {\n      return `${patient.name}, ${patient.age} ${patient.gender} (${patient.patientId})`;\n    };\n\n    return (\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-full justify-between text-left font-normal\"\n          >\n            {selectedPatient ? formatPatientDisplay(selectedPatient) : \"Search and select patient...\"}\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-full p-0\" style={{ width: \"var(--radix-popover-trigger-width)\" }}>\n          <Command shouldFilter={false}>\n            <CommandInput \n              placeholder=\"Type to search patients...\" \n              value={searchValue}\n              onValueChange={setSearchValue}\n            />\n            <CommandList className=\"max-h-[300px] overflow-y-auto\">\n              <CommandEmpty>No patients found.</CommandEmpty>\n              <CommandGroup>\n                {filteredPatients.map((patient: any) => (\n                  <CommandItem\n                    key={patient.id}\n                    value={patient.name}\n                    onSelect={() => {\n                      onValueChange(patient.id);\n                      setOpen(false);\n                      setSearchValue(\"\");\n                    }}\n                    className=\"cursor-pointer\"\n                  >\n                    <Check\n                      className={`mr-2 h-4 w-4 ${\n                        value === patient.id ? \"opacity-100\" : \"opacity-0\"\n                      }`}\n                    />\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{patient.name}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {patient.age} years, {patient.gender} • {patient.patientId}\n                      </span>\n                    </div>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n\n  // Order Details Dialog Component\n  function OrderDetailsDialog({ order, onClose }: { order: any, onClose: () => void }) {\n    const { data: orderDetails } = useQuery({\n      queryKey: [\"/api/pathology\", order.id],\n      queryFn: async () => {\n        const response = await fetch(`/api/pathology/${order.id}`, {\n          headers: {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch order details\");\n        return response.json();\n      },\n    });\n\n    const getStatusColor = (status: string) => {\n      switch (status) {\n        case 'completed':\n          return 'bg-green-100 text-green-800';\n        case 'processing':\n          return 'bg-blue-100 text-blue-800';\n        case 'collected':\n          return 'bg-yellow-100 text-yellow-800';\n        case 'ordered':\n          return 'bg-orange-100 text-orange-800';\n        default:\n          return 'bg-gray-100 text-gray-800';\n      }\n    };\n\n    const formatDate = (dateString: string) => {\n      if (!dateString) return \"N/A\";\n      return new Date(dateString).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      });\n    };\n\n    return (\n      <Dialog open={true} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle>Order Details - {order.orderId}</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"max-h-[calc(90vh-120px)] overflow-y-auto\">\n            <div className=\"space-y-4 px-6 pb-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Patient</Label>\n                  <p className=\"text-sm text-muted-foreground\">{orderDetails?.patient?.name || \"Unknown Patient\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Doctor</Label>\n                  <p className=\"text-sm text-muted-foreground\">{orderDetails?.doctor?.name || \"External Patient\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                    {order.status}\n                  </Badge>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Date Ordered</Label>\n                  <p className=\"text-sm text-muted-foreground\">{formatDate(order.orderedDate)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Total Price</Label>\n                  <p className=\"text-sm text-muted-foreground\">₹{order.totalPrice}</p>\n                </div>\n              </div>\n              {order.remarks && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Remarks</Label>\n                  <p className=\"text-sm text-muted-foreground\">{order.remarks}</p>\n                </div>\n              )}\n\n              <div className=\"mt-6\">\n                <Label className=\"text-sm font-medium\">Tests in this Order ({orderDetails?.tests?.length || 0} tests)</Label>\n                <div className=\"mt-2 border rounded-lg max-h-[300px] overflow-y-auto\">\n                  <Table>\n                    <TableHeader className=\"sticky top-0 bg-background z-10\">\n                      <TableRow>\n                        <TableHead className=\"bg-background\">Test Name</TableHead>\n                        <TableHead className=\"bg-background\">Category</TableHead>\n                        <TableHead className=\"bg-background\">Status</TableHead>\n                        <TableHead className=\"bg-background\">Price (₹)</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {orderDetails?.tests ? (\n                        orderDetails.tests.map((test: any, index: number) => (\n                          <TableRow key={test.id} className={index % 2 === 0 ? \"bg-gray-50/50\" : \"\"}>\n                            <TableCell className=\"font-medium\">{test.testName}</TableCell>\n                            <TableCell>{test.testCategory}</TableCell>\n                            <TableCell>\n                              <Badge className={getStatusColor(test.status)} variant=\"secondary\">\n                                {test.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>₹{test.price}</TableCell>\n                          </TableRow>\n                        ))\n                      ) : (\n                        <TableRow>\n                          <TableCell colSpan={4} className=\"text-center text-muted-foreground py-8\">\n                            Loading test details...\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const toggleTestSelection = (test: any) => {\n    const isSelected = selectedCatalogTests.some(t => t.test_name === test.test_name);\n    if (isSelected) {\n      setSelectedCatalogTests(prev => prev.filter(t => t.test_name !== test.test_name));\n    } else {\n      setSelectedCatalogTests(prev => [...prev, test]);\n    }\n  };\n\n  const getTotalPrice = () => {\n    return selectedCatalogTests.reduce((total, test) => total + test.price, 0);\n  };\n\n  const filteredCatalog = (testCatalog || []).filter((test: any) => {\n    const matchesCategory = selectedCategory === \"all\" || test.category === selectedCategory;\n    const matchesSearch = test.test_name?.toLowerCase().includes(catalogSearchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar \n          title=\"Dashboard & Reports\"\n          showNotifications={true}\n          notificationCount={3}\n        />\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-20 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Dashboard & Reports\"\n        showNotifications={true}\n        notificationCount={3}\n      />\n\n      <div className=\"p-6 space-y-6\">\n        <StatsCards stats={stats || { opdPatients: 0, inpatients: 0, labTests: 0, diagnostics: 0 }} />\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {activitiesLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                      <Skeleton className=\"w-8 h-8 rounded-full\" />\n                      <div className=\"flex-1 space-y-1\">\n                        <Skeleton className=\"h-4 w-full\" />\n                        <Skeleton className=\"h-3 w-2/3\" />\n                      </div>\n                      <Skeleton className=\"h-3 w-16\" />\n                    </div>\n                  ))}\n                </div>\n              ) : recentActivities.length === 0 ? (\n                <div className=\"text-center py-4 text-muted-foreground\">\n                  <p>No recent activities</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {recentActivities.map((activity) => {\n                    const getActivityIcon = (type: string) => {\n                      switch (type) {\n                        case 'bill_created':\n                          return { icon: 'B', color: 'bg-medical-blue' };\n                        case 'patient_registered':\n                          return { icon: 'patient_registered', color: 'bg-blue-700' };\n                        case 'lab_test_ordered':\n                          return { icon: 'lab_ordered', color: 'bg-pink-500' };\n                        case 'lab_test_completed':\n                          return { icon: 'T', color: 'bg-orange-500' };\n                        case 'opd_scheduled':\n                          return { icon: 'opd', color: 'bg-blue-500' };\n                        case 'service_scheduled':\n                          return { icon: 'service_scheduled', color: 'bg-purple-500' };\n                        case 'user_created':\n                          return { icon: 'U', color: 'bg-green-500' }; // Updated to green\n                        case 'user_updated':\n                          return { icon: 'user_updated', color: 'bg-amber-700' };\n                        case 'user_deleted':\n                          return { icon: 'X', color: 'bg-red-500' };\n                        case 'payment_added':\n                          return { icon: 'payment_added', color: 'bg-green-700' };\n                        case 'discount_added':\n                          return { icon: 'discount_added', color: 'bg-red-700' };\n                        case 'doctor_created':\n                          return { icon: 'doctor_created', color: 'bg-green-800' };\n                        case 'doctor_deleted':\n                        case 'doctor_deactivated':\n                          return { icon: 'doctor_deactivated', color: 'bg-red-500' };\n                        case 'doctor_restored':\n                          return { icon: 'doctor_restored', color: 'bg-green-700' };\n                        case 'doctor_permanently_deleted':\n                          return { icon: 'doctor_permanently_deleted', color: 'bg-red-700' };\n                        case 'patient_admitted':\n                          return { icon: 'patient_admitted', color: 'bg-green-700' };\n                        case 'patient_discharged':\n                          return { icon: 'patient_discharged', color: 'bg-red-700' };\n                        case 'room_type_created':\n                        case 'room_type_updated':\n                        case 'room_type_deleted':\n                          return { icon: 'RT', color: 'bg-green-500' };\n                        case 'room_created':\n                        case 'room_updated':\n                        case 'room_deleted':\n                          return { icon: 'R', color: 'bg-teal-500' };\n                        case 'service_created':\n                        case 'service_updated':\n                        case 'service_deleted':\n                          return { icon: 'SV', color: 'bg-pink-500' };\n                        default:\n                          return { icon: 'A', color: 'bg-gray-500' };\n                      }\n                    };\n\n                    const formatTimeAgo = (dateString: string) => {\n                      const now = new Date();\n                      const date = new Date(dateString);\n                      const diffInMs = now.getTime() - date.getTime();\n                      const diffInMins = Math.floor(diffInMs / (1000 * 60));\n                      const diffInHours = Math.floor(diffInMins / 60);\n                      const diffInDays = Math.floor(diffInHours / 24);\n\n                      if (diffInDays > 0) return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;\n                      if (diffInHours > 0) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;\n                      if (diffInMins > 0) return `${diffInMins} min${diffInMins > 1 ? 's' : ''} ago`;\n                      return 'Just now';\n                    };\n\n                    const { icon, color } = getActivityIcon(activity.activityType);\n\n                    return (\n                      <div key={activity.id} className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                        {activity.activityType === 'user_created' && (\n                          <div className=\"w-8 h-8 rounded-full bg-green-200 flex items-center justify-center\">\n                            <UserPlus className=\"w-5 h-5 text-green-700\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'user_deleted' && (\n                          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center\">\n                            <UserX className=\"w-5 h-5 text-red-600\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'opd_scheduled' && (\n                          <div className=\"w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center\">\n                            <Stethoscope className=\"w-5 h-5 text-blue-600\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'lab_test_ordered' && (\n                          <div className=\"w-8 h-8 rounded-full bg-pink-100 flex items-center justify-center\">\n                            <TestTubeDiagonal className=\"w-5 h-5 text-pink-600\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'service_scheduled' && (\n                          <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center\">\n                            <ClipboardPlus className=\"w-5 h-5 text-purple-600\" />\n                          </div>\n                        )}\n                        {(activity.activityType === 'doctor_deleted' || activity.activityType === 'doctor_deactivated') && (\n                          <div className=\"w-8 h-8 rounded-full bg-orange-100 flex items-center justify-center\">\n                            <UserMinus className=\"w-5 h-5 text-orange-600\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'doctor_restored' && (\n                          <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center\">\n                            <UserCheck className=\"w-5 h-5 text-green-600\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'doctor_created' && (\n                          <div className=\"w-8 h-8 rounded-full bg-green-200 flex items-center justify-center\">\n                            <UserStarIcon className=\"w-5 h-5 text-green-800\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'doctor_permanently_deleted' && (\n                          <div className=\"w-8 h-8 rounded-full bg-red-200 flex items-center justify-center\">\n                            <Trash2 className=\"w-5 h-5 text-red-700\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'user_updated' && (\n                          <div className=\"w-8 h-8 rounded-full bg-amber-100 flex items-center justify-center\">\n                            <UserPen className=\"w-5 h-5 text-amber-700\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'payment_added' && (\n                          <div className=\"w-8 h-8 rounded-full bg-green-200 flex items-center justify-center\">\n                            <IndianRupee className=\"w-5 h-5 text-green-800\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'discount_added' && (\n                          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center\">\n                            <IndianRupee className=\"w-5 h-5 text-red-700\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'patient_registered' && (\n                          <div className=\"w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center\">\n                            <CircleUser className=\"w-5 h-5 text-blue-700\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'patient_admitted' && (\n                          <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center\">\n                            <BedSingle className=\"w-5 h-5 text-green-700\" />\n                          </div>\n                        )}\n                        {activity.activityType === 'patient_discharged' && (\n                          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center\">\n                            <ClipboardX className=\"w-5 h-5 text-red-700\" />\n                          </div>\n                        )}\n                        {activity.activityType !== 'user_created' && activity.activityType !== 'user_updated' && activity.activityType !== 'user_deleted' && activity.activityType !== 'opd_scheduled' && activity.activityType !== 'lab_test_ordered' && activity.activityType !== 'service_scheduled' && activity.activityType !== 'doctor_deleted' && activity.activityType !== 'doctor_deactivated' && activity.activityType !== 'doctor_restored' && activity.activityType !== 'doctor_created' && activity.activityType !== 'doctor_permanently_deleted' && activity.activityType !== 'payment_added' && activity.activityType !== 'discount_added' && activity.activityType !== 'patient_registered' && activity.activityType !== 'patient_admitted' && activity.activityType !== 'patient_discharged' && (\n                          <div className={`w-8 h-8 ${color} rounded-full flex items-center justify-center`}>\n                            <span className=\"text-white text-xs\">{icon}</span>\n                          </div>\n                        )}\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">{activity.title}</p>\n                          <p className=\"text-xs text-text-muted\">{activity.description}</p>\n                        </div>\n                        <p className=\"text-xs text-text-muted\">{formatTimeAgo(activity.createdAt)}</p>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <button \n                  onClick={() => setIsFakeBillDialogOpen(true)}\n                  className=\"p-4 bg-medical-blue text-white rounded-lg hover:bg-medical-blue/90 transition-colors\" \n                  data-testid=\"quick-new-bill\"\n                >\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">New Bill</div>\n                    <div className=\"text-sm opacity-90\">Create invoice</div>\n                  </div>\n                </button>\n\n                <button \n                  onClick={() => {\n                    const userRoles = user?.roles || [user?.role];\n                    const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n                    if (isBillingStaff) {\n                      setIsAccessDeniedPatientOpen(true);\n                    } else {\n                      setIsNewPatientOpen(true);\n                    }\n                  }}\n                  className=\"p-4 bg-healthcare-green text-white rounded-lg hover:bg-healthcare-green/90 transition-colors\" \n                  data-testid=\"quick-new-patient\"\n                >\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">Add Patient</div>\n                    <div className=\"text-sm opacity-90\">Register new</div>\n                  </div>\n                </button>\n\n                <button \n                  onClick={() => {\n                    const userRoles = user?.roles || [user?.role];\n                    const isBillingStaff = userRoles.includes('billing_staff') && !userRoles.includes('admin') && !userRoles.includes('super_user');\n\n                    if (isBillingStaff) {\n                      setIsAccessDeniedLabTestOpen(true);\n                    } else {\n                      setIsPathologyOrderOpen(true);\n                    }\n                  }}\n                  className=\"p-4 bg-purple-500 text-white rounded-lg hover:bg-purple-500/90 transition-colors\" \n                  data-testid=\"quick-new-test\"\n                >\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">Lab Test</div>\n                    <div className=\"text-sm opacity-90\">Order test</div>\n                  </div>\n                </button>\n\n                <button \n                  onClick={() => navigate(\"/pending-bills\")}\n                  className=\"p-4 bg-alert-orange text-white rounded-lg hover:bg-alert-orange/90 transition-colors\" \n                  data-testid=\"quick-view-pending\"\n                >\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">Pending</div>\n                    <div className=\"text-sm opacity-90\">View bills</div>\n                  </div>\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Fake Bill Dialog */}\n      <FakeBillDialog \n        isOpen={isFakeBillDialogOpen}\n        onClose={() => setIsFakeBillDialogOpen(false)}\n      />\n\n      {/* New Patient Dialog */}\n      <Dialog open={isNewPatientOpen} onOpenChange={setIsNewPatientOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-patient-dialog\">\n          <DialogHeader>\n            <DialogTitle>Register New Patient</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"Enter patient's full name\"\n                  data-testid=\"input-patient-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"age\">Age *</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  {...form.register(\"age\", { valueAsNumber: true })}\n                  placeholder=\"Enter age\"\n                  data-testid=\"input-patient-age\"\n                />\n                {form.formState.errors.age && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.age.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">Gender *</Label>\n                <Select \n                  value={form.watch(\"gender\")}\n                  onValueChange={(value) => form.setValue(\"gender\", value, { shouldValidate: true })}\n                >\n                  <SelectTrigger data-testid=\"select-patient-gender\">\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.gender && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.gender.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+91 XXXXX XXXXX\"\n                  data-testid=\"input-patient-phone\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                placeholder=\"patient@example.com\"\n                data-testid=\"input-patient-email\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                {...form.register(\"address\")}\n                placeholder=\"Enter complete address\"\n                rows={3}\n                data-testid=\"input-patient-address\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n              <Input\n                id=\"emergencyContact\"\n                {...form.register(\"emergencyContact\")}\n                placeholder=\"+91 XXXXX XXXXX\"\n                data-testid=\"input-patient-emergency\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewPatientOpen(false)}\n                data-testid=\"button-cancel-patient\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createPatientMutation.isPending || !form.formState.isValid}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-patient\"\n              >\n                {createPatientMutation.isPending ? \"Saving...\" : \"Register Patient\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Order Pathology Tests Dialog */}\n      <Dialog open={isPathologyOrderOpen} onOpenChange={setIsPathologyOrderOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Order Pathology Tests</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={pathologyForm.handleSubmit(onPathologySubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"patientId\">Patient *</Label>\n                <PatientSearchCombobox\n                  value={pathologyForm.watch(\"patientId\")}\n                  onValueChange={(value) => pathologyForm.setValue(\"patientId\", value)}\n                  patients={patients || []}\n                />\n                {pathologyForm.formState.errors.patientId && (\n                  <p className=\"text-sm text-red-500\">{pathologyForm.formState.errors.patientId.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"doctorId\">Doctor (Optional for External Patients)</Label>\n                <Select \n                  onValueChange={(value) => pathologyForm.setValue(\"doctorId\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select doctor (optional)\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"external\">External Patient (No Doctor)</SelectItem>\n                    {(doctors || []).map((doctor: any) => (\n                      <SelectItem key={doctor.id} value={doctor.id}>\n                        {doctor.name} - {doctor.specialization}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Select Tests from Catalog</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {(categories || []).map((category: string) => (\n                        <SelectItem key={category} value={category}>{category}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search tests by name...\"\n                      value={catalogSearchQuery}\n                      onChange={(e) => setCatalogSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg max-h-64 overflow-y-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">Select</TableHead>\n                      <TableHead>Test Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Price (₹)</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredCatalog.map((test: any, index: number) => {\n                      const isSelected = selectedCatalogTests.some(t => t.test_name === test.test_name);\n                      return (\n                        <TableRow \n                          key={`${test.category}-${test.test_name}-${index}`}\n                          className={isSelected ? \"bg-blue-50\" : \"\"}\n                        >\n                          <TableCell>\n                            <input\n                              type=\"checkbox\"\n                              checked={isSelected}\n                              onChange={() => toggleTestSelection(test)}\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            />\n                          </TableCell>\n                          <TableCell className=\"font-medium\">{test.test_name}</TableCell>\n                          <TableCell>{test.category}</TableCell>\n                          <TableCell>₹{test.price}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {selectedCatalogTests.length > 0 && (\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Selected Tests ({selectedCatalogTests.length})</h4>\n                  <div className=\"space-y-1\">\n                    {selectedCatalogTests.map((test, index) => (\n                      <div key={index} className=\"flex justify-between text-sm\">\n                        <span>{test.test_name}</span>\n                        <span>₹{test.price}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"border-t border-blue-200 mt-2 pt-2 font-medium text-blue-900\">\n                    Total: ₹{getTotalPrice()}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"remarks\">Remarks</Label>\n              <Textarea\n                {...pathologyForm.register(\"remarks\")}\n                placeholder=\"Enter any additional remarks or instructions\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsPathologyOrderOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createOrderMutation.isPending || selectedCatalogTests.length === 0}\n              >\n                {createOrderMutation.isPending ? \"Ordering...\" : `Order ${selectedCatalogTests.length} Test(s)`}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Order Details Dialog */}\n      {selectedOrder && (\n        <OrderDetailsDialog \n          order={selectedOrder} \n          onClose={() => {\n            setSelectedOrder(null);\n            // No redirect needed since we're already on dashboard\n          }} \n        />\n      )}\n\n      {/* Access Denied Dialogs for Billing Staff */}\n      <Dialog open={isAccessDeniedPatientOpen} onOpenChange={setIsAccessDeniedPatientOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Access Restricted</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4\">\n            <AccessRestricted \n              title=\"Patient Registration Restricted\"\n              description=\"Only administrators and super users can register new patients.\"\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isAccessDeniedLabTestOpen} onOpenChange={setIsAccessDeniedLabTestOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Access Restricted</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4\">\n            <AccessRestricted \n              title=\"Lab Test Ordering Restricted\"\n              description=\"Only administrators and super users can order lab tests.\"\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":48045},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-none border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1058},"client/src/pages/services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Building2,\n  Plus,\n  Edit,\n  Trash2,\n  Bed,\n  Home,\n  Activity,\n  AlertTriangle,\n  Heart,\n  Stethoscope,\n  Syringe,\n  Scissors,\n  Settings,\n  Shield\n} from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { RoomType, Room, Service, PathologyCategory, DynamicPathologyTest, ServiceCategory } from \"@shared/schema\";\nimport AccessRestricted from \"@/components/access-restricted\";\n\nexport default function ServiceManagement() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Tab management state\n  const [activeTab, setActiveTab] = useState(\"rooms\");\n\n  const userRoles = user?.roles || [user?.role]; // Backward compatibility\n  const hasAccess = userRoles.includes('admin') || userRoles.includes('super_user');\n\n  if (!hasAccess) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Service Management\" />\n        <div className=\"p-6\">\n          <AccessRestricted \n            title=\"Access Restricted\"\n            description=\"Only administrators and super users can access service management.\"\n          />\n        </div>\n      </div>\n    );\n  }\n  const [roomsSubTab, setRoomsSubTab] = useState(\"room-types\");\n  const [selectedRoomTypeId, setSelectedRoomTypeId] = useState<string>(\"\");\n  const [isRoomTypeDialogOpen, setIsRoomTypeDialogOpen] = useState(false);\n  const [isRoomDialogOpen, setIsRoomDialogOpen] = useState(false);\n  const [isServiceDialogOpen, setIsServiceDialogOpen] = useState(false);\n  const [editingRoomType, setEditingRoomType] = useState<RoomType | null>(null);\n  const [editingRoom, setEditingRoom] = useState<Room | null>(null);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [serviceDoctors, setServiceDoctors] = useState<{id: string, share: number}[]>([]);\n\n  // Pathology states\n  const [pathologySubTab, setPathologySubTab] = useState(\"categories\");\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>(\"\");\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [isTestDialogOpen, setIsTestDialogOpen] = useState(false);\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<PathologyCategory | null>(null);\n  const [editingTest, setEditingTest] = useState<DynamicPathologyTest | null>(null);\n  const [uploadData, setUploadData] = useState<string>(\"\");\n\n  // Service Category states\n  const [isServiceCategoryDialogOpen, setIsServiceCategoryDialogOpen] = useState(false);\n  const [editingServiceCategory, setEditingServiceCategory] = useState<ServiceCategory | null>(null);\n\n  const token = localStorage.getItem(\"hospital_token\");\n\n  // Fetch room types\n  const { data: roomTypes = [], refetch: refetchRoomTypes } = useQuery<RoomType[]>({\n    queryKey: [\"/api/room-types\"],\n  });\n\n  // Fetch rooms\n  const { data: rooms = [], refetch: refetchRooms } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  // Fetch services\n  const { data: services = [], refetch: refetchServices } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  // Fetch doctors for service assignment and display\n  const { data: doctors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Fetch patient services to display in history\n  const { data: patientServices = [] } = useQuery<any[]>({\n    queryKey: [\"/api/patient-services\"],\n  });\n\n  // Fetch pathology categories\n  const { data: pathologyCategories = [], refetch: refetchCategories } = useQuery<PathologyCategory[]>({\n    queryKey: [\"/api/pathology-categories\"],\n  });\n\n  // Fetch dynamic pathology tests\n  const { data: dynamicPathologyTests = [], refetch: refetchTests } = useQuery<DynamicPathologyTest[]>({\n    queryKey: [\"/api/dynamic-pathology-tests\"],\n  });\n\n  // Fetch combined pathology data (hardcoded + dynamic)\n  const { data: combinedPathologyData, isLoading: combinedLoading, refetch: refetchCombined } = useQuery({\n    queryKey: [\"/api/pathology-tests/combined\"],\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  // Fetch service categories\n  const { data: customServiceCategories = [], refetch: refetchServiceCategories } = useQuery<ServiceCategory[]>({\n    queryKey: [\"/api/service-categories\"],\n  });\n\n  const roomTypeForm = useForm({\n    defaultValues: {\n      name: \"\",\n      category: \"\",\n      dailyCost: 0,\n      isActive: true,\n    },\n  });\n\n  const roomForm = useForm({\n    defaultValues: {\n      roomNumber: \"\",\n      roomTypeId: \"\",\n      floor: \"\",\n      building: \"\",\n      capacity: 1,\n      isOccupied: false,\n      isActive: true,\n      notes: \"\",\n    },\n  });\n\n  const serviceForm = useForm({\n    defaultValues: {\n      name: \"\",\n      category: \"\",\n      price: 0,\n      description: \"\",\n      isActive: true,\n      doctors: [],\n      billingType: \"per_instance\", // Default billing type\n      billingParameters: null, // For composite billing\n    },\n  });\n\n  const categoryForm = useForm({\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  const testForm = useForm({\n    defaultValues: {\n      categoryId: \"\",\n      testName: \"\",\n      price: 0,\n      normalRange: \"\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  const serviceCategoryForm = useForm({\n    defaultValues: {\n      name: \"\",\n      label: \"\",\n      description: \"\",\n      icon: \"Settings\",\n      isActive: true,\n    },\n  });\n\n  const createRoomTypeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const isEditing = editingRoomType !== null;\n      const url = isEditing ? `/api/room-types/${editingRoomType.id}` : \"/api/room-types\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to ${isEditing ? 'update' : 'create'} room type: ${errorText}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      setIsRoomTypeDialogOpen(false);\n      roomTypeForm.reset();\n      const wasEditing = editingRoomType !== null;\n      setEditingRoomType(null);\n      toast({\n        title: \"Success\",\n        description: `Room type ${wasEditing ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save room type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createRoomMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/rooms\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create room\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      setIsRoomDialogOpen(false);\n      roomForm.reset();\n      setEditingRoom(null);\n      toast({\n        title: \"Success\",\n        description: \"Room saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save room\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const isEditing = editingService !== null;\n      const url = isEditing ? `/api/services/${editingService.id}` : \"/api/services\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to ${isEditing ? 'update' : 'create'} service: ${errorText}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setIsServiceDialogOpen(false);\n      serviceForm.reset();\n      const wasEditing = editingService !== null;\n      setEditingService(null);\n      setServiceDoctors([]);\n      toast({\n        title: \"Success\",\n        description: `Service ${wasEditing ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Service creation/update error:\", error);\n      let errorMessage = \"Failed to save service\";\n      if (error.message) {\n        errorMessage = error.message;\n      }\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (serviceId: string) => {\n      const response = await fetch(`/api/services/${serviceId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete service\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRoomTypeMutation = useMutation({\n    mutationFn: async (roomTypeId: string) => {\n      const response = await fetch(`/api/room-types/${roomTypeId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to delete room type: ${errorText}`);\n      }\n      // For 204 responses, there might not be JSON content\n      if (response.status === 204) {\n        return { success: true };\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      toast({\n        title: \"Success\",\n        description: \"Room type deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete room type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRoomMutation = useMutation({\n    mutationFn: async (roomId: string) => {\n      const response = await fetch(`/api/rooms/${roomId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to delete room: ${errorText}`);\n      }\n      // For 204 responses, there might not be JSON content\n      if (response.status === 204) {\n        return { success: true };\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      toast({\n        title: \"Success\",\n        description: \"Room deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete room\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createServiceCategoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const isEditing = editingServiceCategory !== null;\n      const url = isEditing ? `/api/service-categories/${editingServiceCategory.id}` : \"/api/service-categories\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to ${isEditing ? 'update' : 'create'} service category: ${errorText}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-categories\"] });\n      setIsServiceCategoryDialogOpen(false);\n      serviceCategoryForm.reset();\n      const wasEditing = editingServiceCategory !== null;\n      setEditingServiceCategory(null);\n      toast({\n        title: \"Success\",\n        description: `Service category ${wasEditing ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save service category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceCategoryMutation = useMutation({\n    mutationFn: async (categoryId: string) => {\n      const response = await fetch(`/api/service-categories/${categoryId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: \"Failed to delete service category\" }));\n        throw new Error(errorData.message || \"Failed to delete service category\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service category deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cannot Delete Category\",\n        description: error.message || \"Failed to delete service category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const deleteCategory = async (categoryId: string) => {\n    try {\n      const response = await fetch(`/api/pathology-categories/${categoryId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to delete category');\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully\",\n      });\n\n      // Refresh data\n      refetchCombined();\n      refetchCategories();\n      refetchTests();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTest = async (test: any, categoryName: string) => {\n    try {\n      let response;\n\n      // Check if it's a system test (from JSON file) or custom test (from database)\n      // System tests don't have an id or have an id that starts with 'system-'\n      const isSystemTest = !test.id || test.id.toString().startsWith('system-') || typeof test.id === 'string' && test.id.includes('system');\n\n      if (isSystemTest) {\n        // Delete from system (JSON file)\n        const testName = test.test_name || test.testName || test.name;\n        response = await fetch(`/api/pathology-tests/system/${encodeURIComponent(categoryName)}/${encodeURIComponent(testName)}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n      } else {\n        // Delete custom test from database\n        response = await fetch(`/api/dynamic-pathology-tests/${test.id}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to delete test');\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Test deleted successfully\",\n      });\n\n      // Refresh data\n      refetchCombined();\n      refetchTests();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete test\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onRoomTypeSubmit = (data: any) => {\n    createRoomTypeMutation.mutate(data);\n  };\n\n  const onRoomSubmit = (data: any) => {\n    createRoomMutation.mutate(data);\n  };\n\n  const onServiceSubmit = (data: any) => {\n    // For non-rooms services, allow price to be 0 if not provided\n    const serviceData = {\n      name: data.name,\n      category: activeTab,\n      price: activeTab !== 'rooms' && (!data.price || data.price === '') ? 0 : Number(data.price) || 0,\n      description: data.description || '',\n      isActive: data.isActive !== undefined ? data.isActive : true,\n      billingType: data.billingType || 'per_instance',\n      billingParameters: data.billingParameters || null\n    };\n    console.log('Submitting service data:', serviceData);\n    createServiceMutation.mutate(serviceData);\n  };\n\n  const openRoomTypeDialog = (roomType?: RoomType) => {\n    if (roomType) {\n      setEditingRoomType(roomType);\n      roomTypeForm.reset({\n        name: roomType.name,\n        category: roomType.category,\n        dailyCost: roomType.dailyCost,\n        isActive: roomType.isActive,\n      });\n    } else {\n      setEditingRoomType(null);\n      roomTypeForm.reset();\n    }\n    setIsRoomTypeDialogOpen(true);\n  };\n\n  const openRoomDialog = (room?: Room) => {\n    if (room) {\n      setEditingRoom(room);\n      roomForm.reset({\n        roomNumber: room.roomNumber,\n        roomTypeId: room.roomTypeId,\n        floor: room.floor || \"\",\n        building: room.building || \"\",\n        capacity: room.capacity,\n        isOccupied: room.isOccupied,\n        isActive: room.isActive,\n        notes: room.notes || \"\",\n      });\n    } else {\n      setEditingRoom(null);\n      roomForm.reset({\n        roomNumber: \"\",\n        roomTypeId: selectedRoomTypeId || \"\",\n        floor: \"\",\n        building: \"\",\n        capacity: 1,\n        isOccupied: false,\n        isActive: true,\n        notes: \"\",\n      });\n    }\n    setIsRoomDialogOpen(true);\n  };\n\n  const openServiceDialog = (service?: Service) => {\n    if (service) {\n      setEditingService(service);\n      serviceForm.reset({\n        name: service.name,\n        category: service.category,\n        price: service.price,\n        description: service.description || \"\",\n        isActive: service.isActive,\n        doctors: [], // Reset doctors when editing\n        billingType: service.billingType || \"per_instance\",\n        billingParameters: service.billingParameters || null,\n      });\n      // Reset doctors when editing (service.doctors doesn't exist in schema)\n      setServiceDoctors([]);\n    } else {\n      setEditingService(null);\n      serviceForm.reset({\n        name: \"\",\n        category: activeTab,\n        price: 0,\n        description: \"\",\n        isActive: true,\n        doctors: [],\n        billingType: \"per_instance\",\n        billingParameters: null,\n      });\n      setServiceDoctors([]);\n    }\n    setIsServiceDialogOpen(true);\n  };\n\n  const addDoctorToService = () => {\n    setServiceDoctors(prev => [...prev, { id: \"\", share: 0 }]);\n  };\n\n  const removeDoctorFromService = (index: number) => {\n    setServiceDoctors(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateDoctorShare = (index: number, field: \"id\" | \"share\", value: string | number) => {\n    setServiceDoctors(prev => prev.map((doctor, i) =>\n      i === index ? { ...doctor, [field]: value } : doctor\n    ));\n  };\n\n  const openServiceCategoryDialog = (category?: ServiceCategory) => {\n    if (category) {\n      setEditingServiceCategory(category);\n      serviceCategoryForm.reset({\n        name: category.name,\n        label: category.label,\n        description: category.description || \"\",\n        icon: category.icon,\n        isActive: category.isActive,\n      });\n    } else {\n      setEditingServiceCategory(null);\n      serviceCategoryForm.reset();\n    }\n    setIsServiceCategoryDialogOpen(true);\n  };\n\n  const onServiceCategorySubmit = (data: any) => {\n    createServiceCategoryMutation.mutate(data);\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'ward':\n        return <Home className=\"h-4 w-4\" />;\n      case 'icu':\n        return <Activity className=\"h-4 w-4\" />;\n      case 'emergency':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'ot':\n        return <Building2 className=\"h-4 w-4\" />;\n      case 'room':\n        return <Bed className=\"h-4 w-4\" />;\n      default:\n        return <Bed className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'ward':\n        return 'bg-blue-100 text-blue-800';\n      case 'icu':\n        return 'bg-red-100 text-red-800';\n      case 'emergency':\n        return 'bg-orange-100 text-orange-800';\n      case 'ot':\n        return 'bg-purple-100 text-purple-800';\n      case 'room':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getServiceCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'admissions':\n        return <Bed className=\"h-4 w-4\" />;\n      case 'diagnostics':\n        return <Heart className=\"h-4 w-4\" />;\n      case 'procedures':\n        return <Stethoscope className=\"h-4 w-4\" />;\n      case 'operations':\n        return <Scissors className=\"h-4 w-4\" />;\n      case 'misc':\n        return <Settings className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getServiceCategoryColor = (category: string) => {\n    switch (category) {\n      case 'admissions':\n        return 'bg-orange-100 text-orange-800';\n      case 'diagnostics':\n        return 'bg-pink-100 text-pink-800';\n      case 'procedures':\n        return 'bg-green-100 text-green-800';\n      case 'operations':\n        return 'bg-indigo-100 text-indigo-800';\n      case 'misc':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-blue-100 text-blue-800';\n    }\n  };\n\n  const getTabIcon = (tab: string) => {\n    switch (tab) {\n      case 'rooms':\n        return <Building2 className=\"h-4 w-4\" />;\n      case 'admissions':\n        return <Bed className=\"h-4 w-4\" />;\n      case 'diagnostics':\n        return <Heart className=\"h-4 w-4\" />;\n      case 'procedures':\n        return <Stethoscope className=\"h-4 w-4\" />;\n      case 'operations':\n        return <Scissors className=\"h-4 w-4\" />;\n      case 'misc':\n        return <Settings className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  // Combine predefined and custom service categories\n  const predefinedCategories = [\n    { key: 'rooms', label: 'Rooms & Accommodation', icon: Building2, isSystem: true },\n    { key: 'admissions', label: 'Admission Services', icon: Bed, isSystem: true },\n    { key: 'pathology', label: 'Pathology Tests', icon: Activity, isSystem: true },\n    { key: 'diagnostics', label: 'Diagnostic Services', icon: Heart, isSystem: true },\n    { key: 'procedures', label: 'Medical Procedures', icon: Stethoscope, isSystem: true },\n    { key: 'operations', label: 'Surgical Operations', icon: Scissors, isSystem: true },\n    { key: 'misc', label: 'Miscellaneous Services', icon: Settings, isSystem: true }\n  ];\n\n  const getIconComponent = (iconName: string) => {\n    switch (iconName) {\n      case 'Building2': return Building2;\n      case 'Activity': return Activity;\n      case 'Heart': return Heart;\n      case 'Stethoscope': return Stethoscope;\n      case 'Scissors': return Scissors;\n      case 'Settings': return Settings;\n      case 'Syringe': return Syringe;\n      default: return Settings;\n    }\n  };\n\n  const serviceCategories = [\n    ...predefinedCategories,\n    ...customServiceCategories.map(cat => ({\n      key: cat.name,\n      label: cat.label,\n      icon: getIconComponent(cat.icon),\n      isSystem: false,\n      id: cat.id\n    }))\n  ];\n\n  // Helper function to get doctor name\n  const getDoctorName = (service: any) => {\n    // If there's a doctorName from the joined query, use it\n    if (service.doctorName) {\n      return service.doctorName;\n    }\n    // If there's a doctorId, try to find the doctor in the doctors list\n    if (service.doctorId) {\n      const doctor = doctors.find(d => d.id === service.doctorId);\n      return doctor ? doctor.name : \"Unknown Doctor\";\n    }\n    // If no doctorId at all, it's an external patient\n    return \"External\";\n  };\n\n  const filteredServices = services.filter(service => service.category === activeTab);\n  const filteredPatientServices = patientServices.filter(service => service.serviceType === activeTab);\n\n  const occupiedRooms = rooms.filter(room => room.isOccupied).length;\n  const availableRooms = rooms.filter(room => !room.isOccupied && room.isActive).length;\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar\n        title=\"Service Management\"\n      />\n\n      <div className=\"p-6\">\n        {/* Service Category Navigation */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Service Categories</h2>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => openServiceCategoryDialog()}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-add-service-category\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Service Category\n              </Button>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            {serviceCategories.map((category) => {\n              const Icon = category.icon;\n              return (\n                <div key={category.key} className=\"relative group\">\n                  <Button\n                    onClick={() => setActiveTab(category.key)}\n                    variant={activeTab === category.key ? \"default\" : \"outline\"}\n                    className=\"flex items-center gap-2\"\n                    data-testid={`tab-${category.key}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {category.label}\n                  </Button>\n                  {!category.isSystem && (\n                    <div className=\"absolute -top-2 -right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (confirm(`Are you sure you want to delete \"${category.label}\"? This action cannot be undone.`)) {\n                            deleteServiceCategoryMutation.mutate(category.id);\n                          }\n                        }}\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        className=\"h-6 w-6 p-0 rounded-full\"\n                        disabled={deleteServiceCategoryMutation.isPending}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n\n        {/* Content based on active tab */}\n        {activeTab === 'rooms' ? (\n          <div className=\"space-y-4\">\n            {/* Main Rooms Navigation */}\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              <Button\n                onClick={() => {setRoomsSubTab(\"room-types\"); setSelectedRoomTypeId(\"\");}}\n                variant={roomsSubTab === \"room-types\" ? \"default\" : \"outline\"}\n                className=\"flex items-center gap-2\"\n              >\n                <Building2 className=\"h-4 w-4\" />\n                Room Types\n              </Button>\n              <Button\n                onClick={() => {setRoomsSubTab(\"rooms\"); setSelectedRoomTypeId(\"\");}}\n                variant={roomsSubTab === \"rooms\" ? \"default\" : \"outline\"}\n                className=\"flex items-center gap-2\"\n              >\n                <Bed className=\"h-4 w-4\" />\n                All Rooms\n              </Button>\n            </div>\n\n            {/* Room Types Section */}\n            {roomsSubTab === \"room-types\" && (\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Room Types</CardTitle>\n                  <Button\n                    onClick={() => openRoomTypeDialog()}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-room-type\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    Add Room Type\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  {roomTypes.length > 0 ? (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Daily Cost</TableHead>\n                          <TableHead>Total Beds</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {roomTypes.map((roomType) => {\n                          // Calculate dynamic total beds based on actual rooms for this room type\n                          const roomsForThisType = rooms.filter(room => room.roomTypeId === roomType.id);\n                          const dynamicTotalBeds = roomsForThisType.reduce((sum, room) => sum + (room.capacity || 1), 0);\n\n                          return (\n                            <TableRow key={roomType.id}>\n                              <TableCell className=\"font-medium\">{roomType.name}</TableCell>\n                              <TableCell>\n                                <Badge className={getCategoryColor(roomType.category)} variant=\"secondary\">\n                                  <div className=\"flex items-center gap-1\">\n                                    {getCategoryIcon(roomType.category)}\n                                    {roomType.category}\n                                  </div>\n                                </Badge>\n                              </TableCell>\n                              <TableCell>₹{roomType.dailyCost.toLocaleString()}</TableCell>\n                              <TableCell>{dynamicTotalBeds}</TableCell>\n                              <TableCell>\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  onClick={() => openRoomTypeDialog(roomType)}\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  onClick={() => {\n                                    if (confirm(`Are you sure you want to delete \"${roomType.name}\"? This action cannot be undone.`)) {\n                                      deleteRoomTypeMutation.mutate(roomType.id);\n                                    }\n                                  }}\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                  disabled={deleteRoomTypeMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">No room types defined yet</p>\n                      <Button\n                        onClick={() => openRoomTypeDialog()}\n                        className=\"mt-4\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add First Room Type\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Rooms Section */}\n            {roomsSubTab === \"rooms\" && (\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Individual Rooms {selectedRoomTypeId && `- ${roomTypes.find(rt => rt.id === selectedRoomTypeId)?.name}`}</CardTitle>\n                  <Button\n                    onClick={() => openRoomDialog()}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-room\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    Add Room\n                  </Button>\n                </CardHeader>\n\n                {/* Sub-navigation for Rooms */}\n                <div className=\"px-6 pb-4\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Button\n                      onClick={() => setSelectedRoomTypeId(\"\")}\n                      variant={selectedRoomTypeId === \"\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Bed className=\"h-4 w-4\" />\n                      All Rooms\n                    </Button>\n                    {roomTypes.map((roomType) => (\n                      <Button\n                        key={roomType.id}\n                        onClick={() => setSelectedRoomTypeId(roomType.id)}\n                        variant={selectedRoomTypeId === roomType.id ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"flex items-center gap-2\"\n                      >\n                        {getCategoryIcon(roomType.category)}\n                        {roomType.name}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n                <CardContent>\n                  {(() => {\n                    const filteredRooms = selectedRoomTypeId\n                      ? rooms.filter(room => room.roomTypeId === selectedRoomTypeId)\n                      : rooms;\n\n                    return filteredRooms.length > 0 ? (\n                      <div className=\"grid grid-cols-6 gap-4\">\n                        {filteredRooms.map((room) => (\n                          <div\n                            key={room.id}\n                            className=\"bg-white border border-gray-200 rounded-lg p-3 flex items-center justify-between shadow-sm hover:shadow-md transition-shadow\"\n                            style={{ aspectRatio: '3/1' }}\n                          >\n                            <div className=\"flex flex-col justify-center\">\n                              <span className=\"font-medium text-sm text-gray-900\">\n                                {room.roomNumber}\n                              </span>\n                            </div>\n                            <Button\n                              onClick={() => {\n                                if (confirm(`Are you sure you want to delete room \"${room.roomNumber}\"? This action cannot be undone.`)) {\n                                  deleteRoomMutation.mutate(room.id);\n                                }\n                              }}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 h-6 w-6 p-0\"\n                              disabled={deleteRoomMutation.isPending}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Bed className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-500\">\n                          {selectedRoomTypeId ? `No ${roomTypes.find(rt => rt.id === selectedRoomTypeId)?.name} rooms defined yet` : `No individual rooms defined yet`}\n                        </p>\n                        <Button\n                          onClick={() => openRoomDialog()}\n                          className=\"mt-4\"\n                        >\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Room\n                        </Button>\n                      </div>\n                    );\n                  })()}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        ) : activeTab !== 'pathology' ? (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                {getServiceCategoryIcon(activeTab)}\n                {serviceCategories.find(cat => cat.key === activeTab)?.label}\n              </CardTitle>\n              <Button\n                onClick={() => openServiceDialog()}\n                className=\"flex items-center gap-2\"\n                data-testid={`button-add-${activeTab}`}\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Service\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {filteredServices.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Service Name</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredServices.map((service) => (\n                      <TableRow key={service.id}>\n                        <TableCell className=\"font-medium\">{service.name}</TableCell>\n                        <TableCell>\n                          {(service.category !== 'rooms' && service.price === 0)\n                            ? <Badge variant=\"outline\" className=\"text-purple-700 border-purple-300\">Variable</Badge>\n                            : `₹${service.price.toLocaleString()}`\n                          }\n                        </TableCell>\n                        <TableCell>{service.description || \"N/A\"}</TableCell>\n                        <TableCell>\n                          <Badge\n                            className={service.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}\n                            variant=\"secondary\"\n                          >\n                            {service.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              onClick={() => openServiceDialog(service)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              onClick={() => {\n                                if (confirm(`Are you sure you want to delete \"${service.name}\"? This action cannot be undone.`)) {\n                                  deleteServiceMutation.mutate(service.id);\n                                }\n                              }}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              disabled={deleteServiceMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-8\">\n                  {getServiceCategoryIcon(activeTab)}\n                  <p className=\"text-gray-500 mt-4\">No {activeTab} services defined yet</p>\n                  <Button\n                    onClick={() => openServiceDialog()}\n                    className=\"mt-4\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add First Service\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ) : null}\n\n        {/* Pathology Section */}\n        {activeTab === 'pathology' && (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-4 w-4\" />\n                Pathology Tests\n              </CardTitle>\n              <Button\n                onClick={() => setIsUploadDialogOpen(true)}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Upload JSON\n              </Button>\n            </CardHeader>\n\n            {/* Pathology Navigation */}\n            <div className=\"px-6 pb-4\">\n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  onClick={() => setPathologySubTab(\"categories\")}\n                  variant={pathologySubTab === \"categories\" ? \"default\" : \"outline\"}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Activity className=\"h-4 w-4\" />\n                  Categories\n                </Button>\n                <Button\n                  onClick={() => setPathologySubTab(\"tests\")}\n                  variant={pathologySubTab === \"tests\" ? \"default\" : \"outline\"}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Syringe className=\"h-4 w-4\" />\n                  Tests\n                </Button>\n              </div>\n            </div>\n\n            <CardContent>\n              {/* Categories Section */}\n              {pathologySubTab === \"categories\" && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-lg font-semibold\">Pathology Categories</h3>\n                    <Button\n                      onClick={() => setIsCategoryDialogOpen(true)}\n                      className=\"flex items-center gap-2\"\n                      data-testid=\"button-add-category\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      Add Category\n                    </Button>\n                  </div>\n\n                  {combinedPathologyData && combinedPathologyData.categories && combinedPathologyData.categories.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {/* Summary Stats */}\n                      {combinedPathologyData.summary && (\n                        <div className=\"flex gap-4 p-4 bg-gray-50 rounded-lg\">\n                          <div className=\"text-sm\">\n                            <span className=\"font-medium\">Total Categories:</span> {combinedPathologyData.summary.totalCategories}\n                          </div>\n                          <div className=\"text-sm\">\n                            <span className=\"font-medium\">Total Tests:</span> {combinedPathologyData.summary.totalTests}\n                          </div>\n                          <div className=\"text-sm\">\n                            <span className=\"font-medium\">Dynamic:</span> {combinedPathologyData.summary.dynamicCategories}\n                          </div>\n                          <div className=\"text-sm\">\n                            <span className=\"font-medium\">System:</span> {combinedPathologyData.summary.hardcodedCategories}\n                          </div>\n                        </div>\n                      )}\n\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Description</TableHead>\n                            <TableHead>Tests Count</TableHead>\n                            <TableHead>Type</TableHead>\n                            <TableHead>Actions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {combinedPathologyData.categories.map((category) => (\n                            <TableRow key={category.id}>\n                              <TableCell className=\"font-medium\">{category.name}</TableCell>\n                              <TableCell>{category.description || '-'}</TableCell>\n                              <TableCell>{category.tests?.length || 0}</TableCell>\n                              <TableCell>\n                                <Badge variant={category.isHardcoded ? \"secondary\" : \"default\"}>\n                                  {category.isHardcoded ? \"System\" : \"Custom\"}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex gap-2\">\n                                  {!category.isHardcoded && (\n                                    <Button\n                                      onClick={() => {\n                                        const dynamicCategory = pathologyCategories.find(c => c.id === category.id);\n                                        if (dynamicCategory) {\n                                          setEditingCategory(dynamicCategory);\n                                          categoryForm.reset({\n                                            name: dynamicCategory.name,\n                                            description: dynamicCategory.description || \"\",\n                                            isActive: dynamicCategory.isActive,\n                                          });\n                                          setIsCategoryDialogOpen(true);\n                                        }\n                                      }}\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                    >\n                                      <Edit className=\"h-4 w-4\" />\n                                    </Button>\n                                  )}\n                                  <Button\n                                    onClick={async () => {\n                                      if (confirm(`Are you sure you want to delete \"${category.name}\"? This action cannot be undone.`)) {\n                                        deleteCategory(category.id);\n                                      }\n                                    }}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Activity className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">No pathology categories defined yet</p>\n                      <Button\n                        onClick={() => setIsCategoryDialogOpen(true)}\n                        className=\"mt-4\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add First Category\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Tests Section */}\n              {pathologySubTab === \"tests\" && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-lg font-semibold\">Pathology Tests</h3>\n                    <Button\n                      onClick={() => setIsTestDialogOpen(true)}\n                      className=\"flex items-center gap-2\"\n                      data-testid=\"button-add-test\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      Add Test\n                    </Button>\n                  </div>\n\n                  {combinedPathologyData && combinedPathologyData.categories.some(cat => cat.tests && cat.tests.length > 0) ? (\n                    <div className=\"space-y-6\">\n                      {/* Category Filter */}\n                      <div className=\"flex gap-4 items-center\">\n                        <label className=\"text-sm font-medium\">Filter by Category:</label>\n                        <select\n                          value={selectedCategoryId}\n                          onChange={(e) => setSelectedCategoryId(e.target.value)}\n                          className=\"px-3 py-2 border rounded-md\"\n                        >\n                          <option value=\"\">All Categories</option>\n                          {combinedPathologyData.categories.map(category => (\n                            <option key={category.id} value={category.id}>\n                              {category.name} ({category.tests?.length || 0} tests)\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n\n                      {/* Tests grouped by category */}\n                      {combinedPathologyData.categories\n                        .filter(category => !selectedCategoryId || category.id === selectedCategoryId)\n                        .filter(category => category.tests && category.tests.length > 0)\n                        .map(category => (\n                          <div key={category.id} className=\"space-y-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <h3 className=\"text-lg font-semibold\">{category.name}</h3>\n                              <Badge variant={category.isHardcoded ? \"secondary\" : \"default\"}>\n                                {category.isHardcoded ? \"System\" : \"Custom\"}\n                              </Badge>\n                              <span className=\"text-sm text-gray-500\">\n                                ({category.tests.length} tests)\n                              </span>\n                            </div>\n\n                            <Table>\n                              <TableHeader>\n                                <TableRow>\n                                  <TableHead>Test Name</TableHead>\n                                  <TableHead>Price</TableHead>\n                                  <TableHead>Normal Range</TableHead>\n                                  <TableHead>Type</TableHead>\n                                  <TableHead>Actions</TableHead>\n                                </TableRow>\n                              </TableHeader>\n                              <TableBody>\n                                {category.tests.map((test) => (\n                                  <TableRow key={test.id}>\n                                    <TableCell className=\"font-medium\">\n                                      {test.name || test.test_name}\n                                    </TableCell>\n                                    <TableCell>₹{test.price}</TableCell>\n                                    <TableCell>{test.normalRange || '-'}</TableCell>\n                                    <TableCell>\n                                      <Badge variant={test.isHardcoded ? \"secondary\" : \"default\"}>\n                                        {test.isHardcoded ? \"System\" : \"Custom\"}\n                                      </Badge>\n                                    </TableCell>\n                                    <TableCell>\n                                      <div className=\"flex gap-2\">\n                                        {!test.isHardcoded && (\n                                          <Button\n                                            onClick={() => {\n                                              setEditingTest(test);\n                                              testForm.reset({\n                                                categoryId: test.categoryId,\n                                                testName: test.name,\n                                                price: test.price,\n                                                normalRange: test.normalRange || \"\",\n                                                description: test.description || \"\",\n                                                isActive: test.isActive,\n                                              });\n                                              setIsTestDialogOpen(true);\n                                            }}\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                          >\n                                            <Edit className=\"h-4 w-4\" />\n                                          </Button>\n                                        )}\n                                        <Button\n                                          onClick={() => {\n                                            if (confirm(`Are you sure you want to delete \"${test.name || test.test_name}\"? This action cannot be undone.`)) {\n                                              deleteTest(test, category.name);\n                                            }\n                                          }}\n                                          size=\"sm\"\n                                          variant=\"outline\"\n                                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                        >\n                                          <Trash2 className=\"h-4 w-4\" />\n                                        </Button>\n                                      </div>\n                                    </TableCell>\n                                  </TableRow>\n                                ))}\n                              </TableBody>\n                            </Table>\n                          </div>\n                        ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Syringe className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">No pathology tests defined yet</p>\n                      <Button\n                        onClick={() => setIsTestDialogOpen(true)}\n                        className=\"mt-4\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add First Test\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Room Type Dialog */}\n        <Dialog open={isRoomTypeDialogOpen} onOpenChange={setIsRoomTypeDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingRoomType ? 'Edit Room Type' : 'Add Room Type'}\n              </DialogTitle>\n            </DialogHeader>\n\n            <form onSubmit={roomTypeForm.handleSubmit(onRoomTypeSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Room Type Name *</Label>\n                  <Input\n                    {...roomTypeForm.register(\"name\")}\n                    placeholder=\"e.g., General Ward\"\n                    data-testid=\"input-room-type-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Category *</Label>\n                  <Select\n                    value={roomTypeForm.watch(\"category\")}\n                    onValueChange={(value) => roomTypeForm.setValue(\"category\", value)}\n                    data-testid=\"select-room-category\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ward\">Ward</SelectItem>\n                      <SelectItem value=\"icu\">ICU</SelectItem>\n                      <SelectItem value=\"emergency\">Emergency</SelectItem>\n                      <SelectItem value=\"ot\">Operation Theater</SelectItem>\n                      <SelectItem value=\"room\">Room</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Daily Cost (₹) *</Label>\n                <Input\n                  type=\"number\"\n                  {...roomTypeForm.register(\"dailyCost\", { valueAsNumber: true })}\n                  placeholder=\"Enter daily cost\"\n                  data-testid=\"input-daily-cost\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsRoomTypeDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createRoomTypeMutation.isPending}\n                >\n                  {createRoomTypeMutation.isPending\n                    ? \"Saving...\"\n                    : editingRoomType\n                      ? \"Update Room Type\"\n                      : \"Add Room Type\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Room Dialog */}\n        <Dialog open={isRoomDialogOpen} onOpenChange={setIsRoomDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingRoom ? 'Edit Room' : 'Add Room'}\n              </DialogTitle>\n            </DialogHeader>\n\n            <form onSubmit={roomForm.handleSubmit(onRoomSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Room Number *</Label>\n                <Input\n                  {...roomForm.register(\"roomNumber\")}\n                  placeholder=\"e.g., GW-1, ICU-1, PR-1, AR-1\"\n                  data-testid=\"input-room-number\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Room Type *</Label>\n                <Select\n                  value={roomForm.watch(\"roomTypeId\")}\n                  onValueChange={(value) => roomForm.setValue(\"roomTypeId\", value)}\n                  disabled={!!selectedRoomTypeId && !editingRoom}\n                  data-testid=\"select-room-type\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select room type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roomTypes.map((roomType) => (\n                      <SelectItem key={roomType.id} value={roomType.id}>\n                        {roomType.name} - ₹{roomType.dailyCost}/day\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {selectedRoomTypeId && !editingRoom && (\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Auto-selected: {roomTypes.find(rt => rt.id === selectedRoomTypeId)?.name}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsRoomDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createRoomMutation.isPending}\n                >\n                  {createRoomMutation.isPending\n                    ? \"Saving...\"\n                    : editingRoom\n                      ? \"Update Room\"\n                      : \"Add Room\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Service Dialog */}\n        <Dialog open={isServiceDialogOpen} onOpenChange={setIsServiceDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingService ? 'Edit Service' : `Add ${serviceCategories.find(cat => cat.key === activeTab)?.label} Service`}\n              </DialogTitle>\n            </DialogHeader>\n\n            <form onSubmit={serviceForm.handleSubmit(onServiceSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Service Name *</Label>\n                  <Input\n                    {...serviceForm.register(\"name\")}\n                    placeholder={`e.g., ${activeTab === 'diagnostics' ? 'ECG' : activeTab === 'procedures' ? 'Dressing' : activeTab === 'operations' ? 'Appendectomy' : activeTab === 'misc' ? 'Ambulance Service' : 'Service Name'}`}\n                    data-testid=\"input-service-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Price (₹) {activeTab !== 'rooms' ? '(Optional - Variable Pricing)' : '*'}</Label>\n                  <Input\n                    type=\"number\"\n                    {...serviceForm.register(\"price\", {\n                      setValueAs: (value: string) => {\n                        // For variable pricing services, allow null when blank\n                        if (value === \"\" && serviceForm.watch(\"billingType\") === \"variable\") {\n                          return null;\n                        }\n                        return value === \"\" ? 0 : parseFloat(value) || 0;\n                      }\n                    })}\n                    placeholder={activeTab !== 'rooms' ? 'Leave blank for variable pricing' : 'Enter price'}\n                    data-testid=\"input-service-price\"\n                  />\n                  {activeTab !== 'rooms' && (\n                    <p className=\"text-sm text-gray-500\">Price can be entered when adding to patient if left blank</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Description</Label>\n                <Textarea\n                  {...serviceForm.register(\"description\")}\n                  placeholder=\"Optional description of the service\"\n                  data-testid=\"textarea-service-description\"\n                />\n              </div>\n\n              {/* Billing Type Selection */}\n              <div className=\"space-y-2\">\n                <Label>Billing Type</Label>\n                <Select\n                  value={serviceForm.watch(\"billingType\") || \"per_instance\"}\n                  onValueChange={(value) => serviceForm.setValue(\"billingType\", value)}\n                  data-testid=\"select-billing-type\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select billing type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"per_instance\">Per Instance (Default)</SelectItem>\n                    <SelectItem value=\"per_24_hours\">Per 24 Hours (Room Charges)</SelectItem>\n                    <SelectItem value=\"per_hour\">Per Hour (Oxygen, etc.)</SelectItem>\n                    <SelectItem value=\"composite\">Composite (Fixed + Variable)</SelectItem>\n                    <SelectItem value=\"variable\">Variable (Input-based pricing)</SelectItem>\n                    <SelectItem value=\"per_date\">Per Date (Calendar dates during admission)</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-500\">\n                  {serviceForm.watch(\"billingType\") === \"per_instance\" && \"Charged once per service instance\"}\n                  {serviceForm.watch(\"billingType\") === \"per_24_hours\" && \"Charged per day (room stays)\"}\n                  {serviceForm.watch(\"billingType\") === \"per_hour\" && \"Charged per hour of usage\"}\n                  {serviceForm.watch(\"billingType\") === \"composite\" && \"Fixed charge + variable component\"}\n                  {serviceForm.watch(\"billingType\") === \"variable\" && \"Price determined at time of service (quantity always 1)\"}\n                  {serviceForm.watch(\"billingType\") === \"per_date\" && \"Charged per calendar date during admission period\"}\n                </p>\n              </div>\n\n              {/* Billing Parameters for Composite Type */}\n              {serviceForm.watch(\"billingType\") === \"composite\" && (\n                <div className=\"space-y-2\">\n                  <Label>Billing Parameters (JSON)</Label>\n                  <Textarea\n                    {...serviceForm.register(\"billingParameters\")}\n                    placeholder='{\"fixedCharge\": 500, \"perKmRate\": 15}'\n                    data-testid=\"textarea-billing-parameters\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    For ambulance: fixedCharge (base fee) + perKmRate (per km charge)\n                  </p>\n                </div>\n              )}\n\n              {/* Doctor Assignment Section */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-base font-semibold\">Doctor Assignment (Optional)</Label>\n                  {serviceDoctors.length === 0 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={addDoctorToService}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      Add Doctor\n                    </Button>\n                  )}\n                </div>\n\n                {serviceDoctors.map((doctor, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 flex-1\">\n                        <div className=\"space-y-2\">\n                          <Label>Doctor {index + 1}</Label>\n                          <Select\n                            value={doctor.id}\n                            onValueChange={(value) => updateDoctorShare(index, \"id\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select doctor\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {doctors.map((doc: any) => (\n                                <SelectItem key={doc.id} value={doc.id}>\n                                  {doc.name} - {doc.specialization}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        {serviceDoctors.length > 1 && (\n                          <div className=\"space-y-2\">\n                            <Label>Share (₹)</Label>\n                            <Input\n                              type=\"number\"\n                              value={doctor.share || \"\"}\n                              onChange={(e) => updateDoctorShare(index, \"share\", parseFloat(e.target.value) || 0)}\n                              placeholder=\"Doctor's share amount\"\n                            />\n                          </div>\n                        )}\n                      </div>\n\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeDoctorFromService(index)}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    {index === serviceDoctors.length - 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={addDoctorToService}\n                        className=\"flex items-center gap-2 mt-2\"\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                        Add Another Doctor\n                      </Button>\n                    )}\n                  </div>\n                ))}\n\n                {serviceDoctors.length > 1 && (\n                  <div className=\"bg-blue-50 p-3 rounded-lg\">\n                    <p className=\"text-sm text-blue-800 font-medium\">Cost Distribution</p>\n                    <p className=\"text-sm text-blue-600\">\n                      Total service price: ₹{serviceForm.watch(\"price\") || 0}\n                    </p>\n                    <p className=\"text-sm text-blue-600\">\n                      Total doctor shares: ₹{serviceDoctors.reduce((sum, doc) => sum + (doc.share || 0), 0)}\n                    </p>\n                    <p className=\"text-sm text-blue-600\">\n                      Hospital share: ₹{Math.max(0, (serviceForm.watch(\"price\") || 0) - serviceDoctors.reduce((sum, doc) => sum + (doc.share || 0), 0))}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsServiceDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createServiceMutation.isPending}\n                >\n                  {createServiceMutation.isPending\n                    ? \"Saving...\"\n                    : editingService\n                      ? \"Update Service\"\n                      : \"Add Service\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Pathology Category Dialog */}\n        <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingCategory ? 'Edit Category' : 'Add Pathology Category'}\n              </DialogTitle>\n            </DialogHeader>\n\n            <form onSubmit={categoryForm.handleSubmit(async (data) => {\n              try {\n                const url = editingCategory\n                  ? `/api/pathology-categories/${editingCategory.id}`\n                  : '/api/pathology-categories';\n                const method = editingCategory ? 'PUT' : 'POST';\n\n                const response = await fetch(url, {\n                  method,\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('hospital_token')}`\n                  },\n                  body: JSON.stringify(data)\n                });\n\n                if (response.ok) {\n                  queryClient.invalidateQueries({ queryKey: ['/api/pathology-categories'] });\n                  queryClient.invalidateQueries({ queryKey: ['/api/pathology-tests/combined'] });\n                  toast({ title: 'Success', description: `Category ${editingCategory ? 'updated' : 'created'} successfully` });\n                  setIsCategoryDialogOpen(false);\n                  setEditingCategory(null);\n                  categoryForm.reset();\n                } else {\n                  toast({ title: 'Error', description: 'Failed to save category', variant: 'destructive' });\n                }\n              } catch (error) {\n                toast({ title: 'Error', description: 'Failed to save category', variant: 'destructive' });\n              }\n            })} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Category Name *</Label>\n                <Input\n                  {...categoryForm.register(\"name\")}\n                  placeholder=\"e.g., Cardiology Tests\"\n                  data-testid=\"input-category-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Description</Label>\n                <Textarea\n                  {...categoryForm.register(\"description\")}\n                  placeholder=\"Optional description\"\n                  data-testid=\"textarea-category-description\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsCategoryDialogOpen(false);\n                    setEditingCategory(null);\n                    categoryForm.reset();\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\">\n                  {editingCategory ? 'Update Category' : 'Add Category'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Pathology Test Dialog */}\n        <Dialog open={isTestDialogOpen} onOpenChange={setIsTestDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingTest ? 'Edit Test' : 'Add Pathology Test'}\n              </DialogTitle>\n            </DialogHeader>\n\n            <form onSubmit={testForm.handleSubmit(async (data) => {\n              try {\n                const url = editingTest\n                  ? `/api/dynamic-pathology-tests/${editingTest.id}`\n                  : '/api/dynamic-pathology-tests';\n                const method = editingTest ? 'PUT' : 'POST';\n\n                const response = await fetch(url, {\n                  method,\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('hospital_token')}`\n                  },\n                  body: JSON.stringify(data)\n                });\n\n                if (response.ok) {\n                  queryClient.invalidateQueries({ queryKey: ['/api/dynamic-pathology-tests'] });\n                  queryClient.invalidateQueries({ queryKey: ['/api/pathology-tests/combined'] });\n                  toast({ title: 'Success', description: `Test ${editingTest ? 'updated' : 'created'} successfully` });\n                  setIsTestDialogOpen(false);\n                  setEditingTest(null);\n                  testForm.reset();\n                } else {\n                  toast({ title: 'Error', description: 'Failed to save test', variant: 'destructive' });\n                }\n              } catch (error) {\n                toast({ title: 'Error', description: 'Failed to save test', variant: 'destructive' });\n              }\n            })} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Category *</Label>\n                <Select\n                  value={testForm.watch(\"categoryId\")}\n                  onValueChange={(value) => testForm.setValue(\"categoryId\", value)}\n                  data-testid=\"select-test-category\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {combinedPathologyData?.categories.map(category => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name} {category.isHardcoded ? '(System)' : '(Custom)'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Test Name *</Label>\n                <Input\n                  {...testForm.register(\"testName\")}\n                  placeholder=\"e.g., Blood Glucose Test\"\n                  data-testid=\"input-test-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Price (₹) *</Label>\n                <Input\n                  type=\"number\"\n                  {...testForm.register(\"price\", { valueAsNumber: true })}\n                  placeholder=\"Enter test price\"\n                  data-testid=\"input-test-price\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Normal Range</Label>\n                <Input\n                  {...testForm.register(\"normalRange\")}\n                  placeholder=\"e.g., 70-100 mg/dL\"\n                  data-testid=\"input-test-normal-range\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Description</Label>\n                <Textarea\n                  {...testForm.register(\"description\")}\n                  placeholder=\"Optional test description\"\n                  data-testid=\"textarea-test-description\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsTestDialogOpen(false);\n                    setEditingTest(null);\n                    testForm.reset();\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\">\n                  {editingTest ? 'Update Test' : 'Add Test'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* JSON Upload Dialog */}\n        <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Bulk Upload Pathology Tests</DialogTitle>\n              <p className=\"text-sm text-gray-600\">\n                Upload tests in JSON format. The system will create categories and tests as needed.\n              </p>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>JSON Data</Label>\n                <Textarea\n                  value={uploadData}\n                  onChange={(e) => setUploadData(e.target.value)}\n                  placeholder={`{\n  \"categories\": [\n    {\n      \"name\": \"Blood Tests\",\n      \"description\": \"Blood analysis tests\",\n      \"tests\": [\n        {\n          \"test_name\": \"Complete Blood Count\",\n          \"price\": 500,\n          \"normal_range\": \"70-100 mg/dL\",\n          \"description\": \"Full blood analysis\"\n        }\n      ]\n    }\n  ]\n}`}\n                  rows={12}\n                  className=\"font-mono text-sm\"\n                  data-testid=\"textarea-upload-json\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsUploadDialogOpen(false);\n                    setUploadData(\"\");\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={async () => {\n                    try {\n                      const data = JSON.parse(uploadData);\n                      const response = await fetch('/api/pathology-tests/bulk-upload', {\n                        method: 'POST',\n                        headers: {\n                          'Content-Type': 'application/json',\n                          'Authorization': `Bearer ${localStorage.getItem('hospital_token')}`\n                        },\n                        body: JSON.stringify(data)\n                      });\n\n                      if (response.ok) {\n                        const result = await response.json();\n                        queryClient.invalidateQueries({ queryKey: ['/api/pathology-categories'] });\n                        queryClient.invalidateQueries({ queryKey: ['/api/dynamic-pathology-tests'] });\n                        queryClient.invalidateQueries({ queryKey: ['/api/pathology-tests/combined'] });\n                        toast({\n                          title: 'Success',\n                          description: `Uploaded ${result.categories?.length || 0} categories and ${result.tests?.length || 0} tests`\n                        });\n                        setIsUploadDialogOpen(false);\n                        setUploadData(\"\");\n                      } else {\n                        toast({ title: 'Error', description: 'Failed to upload data', variant: 'destructive' });\n                      }\n                    } catch (error) {\n                      toast({ title: 'Error', description: 'Invalid JSON format', variant: 'destructive' });\n                    }\n                  }}\n                >\n                  Upload Tests\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Service Category Dialog */}\n        <Dialog open={isServiceCategoryDialogOpen} onOpenChange={setIsServiceCategoryDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingServiceCategory ? 'Edit Service Category' : 'Add Service Category'}\n              </DialogTitle>\n            </DialogHeader>\n\n            <form onSubmit={serviceCategoryForm.handleSubmit(onServiceCategorySubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Category Name *</Label>\n                <Input\n                  {...serviceCategoryForm.register(\"name\")}\n                  placeholder=\"e.g., pharmacy\"\n                  data-testid=\"input-category-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Display Label *</Label>\n                <Input\n                  {...serviceCategoryForm.register(\"label\")}\n                  placeholder=\"e.g., Pharmacy Services\"\n                  data-testid=\"input-category-label\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Icon</Label>\n                <Select\n                  value={serviceCategoryForm.watch(\"icon\")}\n                  onValueChange={(value) => serviceCategoryForm.setValue(\"icon\", value)}\n                  data-testid=\"select-category-icon\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select icon\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Settings\">Settings</SelectItem>\n                    <SelectItem value=\"Activity\">Activity</SelectItem>\n                    <SelectItem value=\"Heart\">Heart</SelectItem>\n                    <SelectItem value=\"Stethoscope\">Stethoscope</SelectItem>\n                    <SelectItem value=\"Syringe\">Syringe</SelectItem>\n                    <SelectItem value=\"Building2\">Building</SelectItem>\n                    <SelectItem value=\"Scissors\">Scissors</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Description</Label>\n                <Textarea\n                  {...serviceCategoryForm.register(\"description\")}\n                  placeholder=\"Optional description\"\n                  data-testid=\"textarea-category-description\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsServiceCategoryDialogOpen(false);\n                    setEditingServiceCategory(null);\n                    serviceCategoryForm.reset();\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createServiceCategoryMutation.isPending}\n                >\n                  {createServiceCategoryMutation.isPending\n                    ? \"Saving...\"\n                    : editingServiceCategory\n                      ? \"Update Category\"\n                      : \"Add Category\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":88658},"client/src/components/billing/service-selector.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search } from \"lucide-react\";\nimport type { Service } from \"@shared/schema\";\n\ninterface ServiceSelectorProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectService: (service: Service) => void;\n}\n\nexport default function ServiceSelector({\n  isOpen,\n  onClose,\n  onSelectService,\n}: ServiceSelectorProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: services, isLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n    enabled: isOpen,\n  });\n\n  const { data: searchResults } = useQuery({\n    queryKey: [\"/api/services/search\", { q: searchQuery }],\n    enabled: searchQuery.length > 0 && isOpen,\n  });\n\n  const displayServices = searchQuery ? searchResults : services;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'consultation':\n        return 'bg-blue-100 text-blue-800';\n      case 'pathology':\n        return 'bg-purple-100 text-purple-800';\n      case 'radiology':\n        return 'bg-green-100 text-green-800';\n      case 'procedure':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"service-selector-modal\">\n        <DialogHeader>\n          <DialogTitle>Add Service</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search services...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-service-search\"\n            />\n            <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n          </div>\n          \n          {/* Service List */}\n          <div className=\"space-y-2 max-h-96 overflow-y-auto\" data-testid=\"service-list\">\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                <p className=\"text-sm text-muted-foreground mt-2\">Loading services...</p>\n              </div>\n            ) : displayServices && displayServices.length > 0 ? (\n              displayServices.map((service: Service) => (\n                <div\n                  key={service.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                  onClick={() => {\n                    onSelectService(service);\n                    setSearchQuery(\"\");\n                  }}\n                  data-testid={`service-option-${service.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <p className=\"font-medium\">{service.name}</p>\n                      <Badge variant=\"secondary\" className={getCategoryColor(service.category)}>\n                        {service.category}\n                      </Badge>\n                    </div>\n                    {service.description && (\n                      <p className=\"text-sm text-muted-foreground\">{service.description}</p>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"font-medium text-lg\" data-testid={`service-price-${service.id}`}>\n                      {formatCurrency(service.price)}\n                    </span>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No services found</p>\n                {searchQuery && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setSearchQuery(\"\")}\n                    className=\"mt-2\"\n                  >\n                    Clear search\n                  </Button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4787},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/backup-scheduler.ts":{"content":"import cron from 'node-cron';\nimport { storage } from './storage';\n\nlet scheduledTask: cron.ScheduledTask | null = null;\n\nexport class BackupScheduler {\n  private static instance: BackupScheduler;\n  private currentSchedule: string | null = null;\n\n  private constructor() {}\n\n  static getInstance(): BackupScheduler {\n    if (!BackupScheduler.instance) {\n      BackupScheduler.instance = new BackupScheduler();\n    }\n    return BackupScheduler.instance;\n  }\n\n  async initializeScheduler(): Promise<void> {\n    try {\n      const settings = await storage.getSystemSettings();\n\n      if (settings?.autoBackup) {\n        await this.updateSchedule(settings.backupFrequency, settings.backupTime);\n        console.log('Backup scheduler initialized');\n      } else {\n        console.log('Auto backup is disabled');\n      }\n    } catch (error) {\n      console.error('Failed to initialize backup scheduler:', error);\n    }\n  }\n\n  async updateSchedule(frequency: string, time: string): Promise<void> {\n    try {\n      // Stop existing scheduler\n      this.stopScheduler();\n\n      // Parse time (format: \"HH:MM\")\n      const [hours, minutes] = time.split(':').map(Number);\n\n      if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {\n        throw new Error('Invalid time format. Expected HH:MM');\n      }\n\n      // Create cron expression based on frequency\n      let cronExpression: string;\n\n      switch (frequency) {\n        case 'daily':\n          cronExpression = `${minutes} ${hours} * * *`;\n          break;\n        case 'weekly':\n          cronExpression = `${minutes} ${hours} * * 0`; // Sunday\n          break;\n        case 'monthly':\n          cronExpression = `${minutes} ${hours} 1 * *`; // First day of month\n          break;\n        default:\n          throw new Error(`Unsupported backup frequency: ${frequency}`);\n      }\n\n      // Validate cron expression\n      if (!cron.validate(cronExpression)) {\n        throw new Error(`Invalid cron expression: ${cronExpression}`);\n      }\n\n      // Start new scheduler\n      scheduledTask = cron.schedule(cronExpression, async () => {\n        console.log(`Starting automatic backup (${frequency})`);\n        await this.performBackup();\n      }, {\n        scheduled: true,\n        timezone: 'Asia/Kolkata' // Indian timezone\n      });\n\n      this.currentSchedule = cronExpression;\n      console.log(`Backup scheduled: ${frequency} at ${time} (${cronExpression})`);\n\n    } catch (error) {\n      console.error('Failed to update backup schedule:', error);\n      throw error;\n    }\n  }\n\n  stopScheduler(): void {\n    if (scheduledTask) {\n      scheduledTask.destroy();\n      scheduledTask = null;\n      this.currentSchedule = null;\n      console.log('Backup scheduler stopped');\n    }\n  }\n\n  async performBackup(): Promise<void> {\n    try {\n      // Check if auto backup is still enabled\n      const settings = await storage.getSystemSettings();\n\n      if (!settings?.autoBackup) {\n        console.log('Auto backup is disabled, skipping scheduled backup');\n        return;\n      }\n\n      console.log('Creating automatic backup...');\n      const backup = await storage.createBackup('auto');\n      console.log(`Automatic backup completed: ${backup.backupId}`);\n      console.log(`Backup details:`, JSON.stringify(backup, null, 2));\n\n      // Clean up old backups\n      await storage.cleanOldBackups();\n      console.log('Old backups cleanup completed');\n\n    } catch (error) {\n      console.error('Automatic backup failed:', error);\n      // Don't throw the error to prevent scheduler from stopping\n    }\n  }\n\n  async enableAutoBackup(frequency: string, time: string): Promise<void> {\n    await this.updateSchedule(frequency, time);\n  }\n\n  async disableAutoBackup(): Promise<void> {\n    this.stopScheduler();\n    console.log('Auto backup disabled');\n  }\n\n  getCurrentSchedule(): string | null {\n    return this.currentSchedule;\n  }\n\n  isRunning(): boolean {\n    return scheduledTask !== null;\n  }\n}\n\n// Export singleton instance\nexport const backupScheduler = BackupScheduler.getInstance();","size_bytes":4069},"client/src/pages/billing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, CalendarDays } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"; // Assuming you have a Table component\n\n// Placeholder for ReceiptTemplate component\nconst ReceiptTemplate = ({ receiptData, hospitalInfo, onPrint }) => (\n  <button onClick={onPrint}>Print Receipt</button>\n);\n\nexport default function Billing() {\n  const [mainActiveTab, setMainActiveTab] = useState(\"revenue\");\n  const [leftActiveTab, setLeftActiveTab] = useState(\"opd\");\n\n  // Date filters - default to today\n  const today = new Date().toISOString().split('T')[0];\n  const [fromDate, setFromDate] = useState(today);\n  const [toDate, setToDate] = useState(today);\n\n  // Search filters\n  const [opdSearchQuery, setOpdSearchQuery] = useState<string>(\"\");\n  const [labSearchQuery, setLabSearchQuery] = useState<string>(\"\");\n  const [diagnosticSearchQuery, setDiagnosticSearchQuery] = useState<string>(\"\");\n  const [inpatientSearchQuery, setInpatientSearchQuery] = useState<string>(\"\");\n\n  // OPD specific filters\n  const [selectedDoctor, setSelectedDoctor] = useState<string>(\"all\");\n\n  // Diagnostic specific filters\n  const [selectedDiagnosticService, setSelectedDiagnosticService] = useState<string>(\"all\");\n  const [selectedService, setSelectedService] = useState<string>(\"all\"); // For diagnostic filter\n\n  const { data: doctorsFromApi = [] } = useQuery<any[]>({\n    queryKey: [\"/api/doctors\"],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: opdDataApi = [] } = useQuery<any[]>({\n    queryKey: [`/api/opd-visits?fromDate=${fromDate}&toDate=${toDate}${selectedDoctor !== \"all\" ? `&doctorId=${selectedDoctor}` : \"\"}`],\n    enabled: leftActiveTab === \"opd\",\n  });\n\n  const { data: labDataApi = [] } = useQuery<any[]>({\n    queryKey: [`/api/pathology?fromDate=${fromDate}&toDate=${toDate}`],\n    enabled: leftActiveTab === \"lab\",\n  });\n\n  const { data: diagnosticDataApi = [] } = useQuery<any[]>({\n    queryKey: [`/api/patient-services?serviceType=diagnostic&fromDate=${fromDate}&toDate=${toDate}${selectedDiagnosticService !== \"all\" ? `&serviceName=${encodeURIComponent(selectedDiagnosticService)}` : \"\"}`],\n    enabled: leftActiveTab === \"diagnostic\",\n  });\n\n  // Fetch inpatient services (procedures, operations, misc, and custom services)\n  const { data: inpatientServicesApi = [] } = useQuery<any[]>({\n    queryKey: [`/api/patient-services?fromDate=${fromDate}&toDate=${toDate}&serviceType=procedure,operation,misc,service`],\n    enabled: leftActiveTab === \"inpatient\",\n  });\n\n  // Fetch admissions data\n  const { data: admissionsDataApi = [] } = useQuery<any[]>({\n    queryKey: [`/api/admissions?fromDate=${fromDate}&toDate=${toDate}`],\n    enabled: leftActiveTab === \"inpatient\",\n  });\n\n  const { data: billsDataApi = [] } = useQuery<any[]>({\n    queryKey: [\n      `/api/bills?fromDate=${fromDate}&toDate=${toDate}&paymentStatus=paid`\n    ],\n    enabled: mainActiveTab === \"payments\",\n  });\n\n  // Filtered Data for display\n  const filteredOpdServices = opdDataApi.filter(item => {\n    const doctorMatch = selectedDoctor === \"all\" || String(item.doctorId) === selectedDoctor;\n    const searchMatch = opdSearchQuery === \"\" ||\n      item.patient?.name?.toLowerCase().includes(opdSearchQuery.toLowerCase()) ||\n      item.doctor?.name?.toLowerCase().includes(opdSearchQuery.toLowerCase());\n    return doctorMatch && searchMatch;\n  });\n\n  const filteredLabServices = labDataApi.map((orderData: any) => ({\n    id: orderData.order?.id,\n    patient: orderData.patient,\n    orderId: orderData.order?.orderId || 'N/A',\n    price: orderData.order?.totalPrice || 0,\n    orderedDate: orderData.order?.orderedDate,\n    doctorId: orderData.order?.doctorId // Assuming doctorId is available in order data\n  })).filter(item => {\n    return labSearchQuery === \"\" ||\n      item.patient?.name?.toLowerCase().includes(labSearchQuery.toLowerCase()) ||\n      item.orderId?.toLowerCase().includes(labSearchQuery.toLowerCase());\n  });\n\n  const filteredDiagnosticServices = diagnosticDataApi.filter((item: any) => {\n    const serviceMatch = selectedDiagnosticService === \"all\" || item.serviceName === selectedDiagnosticService;\n    const searchMatch = diagnosticSearchQuery === \"\" ||\n      item.patient?.name?.toLowerCase().includes(diagnosticSearchQuery.toLowerCase()) ||\n      item.serviceName?.toLowerCase().includes(diagnosticSearchQuery.toLowerCase());\n    return serviceMatch && searchMatch;\n  });\n\n  // Combine inpatient services and admissions\n  const combinedInpatientData = [\n    // Map patient services for procedures, operations, misc\n    ...inpatientServicesApi.map((service: any) => ({\n      ...service,\n      type: 'service',\n      price: service.calculatedAmount || service.price || 0,\n      doctorId: service.doctorId // Assuming doctorId is available in service data\n    })),\n    // Map admissions data\n    ...admissionsDataApi.map((admission: any) => ({\n      ...admission,\n      type: 'admission',\n      patient: admission.patient,\n      serviceName: `Admission - ${admission.currentWardType || 'General Ward'}`,\n      scheduledDate: admission.admissionDate,\n      price: admission.totalCost || admission.dailyCost || 0,\n      doctorId: admission.doctorId // Assuming doctorId is available in admission data\n    }))\n  ];\n\n  // Filter inpatient services based on selected service type\n  const filteredInpatientServices = combinedInpatientData.filter((item: any) => {\n    let serviceMatch = true;\n    if (selectedService !== \"all\") {\n      if (item.type === 'admission') {\n        serviceMatch = selectedService === \"admission\";\n      } else {\n        // For patient services, check the service category/type\n        if (item.serviceType === 'procedure' || item.serviceName?.toLowerCase().includes('procedure')) {\n          serviceMatch = selectedService === \"procedures\";\n        } else if (item.serviceType === 'operation' || item.serviceName?.toLowerCase().includes('operation') || item.serviceName?.toLowerCase().includes('surgery')) {\n          serviceMatch = selectedService === \"operations\";\n        } else if (item.serviceType === 'misc' || item.category === 'misc' || item.serviceType === 'service') {\n          serviceMatch = selectedService === \"misc\";\n        } else {\n          serviceMatch = false;\n        }\n      }\n    }\n\n    const searchMatch = inpatientSearchQuery === \"\" ||\n      item.patient?.name?.toLowerCase().includes(inpatientSearchQuery.toLowerCase()) ||\n      item.serviceName?.toLowerCase().includes(inpatientSearchQuery.toLowerCase());\n\n    return serviceMatch && searchMatch;\n  });\n\n\n  const formatGenderAge = (patient: any) => {\n    if (!patient) return \"N/A\";\n    const gender = patient.gender === \"male\" ? \"M\" : patient.gender === \"female\" ? \"F\" : \"O\";\n    return `${gender}/${patient.age}`;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"N/A\";\n    const doctor = doctorsFromApi.find(d => d.id === doctorId);\n    return doctor ? doctor.name : \"N/A\";\n  };\n\n  const calculateOpdTotal = (data: any[]) => {\n    return data.reduce((sum, item) => sum + (item.consultationFee ?? item.doctorConsultationFee ?? 0), 0);\n  };\n\n  const calculateLabTotal = (data: any[]) => {\n    return data.reduce((sum, item) => sum + (item.price || 0), 0);\n  };\n\n  const calculateDiagnosticTotal = (data: any[]) => {\n    return data.reduce((sum, item) => sum + (item.price || 0), 0);\n  };\n\n  const calculateCreditTotal = (data: any[]) => {\n    return data.reduce((sum: number, bill: any) => sum + (bill.totalAmount || 0), 0);\n  };\n\n  const calculateInpatientTotal = (data: any[]) => {\n    return data.reduce((sum, item) => sum + (item.price || 0), 0);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <TopBar\n        title=\"Revenue and Payments\"\n        searchPlaceholder=\"Search revenue data...\"\n        showNotifications={true}\n        notificationCount={3}\n        showDateFilter={true}\n        fromDate={fromDate}\n        toDate={toDate}\n        onFromDateChange={setFromDate}\n        onToDateChange={setToDate}\n        onTodayClick={() => {\n          setFromDate(today);\n          setToDate(today);\n        }}\n      />\n\n      <div className=\"flex-1 p-6 overflow-hidden\">\n        {/* Main Navigation */}\n        <div className=\"mb-6\">\n          <div className=\"grid w-full max-w-md grid-cols-2 inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\">\n            <button\n              onClick={() => setMainActiveTab(\"revenue\")}\n              className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${mainActiveTab === \"revenue\" ? \"bg-background text-foreground shadow-sm\" : \"\"}`}\n              data-testid=\"tab-revenue\"\n            >\n              Revenue\n            </button>\n            <button\n              onClick={() => setMainActiveTab(\"payments\")}\n              className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${mainActiveTab === \"payments\" ? \"bg-background text-foreground shadow-sm\" : \"\"}`}\n              data-testid=\"tab-payments\"\n            >\n              Payments\n            </button>\n          </div>\n        </div>\n\n        {mainActiveTab === \"revenue\" && (\n          <div className=\"h-full\">\n            <Card className=\"flex-1 flex flex-col h-full\">\n              <CardHeader className=\"flex-shrink-0\">\n                <CardTitle>Revenue</CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex-1 flex flex-col overflow-hidden\">\n                <div className=\"w-full h-full flex flex-col\">\n                  <div className=\"grid w-full grid-cols-4 flex-shrink-0 inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\">\n                    <button\n                      onClick={() => setLeftActiveTab(\"opd\")}\n                      className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${leftActiveTab === \"opd\" ? \"bg-background text-foreground shadow-sm\" : \"\"}`}\n                      data-testid=\"tab-opd\"\n                    >\n                      OPD\n                    </button>\n                    <button\n                      onClick={() => setLeftActiveTab(\"lab\")}\n                      className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${leftActiveTab === \"lab\" ? \"bg-background text-foreground shadow-sm\" : \"\"}`}\n                      data-testid=\"tab-lab\"\n                    >\n                      Lab\n                    </button>\n                    <button\n                      onClick={() => setLeftActiveTab(\"diagnostic\")}\n                      className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${leftActiveTab === \"diagnostic\" ? \"bg-background text-foreground shadow-sm\" : \"\"}`}\n                      data-testid=\"tab-diagnostic\"\n                    >\n                      Diagnostic\n                    </button>\n                    <button\n                      onClick={() => setLeftActiveTab(\"inpatient\")}\n                      className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${leftActiveTab === \"inpatient\" ? \"bg-background text-foreground shadow-sm\" : \"\"}`}\n                      data-testid=\"tab-inpatient\"\n                    >\n                      Inpatient\n                    </button>\n                  </div>\n\n                  {leftActiveTab === \"opd\" && (\n                    <div className=\"flex-1 flex flex-col mt-2\">\n                      {/* Search and Doctor Filter */}\n                      <div className=\"flex items-center gap-2 flex-shrink-0 mb-2\">\n                        <Input\n                          placeholder=\"Search patients or doctors...\"\n                          value={opdSearchQuery}\n                          onChange={(e) => setOpdSearchQuery(e.target.value)}\n                          className=\"flex-1\"\n                          data-testid=\"search-opd\"\n                        />\n                        <Label htmlFor=\"doctor-filter\">Doctor:</Label>\n                        <Select value={selectedDoctor} onValueChange={setSelectedDoctor}>\n                          <SelectTrigger className=\"w-48\" data-testid=\"select-doctor\">\n                            <SelectValue placeholder=\"Select doctor\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Doctors</SelectItem>\n                            {doctorsFromApi.map((doctor: any) => (\n                              <SelectItem key={doctor.id} value={String(doctor.id)}>\n                                {doctor.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"border rounded-lg flex-1 flex flex-col min-h-0\">\n                        <div className=\"overflow-y-auto flex-1\" style={{ maxHeight: 'calc(100vh - 400px)' }}>\n                          <table className=\"w-full\">\n                            <thead className=\"border-b bg-background sticky top-0 z-10\">\n                              <tr>\n                                <th className=\"text-left font-medium bg-background w-10 pl-3 pr-0\">S.No</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Date</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Name</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Sex/Age</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Doctor</th>\n                                <th className=\"text-right p-3 font-medium bg-background\">Fees</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {filteredOpdServices.length === 0 ? (\n                                <tr>\n                                  <td colSpan={6} className=\"text-center py-4 text-muted-foreground\">\n                                    No OPD records found for the selected period\n                                  </td>\n                                </tr>\n                              ) : (\n                                filteredOpdServices.map((item: any, index: number) => (\n                                  <tr key={item.id} className=\"border-b hover:bg-muted/30\">\n                                    <td className=\"py-3 pl-3 pr-0\">{index + 1}</td>\n                                    <td className=\"p-3\">\n                                      {item.scheduledDate ? new Date(item.scheduledDate).toLocaleDateString('en-GB') : 'N/A'}\n                                    </td>\n                                    <td className=\"p-3\">{item.patientName || \"N/A\"}</td>\n                                    <td className=\"p-3\">{formatGenderAge({ name: item.patientName, age: item.patientAge, gender: item.patientGender })}</td>\n                                    <td className=\"p-3\">{item.doctorName || getDoctorName(item.doctorId)}</td>\n                                    <td className=\"p-3 text-right\" data-testid={`opd-fee-${index}`}>\n                                      {formatCurrency(item.consultationFee ?? item.doctorConsultationFee ?? 0)}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </table>\n                        </div>\n                        <div className=\"border-t p-2 bg-muted/30 flex-shrink-0\">\n                          <div className=\"flex justify-between font-semibold\">\n                            <span>Total:</span>\n                            <span data-testid=\"text-opd-total\">{formatCurrency(calculateOpdTotal(filteredOpdServices))}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {leftActiveTab === \"lab\" && (\n                    <div className=\"flex-1 flex flex-col mt-2\">\n                      {/* Search Filter */}\n                      <div className=\"flex items-center gap-2 flex-shrink-0 mb-2\">\n                        <Input\n                          placeholder=\"Search patients or tests...\"\n                          value={labSearchQuery}\n                          onChange={(e) => setLabSearchQuery(e.target.value)}\n                          className=\"w-full\"\n                          data-testid=\"search-lab\"\n                        />\n                      </div>\n\n                      <div className=\"border rounded-lg flex-1 flex flex-col min-h-0\">\n                        <div className=\"overflow-y-auto flex-1\" style={{ maxHeight: 'calc(100vh - 400px)' }}>\n                          <table className=\"w-full\">\n                            <thead className=\"border-b bg-background sticky top-0 z-10\">\n                              <tr>\n                                <th className=\"text-left font-medium bg-background w-10 pl-3 pr-0\">S.No</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Date</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Name</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Sex/Age</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Doctor</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Order ID</th>\n                                <th className=\"text-right p-3 font-medium bg-background\">Fees</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {filteredLabServices.length === 0 ? (\n                                <tr>\n                                  <td colSpan={7} className=\"text-center py-4 text-muted-foreground\">\n                                    No Lab records found for the selected period\n                                  </td>\n                                </tr>\n                              ) : (\n                                filteredLabServices.map((item: any, index: number) => (\n                                  <tr key={item.id} className=\"border-b hover:bg-muted/30\">\n                                    <td className=\"py-3 pl-3 pr-0\">{index + 1}</td>\n                                    <td className=\"p-3\">\n                                      {item.orderedDate ? new Date(item.orderedDate).toLocaleDateString('en-GB') : 'N/A'}\n                                    </td>\n                                    <td className=\"p-3\">{item.patient?.name || \"N/A\"}</td>\n                                    <td className=\"p-3\">{formatGenderAge(item.patient)}</td>\n                                    <td className=\"p-3\">{getDoctorName(item.doctorId)}</td>\n                                    <td className=\"p-3\">{item.orderId || \"N/A\"}</td>\n                                    <td className=\"p-3 text-right\" data-testid={`lab-fee-${index}`}>\n                                      {formatCurrency(item.price || 0)}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </table>\n                        </div>\n                        <div className=\"border-t p-2 bg-muted/30 flex-shrink-0\">\n                          <div className=\"flex justify-between font-semibold\">\n                            <span>Total:</span>\n                            <span data-testid=\"text-lab-total\">{formatCurrency(calculateLabTotal(filteredLabServices))}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {leftActiveTab === \"diagnostic\" && (\n                    <div className=\"flex-1 flex flex-col mt-2\">\n                      {/* Search and Service Filter for Diagnostic */}\n                      <div className=\"flex items-center gap-2 flex-shrink-0 mb-2\">\n                        <Input\n                          placeholder=\"Search patients or services...\"\n                          value={diagnosticSearchQuery}\n                          onChange={(e) => setDiagnosticSearchQuery(e.target.value)}\n                          className=\"flex-1\"\n                          data-testid=\"search-diagnostic\"\n                        />\n                        <Label htmlFor=\"diagnostic-service-filter\">Service:</Label>\n                        <Select value={selectedDiagnosticService} onValueChange={setSelectedDiagnosticService}>\n                          <SelectTrigger className=\"w-48\" data-testid=\"select-diagnostic-service\">\n                            <SelectValue placeholder=\"Select service\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Services</SelectItem>\n                            {Array.from(new Set(diagnosticDataApi.map((item: any) => item.serviceName).filter(Boolean))).sort().map((serviceName: string) => (\n                              <SelectItem key={serviceName} value={serviceName}>\n                                {serviceName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"border rounded-lg flex-1 flex flex-col min-h-0\">\n                        <div className=\"overflow-y-auto flex-1\" style={{ maxHeight: 'calc(100vh - 400px)' }}>\n                          <table className=\"w-full\">\n                            <thead className=\"border-b bg-background sticky top-0 z-10\">\n                              <tr>\n                                <th className=\"text-left font-medium bg-background w-10 pl-3 pr-0\">S.No</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Date</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Name</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Sex/Age</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Doctor</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Service</th>\n                                <th className=\"text-right p-3 font-medium bg-background\">Fees</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {filteredDiagnosticServices.length === 0 ? (\n                                <tr>\n                                  <td colSpan={7} className=\"text-center py-4 text-muted-foreground\">\n                                    No Diagnostic records found for the selected period\n                                  </td>\n                                </tr>\n                              ) : (\n                                filteredDiagnosticServices.map((item: any, index: number) => (\n                                  <tr key={item.id} className=\"border-b hover:bg-muted/30\">\n                                    <td className=\"py-3 pl-3 pr-0\">{index + 1}</td>\n                                    <td className=\"p-3\">\n                                      {item.scheduledDate ? new Date(item.scheduledDate).toLocaleDateString('en-GB') : 'N/A'}\n                                    </td>\n                                    <td className=\"p-3\">{item.patientName || \"N/A\"}</td>\n                                    <td className=\"p-3\">{formatGenderAge({ name: item.patientName, age: item.patientAge, gender: item.patientGender })}</td>\n                                    <td className=\"p-3\">{item.doctorName && item.doctorName.trim() !== '' ? item.doctorName : getDoctorName(item.doctorId)}</td>\n                                    <td className=\"p-3\">{item.serviceName || \"N/A\"}</td>\n                                    <td className=\"p-3 text-right\" data-testid={`diagnostic-fee-${index}`}>\n                                      {formatCurrency(item.price || 0)}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </table>\n                        </div>\n                        <div className=\"border-t p-2 bg-muted/30 flex-shrink-0\">\n                          <div className=\"flex justify-between font-semibold\">\n                            <span>Total:</span>\n                            <span data-testid=\"text-diagnostic-total\">{formatCurrency(calculateDiagnosticTotal(filteredDiagnosticServices))}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {leftActiveTab === \"inpatient\" && (\n                    <div className=\"flex-1 flex flex-col mt-2\">\n                      {/* Search and Service Filter for Inpatient */}\n                      <div className=\"flex items-center gap-2 flex-shrink-0 mb-2\">\n                        <Input\n                          placeholder=\"Search patients or services...\"\n                          value={inpatientSearchQuery}\n                          onChange={(e) => setInpatientSearchQuery(e.target.value)}\n                          className=\"flex-1\"\n                          data-testid=\"search-inpatient\"\n                        />\n                        <Label htmlFor=\"inpatient-service-filter\">Service:</Label>\n                        <Select value={selectedService} onValueChange={setSelectedService}>\n                          <SelectTrigger className=\"w-48\" data-testid=\"select-inpatient-service\">\n                            <SelectValue placeholder=\"Select service\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Services</SelectItem>\n                            <SelectItem value=\"procedures\">Medical Procedures</SelectItem>\n                            <SelectItem value=\"operations\">Surgical Operations</SelectItem>\n                            <SelectItem value=\"misc\">Miscellaneous Services</SelectItem>\n                            <SelectItem value=\"admission\">Admission Services</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"border rounded-lg flex-1 flex flex-col min-h-0\">\n                        <div className=\"overflow-y-auto flex-1\" style={{ maxHeight: 'calc(100vh - 400px)' }}>\n                          <table className=\"w-full\">\n                            <thead className=\"border-b bg-background sticky top-0 z-10\">\n                              <tr>\n                                <th className=\"text-left font-medium bg-background w-10 pl-3 pr-0\">S.No</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Date</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Name</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Sex/Age</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Doctor</th>\n                                <th className=\"text-left p-3 font-medium bg-background\">Service</th>\n                                <th className=\"text-right p-3 font-medium bg-background\">Fees</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {filteredInpatientServices.length === 0 ? (\n                                <tr>\n                                  <td colSpan={7} className=\"text-center py-4 text-muted-foreground\">\n                                    No Inpatient records found for the selected period\n                                  </td>\n                                </tr>\n                              ) : (\n                                filteredInpatientServices.map((item: any, index: number) => (\n                                  <tr key={item.id} className=\"border-b hover:bg-muted/30\">\n                                    <td className=\"py-3 pl-3 pr-0\">{index + 1}</td>\n                                    <td className=\"p-3\">\n                                      {item.type === 'admission' ? (item.admissionDate ? new Date(item.admissionDate).toLocaleDateString('en-GB') : 'N/A') :\n                                       (item.scheduledDate ? new Date(item.scheduledDate).toLocaleDateString('en-GB') : 'N/A')}\n                                    </td>\n                                    <td className=\"p-3\">{item.patient?.name || item.patientName || \"N/A\"}</td>\n                                    <td className=\"p-3\">{formatGenderAge(item.patient || { name: item.patientName, age: item.patientAge, gender: item.patientGender })}</td>\n                                    <td className=\"p-3\">{item.doctorName && item.doctorName.trim() !== '' ? item.doctorName : getDoctorName(item.doctorId)}</td>\n                                    <td className=\"p-3\">\n                                      {item.type === 'admission' ? 'Room Charges' : (item.serviceName || \"N/A\")}\n                                    </td>\n                                    <td className=\"p-3 text-right\" data-testid={`inpatient-fee-${index}`}>\n                                      {formatCurrency(item.price || item.totalAmount || 0)}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </table>\n                        </div>\n                        <div className=\"border-t p-2 bg-muted/30 flex-shrink-0\">\n                          <div className=\"flex justify-between font-semibold\">\n                            <span>Total:</span>\n                            <span data-testid=\"text-inpatient-total\">{formatCurrency(calculateInpatientTotal(filteredInpatientServices))}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {mainActiveTab === \"payments\" && (\n          <div className=\"h-full\">\n            <Card className=\"flex-1 flex flex-col h-full\">\n              <CardHeader className=\"flex-shrink-0\">\n                <CardTitle>Payment Transactions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex-1 flex flex-col overflow-hidden\">\n                <div className=\"border rounded-lg flex-1 flex flex-col min-h-0\">\n                  <div className=\"overflow-y-auto\" style={{ maxHeight: 'calc(100vh - 400px)' }}>\n                    <table className=\"w-full\">\n                      <thead className=\"border-b bg-background sticky top-0 z-10\">\n                          <tr>\n                            <th className=\"text-left font-medium bg-background w-10 pl-3 pr-0\">S.No</th>\n                            <th className=\"text-left p-3 font-medium bg-background\">Bill No.</th>\n                            <th className=\"text-left p-3 font-medium bg-background\">Patient</th>\n                            <th className=\"text-left p-3 font-medium bg-background\">Payment Method</th>\n                            <th className=\"text-right p-3 font-medium bg-background\">Amount</th>\n                          </tr>\n                        </thead>\n                      <tbody>\n                        {billsDataApi.length === 0 ? (\n                          <tr>\n                            <td colSpan={5} className=\"text-center py-4 text-muted-foreground\">\n                              No payment transactions found for the selected period\n                            </td>\n                          </tr>\n                        ) : (\n                          billsDataApi.map((bill: any, index: number) => (\n                            <tr key={bill.id} className=\"border-b hover:bg-muted/50\" data-testid={`row-credit-${index}`}>\n                              <td className=\"py-3 pl-3 pr-0\" data-testid={`text-credit-sno-${index}`}>{index + 1}</td>\n                              <td className=\"p-3\" data-testid={`text-credit-bill-${index}`}>{bill.billNumber}</td>\n                              <td className=\"p-3\" data-testid={`text-credit-patient-${index}`}>{bill.patient?.name || 'N/A'}</td>\n                              <td className=\"p-3 capitalize\" data-testid={`text-credit-method-${index}`}>{bill.paymentMethod}</td>\n                              <td className=\"p-3 text-right\" data-testid={`text-credit-amount-${index}`}>\n                                {formatCurrency(bill.totalAmount)}\n                              </td>\n                            </tr>\n                          ))\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                  <div className=\"border-t p-2 bg-muted/30 flex-shrink-0\">\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>Total:</span>\n                      <span data-testid=\"text-credit-total\">{formatCurrency(calculateCreditTotal(billsDataApi))}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":36230},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/fake-bill-dialog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Search, Plus, Trash2, Printer, X } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Patient } from '@shared/schema';\n\ninterface BillItem {\n  id: string;\n  date: string;\n  description: string;\n  quantity: number;\n  rate: number;\n  amount: number;\n}\n\ninterface FakeBillDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function FakeBillDialog({ isOpen, onClose }: FakeBillDialogProps) {\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showPatientSearch, setShowPatientSearch] = useState(false);\n  const [billItems, setBillItems] = useState<BillItem[]>([]);\n  const [paid, setPaid] = useState<number>(0);\n  const [discount, setDiscount] = useState<number>(0);\n\n  // Fetch patients for search\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n    enabled: isOpen,\n  });\n\n  // Fetch hospital settings for bill generation\n  const { data: hospitalSettings, isLoading: isHospitalSettingsLoading } = useQuery({\n    queryKey: [\"/api/settings/hospital\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/settings/hospital\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch hospital settings\");\n      }\n      return response.json();\n    },\n    enabled: isOpen,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Use hospital settings or fallback to defaults\n  const hospitalInfo = hospitalSettings ? {\n    name: hospitalSettings.name || \"MedCare Pro Hospital\",\n    address: hospitalSettings.address || \"123 Healthcare Street, Medical District, City - 123456\",\n    phone: hospitalSettings.phone || \"+91 98765 43210\",\n    email: hospitalSettings.email || \"info@medcarepro.com\",\n    registrationNumber: hospitalSettings.registrationNumber || \"REG123456\",\n    logoPath: hospitalSettings.logoPath || null\n  } : {\n    name: \"MedCare Pro Hospital\",\n    address: \"123 Healthcare Street, Medical District, City - 123456\",\n    phone: \"+91 98765 43210\",\n    email: \"info@medcarepro.com\",\n    registrationNumber: \"REG123456\",\n    logoPath: null\n  };\n\n  // Filter patients based on search query\n  const filteredPatients = patients.filter(patient =>\n    patient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.patientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.phone.includes(searchQuery)\n  );\n\n  // Calculate totals\n  const totalCharges = billItems.reduce((sum, item) => sum + item.amount, 0);\n  const balance = totalCharges - paid - discount;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const generateReceiptNumber = () => {\n    const today = new Date();\n    const yymmdd = today.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n    const timestamp = Date.now().toString().slice(-4);\n    return `${yymmdd}-FAKE-${timestamp}`;\n  };\n\n  const addBillItem = () => {\n    const newItem: BillItem = {\n      id: Date.now().toString(),\n      date: new Date().toISOString().split('T')[0],\n      description: '',\n      quantity: 1,\n      rate: 0,\n      amount: 0\n    };\n    setBillItems([...billItems, newItem]);\n  };\n\n  const updateBillItem = (id: string, field: keyof BillItem, value: string | number) => {\n    // Add basic validation for numeric fields\n    if (field === 'quantity' && typeof value === 'number') {\n      value = Math.max(1, value);\n    }\n    if (field === 'rate' && typeof value === 'number') {\n      value = Math.max(0, value);\n    }\n    if (field === 'amount' && typeof value === 'number') {\n      value = Math.max(0, value);\n    }\n\n    setBillItems(items =>\n      items.map(item => {\n        if (item.id === id) {\n          const updatedItem = { ...item, [field]: value };\n          // Auto-calculate amount when rate or quantity changes\n          if (field === 'rate' || field === 'quantity') {\n            const rate = field === 'rate' ? value as number : item.rate;\n            const quantity = field === 'quantity' ? value as number : item.quantity;\n            updatedItem.amount = rate * quantity;\n          }\n          return updatedItem;\n        }\n        return item;\n      })\n    );\n  };\n\n  const removeBillItem = (id: string) => {\n    setBillItems(items => items.filter(item => item.id !== id));\n  };\n\n  const selectPatient = (patient: Patient) => {\n    setSelectedPatient(patient);\n    setShowPatientSearch(false);\n    setSearchQuery('');\n  };\n\n  const handleClose = () => {\n    // Reset all data when closing\n    setSelectedPatient(null);\n    setSearchQuery('');\n    setShowPatientSearch(false);\n    setBillItems([]);\n    setPaid(0);\n    setDiscount(0);\n    onClose();\n  };\n\n  const handlePrint = () => {\n    if (!selectedPatient) return;\n\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const receiptNumber = generateReceiptNumber();\n\n    const escapeHtml = (text: string) => {\n      const div = document.createElement('div');\n      div.textContent = text;\n      return div.innerHTML;\n    };\n\n    const billHtml = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Comprehensive Financial Statement</title>\n          <style>\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n\n            body {\n              font-family: Arial, sans-serif;\n              line-height: 1.4;\n              color: #333;\n              background: white;\n              font-size: 14px;\n            }\n\n            @media print {\n              @page {\n                margin: 0;\n                size: A4;\n                @top-center {\n                  content: element(page-header);\n                }\n                @bottom-center {\n                  content: element(page-footer);\n                }\n              }\n\n              body {\n                -webkit-print-color-adjust: exact;\n                print-color-adjust: exact;\n              }\n            }\n\n            .bill {\n              max-width: 800px;\n              margin: 0 auto;\n              padding: 20px;\n              display: flex;\n              flex-direction: column;\n            }\n\n            @media print {\n              .bill {\n                margin: 80px 20px 60px 20px !important;\n                padding: 0 !important;\n                max-width: none !important;\n              }\n\n              .header {\n                display: none !important;\n              }\n\n              .footer {\n                display: none !important;\n              }\n\n              .page-header {\n                display: flex !important;\n              }\n\n              .page-footer {\n                display: block !important;\n              }\n\n              .bill-table {\n                page-break-inside: auto;\n              }\n\n              .bill-table tr {\n                page-break-inside: avoid;\n                page-break-after: auto;\n              }\n            }\n\n            /* Page Header for printing */\n            .page-header {\n              display: none;\n            }\n\n            /* Page Footer for printing */\n            .page-footer {\n              display: none;\n            }\n\n            .header {\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              margin-bottom: 20px;\n              padding-bottom: 15px;\n              border-bottom: 2px solid #333;\n            }\n\n            .hospital-info {\n              display: flex;\n              align-items: center;\n              gap: 15px;\n            }\n\n            .hospital-logo {\n              width: 60px;\n              height: 60px;\n              object-fit: contain;\n            }\n\n            .hospital-name {\n              font-size: 24px;\n              font-weight: bold;\n              color: #333;\n            }\n\n            .bill-title {\n              text-align: center;\n              font-size: 20px;\n              font-weight: bold;\n              margin: 10px 0;\n              text-transform: uppercase;\n              letter-spacing: 1px;\n              color: #2563eb;\n            }\n\n            .patient-info-box {\n              border: 2px solid #333;\n              padding: 15px;\n              margin: 8px 0;\n              background: #f9f9f9;\n            }\n\n            .patient-details {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n              gap: 10px;\n              margin-bottom: 10px;\n            }\n\n            .patient-detail {\n              font-weight: bold;\n            }\n\n            .bill-meta {\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n              margin-top: 10px;\n              font-size: 12px;\n            }\n\n            .bill-table {\n              width: 100%;\n              border-collapse: collapse;\n              margin: 15px 0;\n            }\n\n            .bill-table th,\n            .bill-table td {\n              border: 1px solid #333;\n              padding: 8px;\n              text-align: left;\n            }\n\n            .bill-table th {\n              background: #f0f0f0;\n              font-weight: bold;\n            }\n\n            .amount-cell {\n              text-align: right !important;\n            }\n\n            .positive-amount {\n              color: #dc2626;\n            }\n\n            .negative-amount {\n              color: #059669;\n              font-weight: bold;\n            }\n\n            .section-title {\n              font-size: 16px;\n              font-weight: bold;\n              margin: 15px 0 10px 0;\n              padding: 5px 10px;\n              background: #f3f4f6;\n              border-left: 4px solid #2563eb;\n            }\n\n            .signature-section {\n              margin: 35px 0;\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n            }\n\n            .signature-box {\n              text-align: center;\n              min-width: 200px;\n            }\n\n            .signature-line {\n              border-bottom: 1px solid #333;\n              margin-bottom: 5px;\n              height: 40px;\n            }\n\n            .footer {\n              margin-top: 8px;\n              padding-top: 8px;\n              border-top: 2px solid #333;\n              text-align: center;\n              font-size: 12px;\n              line-height: 1.5;\n            }\n\n            .bill-id {\n              margin-top: 15px;\n              font-family: monospace;\n              font-size: 10px;\n              color: #666;\n            }\n\n          </style>\n        </head>\n        <body>\n          <!-- Page Header for printing -->\n          <div class=\"page-header\">\n            <div class=\"hospital-info\">\n              ${hospitalInfo.logoPath ? `\n                <img src=\"${hospitalInfo.logoPath}\" alt=\"Hospital Logo\" class=\"hospital-logo\">\n              ` : ''}\n              <div class=\"hospital-name\">${escapeHtml(hospitalInfo.name)}</div>\n            </div>\n          </div>\n\n          <!-- Page Footer for printing -->\n          <div class=\"page-footer\">\n            <div class=\"footer-line\">Address: ${escapeHtml(hospitalInfo.address)}</div>\n            <div class=\"footer-line\">Phone: ${escapeHtml(hospitalInfo.phone)} | Email: ${escapeHtml(hospitalInfo.email)}${hospitalInfo.registrationNumber ? ` | Reg. No.: ${escapeHtml(hospitalInfo.registrationNumber)}` : ''}</div>\n          </div>\n\n          <div class=\"bill\">\n            <!-- Header -->\n            <div class=\"header\">\n              <div class=\"hospital-info\">\n                ${hospitalInfo.logoPath ? `\n                  <img src=\"${hospitalInfo.logoPath}\" alt=\"Hospital Logo\" class=\"hospital-logo\">\n                ` : ''}\n                <div class=\"hospital-name\">${escapeHtml(hospitalInfo.name)}</div>\n              </div>\n            </div>\n\n            <div class=\"bill-title\">Comprehensive Financial Statement</div>\n\n            <div class=\"patient-info-box\">\n              <div class=\"patient-details\">\n                <div class=\"patient-detail\">Name: ${escapeHtml(selectedPatient.name)}</div>\n                <div class=\"patient-detail\">Patient ID: ${escapeHtml(selectedPatient.patientId)}</div>\n                <div class=\"patient-detail\">Age: ${selectedPatient.age}</div>\n                <div class=\"patient-detail\">Gender: ${escapeHtml(selectedPatient.gender)}</div>\n                <div class=\"patient-detail\">Phone: ${escapeHtml(selectedPatient.phone)}</div>\n                ${selectedPatient.address ? `<div class=\"patient-detail\">Address: ${escapeHtml(selectedPatient.address)}</div>` : ''}\n              </div>\n              <div class=\"bill-meta\">\n                <span>Receipt Number: <strong>${receiptNumber}</strong></span>\n                <span>Generated: <strong>${new Date().toLocaleDateString('en-US', {\n                  year: 'numeric',\n                  month: 'short',\n                  day: 'numeric'\n                })}</strong></span>\n              </div>\n            </div>\n\n            <div class=\"section-title\">Service & Treatment Details</div>\n\n            <table class=\"bill-table\">\n              <thead>\n                <tr>\n                  <th style=\"width: 5%;\">#</th>\n                  <th style=\"width: 12%;\">Date</th>\n                  <th style=\"width: 43%;\">Description</th>\n                  <th style=\"width: 8%;\">Qty</th>\n                  <th style=\"width: 12%; text-align: right;\">Rate (₹)</th>\n                  <th style=\"width: 15%; text-align: right;\">Amount (₹)</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${billItems.map((item, index) => `\n                  <tr>\n                    <td>${index + 1}</td>\n                    <td>${formatDate(item.date)}</td>\n                    <td>${escapeHtml(item.description)}</td>\n                    <td style=\"text-align: center;\">${item.quantity}</td>\n                    <td class=\"amount-cell\" style=\"text-align: right;\">\n                      ₹${item.rate.toLocaleString()}\n                    </td>\n                    <td class=\"amount-cell positive-amount\">\n                      ₹${item.amount.toLocaleString()}\n                    </td>\n                  </tr>\n                `).join('')}\n\n                <tr style=\"border-top: 2px solid #333;\">\n                  <td colspan=\"5\" style=\"text-align: right; font-weight: bold; padding-top: 15px;\">TOTAL CHARGES:</td>\n                  <td class=\"amount-cell\" style=\"font-weight: bold; font-size: 16px; padding-top: 15px;\">₹${totalCharges.toLocaleString()}</td>\n                </tr>\n                <tr>\n                  <td colspan=\"5\" style=\"text-align: right; font-weight: bold;\">PAID:</td>\n                  <td class=\"amount-cell negative-amount\" style=\"font-weight: bold;\">-₹${paid.toLocaleString()}</td>\n                </tr>\n                <tr>\n                  <td colspan=\"5\" style=\"text-align: right; font-weight: bold;\">DISCOUNT:</td>\n                  <td class=\"amount-cell negative-amount\" style=\"font-weight: bold;\">-₹${discount.toLocaleString()}</td>\n                </tr>\n                <tr style=\"border-top: 2px solid #2563eb; background: #f0f9ff;\">\n                  <td colspan=\"5\" style=\"text-align: right; font-weight: bold; font-size: 18px; color: #2563eb; padding: 10px;\">BALANCE:</td>\n                  <td class=\"amount-cell ${balance >= 0 ? 'positive-amount' : 'negative-amount'}\" style=\"font-weight: bold; font-size: 18px; padding: 10px;\">\n                    ₹${balance.toLocaleString()}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n\n            <div class=\"signature-section\">\n              <div class=\"signature-box\">\n                <div class=\"signature-line\"></div>\n                <div style=\"font-weight: bold; font-size: 12px;\">Patient/Guardian Signature</div>\n              </div>\n              <div class=\"signature-box\">\n                <div class=\"signature-line\"></div>\n                <div style=\"font-weight: bold; font-size: 12px;\">Authorized Signatory</div>\n              </div>\n            </div>\n\n            <!-- Footer -->\n            <div class=\"footer\">\n              <div class=\"footer-line\">Address: ${escapeHtml(hospitalInfo.address)}</div>\n              <div class=\"footer-line\">Phone: ${escapeHtml(hospitalInfo.phone)} | Email: ${escapeHtml(hospitalInfo.email)}${hospitalInfo.registrationNumber ? ` | Reg. No.: ${escapeHtml(hospitalInfo.registrationNumber)}` : ''}</div>\n              <div class=\"bill-id\">\n                Bill ID: ${receiptNumber} | Generated on ${new Date().toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(billHtml);\n    printWindow.document.close();\n    printWindow.focus();\n\n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 250);\n  };\n\n  // Reset data when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedPatient(null);\n      setSearchQuery('');\n      setShowPatientSearch(false);\n      setBillItems([]);\n      setPaid(0);\n      setDiscount(0);\n    }\n  }, [isOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && handleClose()}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create Fake Bill</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Patient Search Section */}\n          <div className=\"border-2 border-border p-4 rounded-lg\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Label className=\"text-sm font-medium\">Patient:</Label>\n              {selectedPatient ? (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium\">{selectedPatient.name}</span>\n                  <span className=\"text-sm text-muted-foreground\">({selectedPatient.patientId})</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowPatientSearch(true)}\n                    data-testid=\"button-change-patient\"\n                  >\n                    Change Patient\n                  </Button>\n                </div>\n              ) : (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPatientSearch(true)}\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-select-patient\"\n                >\n                  <Search className=\"h-4 w-4\" />\n                  Select Patient\n                </Button>\n              )}\n            </div>\n\n            {/* Patient Search */}\n            {showPatientSearch && (\n              <div className=\"space-y-3\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search by name, patient ID, or phone...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-patient-search\"\n                  />\n                </div>\n                <div className=\"max-h-40 overflow-y-auto border rounded-md\">\n                  {filteredPatients.map((patient) => (\n                    <div\n                      key={patient.id}\n                      className=\"p-3 hover:bg-muted cursor-pointer border-b last:border-b-0\"\n                      onClick={() => selectPatient(patient)}\n                      data-testid={`patient-option-${patient.id}`}\n                    >\n                      <div className=\"font-medium\">{patient.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {patient.patientId} • {patient.phone} • Age: {patient.age}\n                      </div>\n                    </div>\n                  ))}\n                  {searchQuery && filteredPatients.length === 0 && (\n                    <div className=\"p-3 text-center text-muted-foreground\">\n                      No patients found matching your search.\n                    </div>\n                  )}\n                  {patients.length === 0 && !searchQuery && (\n                    <div className=\"p-3 text-center text-muted-foreground\">\n                      No patients available. Please register patients first.\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Bill Items Section */}\n          {selectedPatient && (\n            <>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-semibold\">Service & Treatment Details</Label>\n                  <Button\n                    onClick={addBillItem}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-bill-item\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    Add Item\n                  </Button>\n                </div>\n\n                {/* Bill Items Table */}\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"p-3 text-left w-20\">Date</th>\n                        <th className=\"p-3 text-left\">Description</th>\n                        <th className=\"p-3 text-left w-24\">Qty</th>\n                        <th className=\"p-3 text-left w-24\">Rate (₹)</th>\n                        <th className=\"p-3 text-left w-28\">Amount (₹)</th>\n                        <th className=\"p-3 text-center w-16\">Action</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {billItems.map((item, index) => (\n                        <tr key={item.id} className=\"border-t\">\n                          <td className=\"p-3\">\n                            <Input\n                              type=\"date\"\n                              value={item.date}\n                              onChange={(e) => updateBillItem(item.id, 'date', e.target.value)}\n                              className=\"w-full\"\n                              data-testid={`input-date-${index}`}\n                            />\n                          </td>\n                          <td className=\"p-3\">\n                            <Input\n                              placeholder=\"Enter description\"\n                              value={item.description}\n                              onChange={(e) => updateBillItem(item.id, 'description', e.target.value)}\n                              className=\"w-full\"\n                              data-testid={`input-description-${index}`}\n                            />\n                          </td>\n                          <td className=\"p-3\">\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              value={item.quantity}\n                              onChange={(e) => updateBillItem(item.id, 'quantity', parseInt(e.target.value) || 1)}\n                              className=\"w-full\"\n                              data-testid={`input-quantity-${index}`}\n                            />\n                          </td>\n                          <td className=\"p-3\">\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              step=\"0.01\"\n                              value={item.rate}\n                              onChange={(e) => updateBillItem(item.id, 'rate', parseFloat(e.target.value) || 0)}\n                              className=\"w-full\"\n                              data-testid={`input-rate-${index}`}\n                            />\n                          </td>\n                          <td className=\"p-3\">\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              step=\"0.01\"\n                              value={item.amount}\n                              readOnly\n                              className=\"w-full bg-gray-50\"\n                              data-testid={`input-amount-${index}`}\n                            />\n                          </td>\n                          <td className=\"p-3 text-center\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => removeBillItem(item.id)}\n                              className=\"text-destructive hover:text-destructive\"\n                              data-testid={`button-remove-${index}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                      {billItems.length === 0 && (\n                        <tr>\n                          <td colSpan={6} className=\"p-8 text-center text-muted-foreground\">\n                            No items added. Click \"Add Item\" to start building the bill.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n\n              {/* Summary Section */}\n              <div className=\"border-2 border-border p-4 rounded-lg bg-muted/30\">\n                <Label className=\"text-lg font-semibold mb-4 block\">Bill Summary</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"total-charges\" className=\"text-sm font-medium\">Total Charges:</Label>\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-charges\">\n                      {formatCurrency(totalCharges)}\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"paid\" className=\"text-sm font-medium\">Paid:</Label>\n                    <Input\n                      id=\"paid\"\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      value={paid}\n                      onChange={(e) => setPaid(Math.max(0, parseFloat(e.target.value) || 0))}\n                      className=\"mt-1\"\n                      data-testid=\"input-paid\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"discount\" className=\"text-sm font-medium\">Discount:</Label>\n                    <Input\n                      id=\"discount\"\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      value={discount}\n                      onChange={(e) => setDiscount(Math.max(0, parseFloat(e.target.value) || 0))}\n                      className=\"mt-1\"\n                      data-testid=\"input-discount\"\n                    />\n                  </div>\n                </div>\n                <div className=\"mt-4 pt-4 border-t\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-lg font-semibold\">Balance:</Label>\n                    <div className={`text-2xl font-bold ${balance >= 0 ? 'text-red-600' : 'text-green-600'}`} data-testid=\"balance\">\n                      {formatCurrency(balance)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-end gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={handleClose}\n                  data-testid=\"button-close\"\n                >\n                  Close\n                </Button>\n                <Button\n                  onClick={handlePrint}\n                  className=\"flex items-center gap-2\"\n                  disabled={!selectedPatient || billItems.length === 0 || isHospitalSettingsLoading}\n                  data-testid=\"button-print-fake-bill\"\n                >\n                  <Printer className=\"h-4 w-4\" />\n                  {isHospitalSettingsLoading ? \"Loading...\" : \"Print/Download PDF\"}\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":29556},"client/src/pages/diagnostics.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Calendar, \n  Clock, \n  Search, \n  User, \n  Stethoscope,\n  Phone,\n  MapPin,\n  Filter,\n  Eye,\n  Heart\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { PatientService, Patient, Doctor, Service } from \"@shared/schema\";\n\nexport default function Diagnostics() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedDoctor, setSelectedDoctor] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedService, setSelectedService] = useState<string>(\"all\");\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n\n  // Fetch all patient services\n  const { data: patientServices = [], isLoading } = useQuery({\n    queryKey: [\"/api/patient-services\"],\n    refetchInterval: 5000, // Refetch every 5 seconds\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Fetch patients for service details\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Fetch doctors for filtering\n  const { data: doctors = [] } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Fetch all services to get diagnostic services\n  const { data: allServices = [] } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  // Filter diagnostic services (radiology category or services with diagnostic-related names)\n  const diagnosticServices = useMemo(() => {\n    return allServices.filter(service => \n      service.category.toLowerCase() === 'radiology' || \n      service.category.toLowerCase() === 'diagnostic services' ||\n      service.category.toLowerCase() === 'diagnostics' ||\n      ['ecg', 'usg', 'x-ray', 'xray', 'ultrasound', 'electrocardiogram', 'endoscopy'].some(keyword => \n        service.name.toLowerCase().includes(keyword)\n      )\n    );\n  }, [allServices]);\n\n  // Filter patient services to only diagnostic ones\n  const diagnosticPatientServices = useMemo(() => {\n    return (patientServices as PatientService[]).filter((service: PatientService) => {\n      // Check if the service name or type matches diagnostic services\n      return diagnosticServices.some(diagService => \n        diagService.name.toLowerCase() === service.serviceName.toLowerCase() ||\n        service.serviceType === 'xray' ||\n        service.serviceType === 'ecg' ||\n        service.serviceType === 'ultrasound' ||\n        service.serviceType === 'diagnostic'\n      );\n    });\n  }, [patientServices, diagnosticServices]);\n\n  // Group diagnostic services by service type\n  const diagnosticsByService = useMemo(() => {\n    const filtered = diagnosticPatientServices.filter((service: PatientService) => {\n      const patient = patients.find(p => p.id === service.patientId);\n\n      const matchesSearch = searchQuery === \"\" || \n        service.serviceId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.patientId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.phone?.includes(searchQuery) ||\n        service.serviceName?.toLowerCase().includes(searchQuery.toLowerCase());\n\n      const matchesDoctor = selectedDoctor === \"all\" || service.doctorId === selectedDoctor || \n        (selectedDoctor === \"external\" && !service.doctorId);\n      \n      const matchesStatus = selectedStatus === \"all\" || service.status === selectedStatus;\n      \n      const matchesService = selectedService === \"all\" || \n        service.serviceName.toLowerCase() === selectedService.toLowerCase();\n      \n      const matchesDate = selectedDate === \"\" || service.scheduledDate === selectedDate;\n\n      return matchesSearch && matchesDoctor && matchesStatus && matchesService && matchesDate;\n    });\n\n    const grouped = filtered.reduce((groups: Record<string, PatientService[]>, service: PatientService) => {\n      const serviceName = service.serviceName;\n      if (!groups[serviceName]) {\n        groups[serviceName] = [];\n      }\n      groups[serviceName].push(service);\n      return groups;\n    }, {} as Record<string, PatientService[]>);\n\n    // Sort services within each group by scheduled date (most recent first)\n    Object.values(grouped).forEach((services: PatientService[]) => {\n      services.sort((a: PatientService, b: PatientService) => {\n        const dateA = new Date(`${a.scheduledDate} ${a.scheduledTime}`).getTime();\n        const dateB = new Date(`${b.scheduledDate} ${b.scheduledTime}`).getTime();\n        return dateB - dateA; // Most recent first\n      });\n    });\n\n    return grouped;\n  }, [diagnosticPatientServices, patients, searchQuery, selectedDoctor, selectedStatus, selectedService, selectedDate]);\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"External Patient\";\n    const doctor = doctors.find(d => d.id === doctorId);\n    return doctor ? `Dr. ${doctor.name}` : \"Unknown Doctor\";\n  };\n\n  const getPatientDetails = (patientId: string) => {\n    return patients.find(p => p.id === patientId);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in-progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'scheduled':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusDisplayName = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return 'Ordered';\n      case 'in-progress':\n        return 'In Progress';\n      case 'completed':\n        return 'Completed Diagnosis';\n      default:\n        return status.charAt(0).toUpperCase() + status.slice(1);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatTime = (timeString: string) => {\n    if (!timeString) return \"N/A\";\n    return timeString;\n  };\n\n  const totalDiagnosticsCount = diagnosticPatientServices.length;\n  // Use Indian timezone (UTC+5:30) for consistent date calculation\n  const now = new Date();\n  const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n  const today = indianTime.getFullYear() + '-' + \n    String(indianTime.getMonth() + 1).padStart(2, '0') + '-' + \n    String(indianTime.getDate()).padStart(2, '0');\n  const todayDiagnosticsCount = diagnosticPatientServices.filter((service: PatientService) => \n    service.scheduledDate === today\n  ).length;\n\n  // Get unique service names for the service filter\n  const uniqueServiceNames = useMemo(() => {\n    const serviceNames = diagnosticServices.map(service => service.name);\n    return Array.from(new Set(serviceNames)).sort();\n  }, [diagnosticServices]);\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <p>Loading diagnostics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Diagnostics</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and view all diagnostic services by type\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <Calendar className=\"w-4 h-4 mr-1\" />\n            Today: {todayDiagnosticsCount}\n          </Badge>\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <Heart className=\"w-4 h-4 mr-1\" />\n            Total: {totalDiagnosticsCount}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by service ID, name, patient ID, or phone...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-diagnostics\"\n              />\n            </div>\n\n            <Select value={selectedDoctor} onValueChange={setSelectedDoctor}>\n              <SelectTrigger data-testid=\"filter-doctor\">\n                <SelectValue placeholder=\"Filter by doctor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Doctors</SelectItem>\n                {doctors.map((doctor: Doctor) => (\n                  <SelectItem key={doctor.id} value={doctor.id}>\n                    {doctor.name} - {doctor.specialization}\n                  </SelectItem>\n                ))}\n                <SelectItem value=\"external\">External Patients</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"filter-status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"scheduled\">Ordered</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed Diagnosis</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedService} onValueChange={setSelectedService}>\n              <SelectTrigger data-testid=\"filter-service\">\n                <SelectValue placeholder=\"Filter by service\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Services</SelectItem>\n                {uniqueServiceNames.map((serviceName) => (\n                  <SelectItem key={serviceName} value={serviceName}>\n                    {serviceName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              data-testid=\"filter-date\"\n            />\n\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedDoctor(\"all\");\n                setSelectedStatus(\"all\");\n                setSelectedService(\"all\");\n                setSelectedDate(\"\");\n              }}\n              data-testid=\"clear-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Clear\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Diagnostic Services by Type */}\n      {Object.keys(diagnosticsByService).length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Stethoscope className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No diagnostic services found matching your criteria.</p>\n            <Link href=\"/services\">\n              <Button className=\"mt-4\">Manage Services</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(diagnosticsByService).map(([serviceName, services]) => (\n            <Card key={serviceName}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Stethoscope className=\"w-5 h-5\" />\n                  {serviceName}\n                  <Badge variant=\"outline\">{services.length} services</Badge>\n                </CardTitle>\n                <CardDescription>\n                  Diagnostic services for {serviceName.toLowerCase()}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {services.map((service: PatientService) => {\n                    const patient = getPatientDetails(service.patientId);\n                    const scheduledDate = new Date(service.scheduledDate);\n\n                    return (\n                      <div\n                        key={service.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <User className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">\n                                {patient?.name || \"Unknown Patient\"}\n                              </span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {service.serviceId}\n                              </Badge>\n                            </div>\n\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {formatDate(service.scheduledDate)}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                {formatTime(service.scheduledTime)}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Stethoscope className=\"w-3 h-3\" />\n                                {getDoctorName(service.doctorId)}\n                              </div>\n                              {patient?.phone && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {patient.phone}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-3\">\n                          <Badge \n                            className={getStatusColor(service.status)}\n                            variant=\"secondary\"\n                            data-testid={`status-${service.id}`}\n                          >\n                            {getStatusDisplayName(service.status)}\n                          </Badge>\n\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">₹{service.price}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Service Fee\n                            </div>\n                          </div>\n\n                          <Link href={`/patients/${service.patientId}`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`view-patient-${service.id}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":16250},"client/src/pages/bed-occupancy.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { \n  Bed, \n  Building2,\n  Users,\n  Activity\n} from \"lucide-react\";\n\ninterface OccupyingPatient {\n  name: string;\n  patientId: string;\n}\n\ninterface Room {\n  id: string;\n  roomNumber: string;\n  floor: string;\n  building: string;\n  capacity: number;\n  isOccupied: boolean;\n  isActive: boolean;\n  notes: string;\n  occupyingPatient: OccupyingPatient | null;\n}\n\ninterface RoomType {\n  id: string;\n  name: string;\n  category: string;\n  dailyCost: number;\n  totalBeds: number;\n  occupiedBeds: number;\n  isActive: boolean;\n  rooms: Room[];\n}\n\nexport default function BedOccupancyPage() {\n  const { data: bedOccupancy = [], isLoading } = useQuery<RoomType[]>({\n    queryKey: [\"/api/inpatients/bed-occupancy\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"icu\":\n        return <Activity className=\"h-4 w-4\" />;\n      case \"emergency\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"ward\":\n        return <Building2 className=\"h-4 w-4\" />;\n      default:\n        return <Bed className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"icu\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"emergency\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"ward\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"room\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Bed Occupancy\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"space-y-6\">\n        <TopBar title=\"Bed Occupancy\" />\n        \n        <div className=\"p-6\">\n          {/* Legend */}\n          <div className=\"flex items-center gap-6 mb-6 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-rose-500 rounded\"></div>\n              <span className=\"text-sm font-medium\">Occupied</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-emerald-500 rounded\"></div>\n              <span className=\"text-sm font-medium\">Available</span>\n            </div>\n          </div>\n\n          {/* Room Types and Rooms */}\n          <div className=\"space-y-6\">\n            {bedOccupancy.map((roomType) => (\n              <Card key={roomType.id}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {getCategoryIcon(roomType.category)}\n                    {roomType.name}\n                    <Badge className={getCategoryColor(roomType.category)} variant=\"secondary\">\n                      {roomType.category}\n                    </Badge>\n                  </CardTitle>\n                  <CardDescription>\n                    {roomType.occupiedBeds || 0} of {roomType.totalBeds || 0} beds occupied • ₹{roomType.dailyCost.toLocaleString()} per day\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {roomType.rooms.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n                      {roomType.rooms\n                        .sort((a, b) => {\n                          // Split room numbers into parts for proper sorting\n                          const parseRoomNumber = (roomNumber: string) => {\n                            // Match pattern like \"NR-B-1\" or \"GW-01\"\n                            const match = roomNumber.match(/^(.+?)(\\d+)$/);\n                            if (match) {\n                              return {\n                                prefix: match[1], // \"NR-B-\" or \"GW-\"\n                                number: parseInt(match[2], 10) // 1 or 1\n                              };\n                            }\n                            return { prefix: roomNumber, number: 0 };\n                          };\n                          \n                          const roomA = parseRoomNumber(a.roomNumber);\n                          const roomB = parseRoomNumber(b.roomNumber);\n                          \n                          // First sort by prefix alphabetically\n                          const prefixComparison = roomA.prefix.localeCompare(roomB.prefix);\n                          if (prefixComparison !== 0) {\n                            return prefixComparison;\n                          }\n                          \n                          // Then sort by number numerically\n                          return roomA.number - roomB.number;\n                        })\n                        .map((room) => (\n                        <Tooltip key={room.id}>\n                          <TooltipTrigger asChild>\n                            <Card \n                              className={`cursor-pointer transition-all hover:shadow-md ${\n                                room.isOccupied \n                                  ? 'bg-rose-500 border-rose-600 hover:bg-rose-600 text-white' \n                                  : 'bg-emerald-500 border-emerald-600 hover:bg-emerald-600 text-white'\n                              }`}\n                            >\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex items-center justify-center\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Bed className=\"h-4 w-4 text-white\" />\n                                    <span className=\"font-medium text-sm text-white\">\n                                      {room.roomNumber}\n                                    </span>\n                                  </div>\n                                </div>\n                                {room.floor && (\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\n                                    Floor {room.floor}\n                                  </p>\n                                )}\n                              </CardContent>\n                            </Card>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <div className=\"p-2\">\n                              <p className=\"font-medium\">Room {room.roomNumber}</p>\n                              {room.floor && <p className=\"text-sm\">Floor: {room.floor}</p>}\n                              {room.building && <p className=\"text-sm\">Building: {room.building}</p>}\n                              <p className=\"text-sm\">Capacity: {room.capacity}</p>\n                              {room.isOccupied && room.occupyingPatient && (\n                                <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                                  <p className=\"text-sm font-medium\">\n                                    {room.occupyingPatient.name}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    ID: {room.occupyingPatient.patientId}\n                                  </p>\n                                </div>\n                              )}\n                              {room.notes && (\n                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                  {room.notes}\n                                </p>\n                              )}\n                            </div>\n                          </TooltipContent>\n                        </Tooltip>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-6\">\n                      <Bed className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-muted-foreground\">No rooms configured for this room type</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {bedOccupancy.length === 0 && (\n            <Card>\n              <CardContent className=\"p-12\">\n                <div className=\"text-center\">\n                  <Building2 className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Room Types Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    No room types are configured. Please add room types in the Services section.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":9605},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/lib/auth.ts":{"content":"\nexport interface User {\n  id: string;\n  username: string;\n  fullName: string;\n  role?: string; // For backward compatibility\n  roles?: string[]; // Array of roles from server\n}\n\ninterface LoginResponse {\n  token: string;\n  user: User;\n}\n\nconst API_BASE = \"\";\n\nexport const authApi = {\n  async login(username: string, password: string): Promise<LoginResponse> {\n    const response = await fetch(`${API_BASE}/api/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Invalid credentials\");\n    }\n\n    return response.json();\n  },\n\n  async getMe(): Promise<User> {\n    const token = tokenStorage.get();\n    const response = await fetch(`${API_BASE}/api/users/me`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to get user info\");\n    }\n\n    return response.json();\n  },\n};\n\nexport const tokenStorage = {\n  get(): string | null {\n    return localStorage.getItem(\"hospital_token\");\n  },\n\n  set(token: string): void {\n    localStorage.setItem(\"hospital_token\", token);\n  },\n\n  remove(): void {\n    localStorage.removeItem(\"hospital_token\");\n  },\n};\n","size_bytes":1294},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { sqliteTable, text, integer, real, check } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication and role management\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  roles: text(\"roles\").notNull(), // JSON array: [\"super_user\", \"admin\", \"doctor\", \"receptionist\", \"billing_staff\"]\n  primaryRole: text(\"primary_role\").notNull(), // Primary role for display purposes\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Doctors table\nexport const doctors = sqliteTable(\"doctors\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  userId: text(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  specialization: text(\"specialization\").notNull(),\n  qualification: text(\"qualification\").notNull(),\n  consultationFee: real(\"consultation_fee\").notNull(),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patients table\nexport const patients = sqliteTable(\"patients\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  patientId: text(\"patient_id\").notNull().unique(), // PAT-2024-001 format\n  name: text(\"name\").notNull(),\n  age: integer(\"age\").notNull(),\n  gender: text(\"gender\").notNull(), // male, female, other\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\"),\n  email: text(\"email\"),\n  emergencyContact: text(\"emergency_contact\"),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient visits for OPD and Inpatient tracking\nexport const patientVisits = sqliteTable(\"patient_visits\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  visitId: text(\"visit_id\").notNull().unique(), // VIS-2024-001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  doctorId: text(\"doctor_id\").notNull().references(() => doctors.id),\n  visitType: text(\"visit_type\").notNull(), // opd, inpatient\n  visitDate: text(\"visit_date\").notNull(),\n  scheduledDate: text(\"scheduled_date\"), // for scheduled OPD appointments\n  scheduledTime: text(\"scheduled_time\").default(\"09:00\"), // scheduled appointment time\n  symptoms: text(\"symptoms\"),\n  diagnosis: text(\"diagnosis\"),\n  prescription: text(\"prescription\"),\n  consultationFee: real(\"consultation_fee\").default(0), // fee for this visit\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, active, completed, cancelled\n  admissionDate: text(\"admission_date\"), // for inpatients\n  dischargeDate: text(\"discharge_date\"), // for inpatients\n  roomNumber: text(\"room_number\"), // for inpatients\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Services/procedures that can be billed\nexport const services = sqliteTable(\"services\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(), // consultation, pathology, radiology, procedure\n  price: real(\"price\").notNull(),\n  description: text(\"description\"),\n  billingType: text(\"billing_type\").notNull().default(\"per_instance\"), // per_instance, per_24_hours, per_hour, composite\n  billingParameters: text(\"billing_parameters\"), // JSON string for additional parameters\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Bills/Invoices\nexport const bills = sqliteTable(\"bills\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  billNumber: text(\"bill_number\").notNull().unique(), // BILL-2024-0001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  visitId: text(\"visit_id\").references(() => patientVisits.id),\n  subtotal: real(\"subtotal\").notNull(),\n  taxAmount: real(\"tax_amount\").notNull(),\n  discountAmount: real(\"discount_amount\").notNull().default(0),\n  totalAmount: real(\"total_amount\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull(), // cash, card, upi, insurance\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, partial\n  paidAmount: real(\"paid_amount\").notNull().default(0),\n  createdBy: text(\"created_by\").notNull().references(() => users.id),\n  billDate: text(\"bill_date\").notNull(),\n  dueDate: text(\"due_date\"),\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Bill items/line items\nexport const billItems = sqliteTable(\"bill_items\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  billId: text(\"bill_id\").notNull().references(() => bills.id),\n  serviceId: text(\"service_id\").notNull().references(() => services.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  unitPrice: real(\"unit_price\").notNull(),\n  totalPrice: real(\"total_price\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Pathology orders (one order can have multiple tests)\nexport const pathologyOrders = sqliteTable(\"pathology_orders\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  orderId: text(\"order_id\").notNull().unique(), // LAB-2024-001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  visitId: text(\"visit_id\").references(() => patientVisits.id),\n  doctorId: text(\"doctor_id\").references(() => doctors.id), // Optional for external patients\n  status: text(\"status\").notNull().default(\"ordered\"), // ordered, collected, processing, completed\n  orderedDate: text(\"ordered_date\").notNull(),\n  collectedDate: text(\"collected_date\"),\n  reportDate: text(\"report_date\"),\n  remarks: text(\"remarks\"),\n  totalPrice: real(\"total_price\").notNull().default(0),\n  receiptNumber: text(\"receipt_number\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Individual pathology tests within an order\nexport const pathologyTests = sqliteTable(\"pathology_tests\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  orderId: text(\"order_id\").notNull().references(() => pathologyOrders.id),\n  testName: text(\"test_name\").notNull(),\n  testCategory: text(\"test_category\").notNull(),\n  status: text(\"status\").notNull().default(\"ordered\"), // ordered, collected, processing, completed\n  results: text(\"results\"),\n  normalRange: text(\"normal_range\"),\n  price: real(\"price\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient Services (OPD, Lab tests, X-ray, ECG, etc.)\nexport const patientServices = sqliteTable(\"patient_services\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  serviceId: text(\"service_id\").notNull(),\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  visitId: text(\"visit_id\").references(() => patientVisits.id),\n  doctorId: text(\"doctor_id\").references(() => doctors.id),\n  serviceType: text(\"service_type\").notNull(), // opd, labtest, xray, ecg, consultation, emergency\n  serviceName: text(\"service_name\").notNull(),\n  orderId: text(\"order_id\"), // SRV-2025-001 format for grouping related services\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, in-progress, completed, cancelled\n  scheduledDate: text(\"scheduled_date\").notNull(),\n  scheduledTime: text(\"scheduled_time\").notNull().default(\"09:00\"),\n  completedDate: text(\"completed_date\"),\n  notes: text(\"notes\"),\n  price: real(\"price\").notNull().default(0),\n  billingType: text(\"billing_type\").notNull().default(\"per_instance\"),\n  billingQuantity: real(\"billing_quantity\").default(1), // hours, days, km, etc.\n  billingParameters: text(\"billing_parameters\"), // JSON for composite billing\n  calculatedAmount: real(\"calculated_amount\").notNull().default(0),\n  receiptNumber: text(\"receipt_number\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient Admissions - One record per admission episode\nexport const admissions = sqliteTable(\"admissions\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  admissionId: text(\"admission_id\").notNull().unique(),\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  doctorId: text(\"doctor_id\").references(() => doctors.id),\n  currentRoomId: text(\"current_room_id\"),\n  currentWardType: text(\"current_ward_type\"),\n  currentRoomNumber: text(\"current_room_number\"),\n  admissionDate: text(\"admission_date\").notNull(),\n  dischargeDate: text(\"discharge_date\"),\n  status: text(\"status\").notNull().default(\"admitted\"), // admitted, discharged\n  reason: text(\"reason\"),\n  diagnosis: text(\"diagnosis\"),\n  notes: text(\"notes\"),\n  dailyCost: real(\"daily_cost\").notNull().default(0),\n  totalCost: real(\"total_cost\").notNull().default(0),\n  initialDeposit: real(\"initial_deposit\").notNull().default(0),\n  additionalPayments: real(\"additional_payments\").notNull().default(0),\n  totalDiscount: real(\"total_discount\").notNull().default(0),\n  lastPaymentDate: text(\"last_payment_date\"),\n  lastPaymentAmount: real(\"last_payment_amount\").default(0),\n  lastDiscountDate: text(\"last_discount_date\"),\n  lastDiscountAmount: real(\"last_discount_amount\").default(0),\n  lastDiscountReason: text(\"last_discount_reason\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Admission Events - History log for each admission episode\nexport const admissionEvents = sqliteTable(\"admission_events\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  admissionId: text(\"admission_id\").notNull().references(() => admissions.id),\n  eventType: text(\"event_type\").notNull(), // 'admit', 'room_change', 'discharge'\n  eventTime: text(\"event_time\").notNull().default(sql`(datetime('now'))`),\n  roomId: text(\"room_id\"),\n  roomNumber: text(\"room_number\"),\n  wardType: text(\"ward_type\"),\n  notes: text(\"notes\"),\n  receiptNumber: text(\"receipt_number\"),\n  createdBy: text(\"created_by\").references(() => users.id),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Hospital settings for system configuration\nexport const hospitalSettings = sqliteTable(\"hospital_settings\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull().default(\"MedCare Pro Hospital\"),\n  address: text(\"address\").notNull().default(\"123 Healthcare Street, Medical District, City - 123456\"),\n  phone: text(\"phone\").notNull().default(\"+91 98765 43210\"),\n  email: text(\"email\").notNull().default(\"info@medcarepro.com\"),\n  registrationNumber: text(\"registration_number\"),\n  logoPath: text(\"logo_path\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// System settings for application configuration\nexport const systemSettings = sqliteTable(\"system_settings\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  emailNotifications: integer(\"email_notifications\", { mode: \"boolean\" }).notNull().default(false),\n  smsNotifications: integer(\"sms_notifications\", { mode: \"boolean\" }).notNull().default(false),\n  autoBackup: integer(\"auto_backup\", { mode: \"boolean\" }).notNull().default(true),\n  auditLogging: integer(\"audit_logging\", { mode: \"boolean\" }).notNull().default(true),\n  backupFrequency: text(\"backup_frequency\").notNull().default(\"daily\"), // daily, weekly, monthly\n  backupTime: text(\"backup_time\").notNull().default(\"02:00\"), // HH:MM format\n  lastBackupDate: text(\"last_backup_date\"),\n  backupRetentionDays: integer(\"backup_retention_days\").notNull().default(30),\n  timezone: text(\"timezone\").notNull().default(\"UTC\"), // Timezone for all timestamps (e.g., \"Asia/Kolkata\", \"America/New_York\")\n  timezoneOffset: text(\"timezone_offset\").notNull().default(\"+00:00\"), // Offset in ±HH:MM format\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Backup logs to track backup history\nexport const backupLogs = sqliteTable(\"backup_logs\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  backupId: text(\"backup_id\").notNull().unique(), // BACKUP-2024-001 format\n  status: text(\"status\").notNull(), // running, completed, failed\n  backupType: text(\"backup_type\").notNull().default(\"auto\"), // auto, manual\n  filePath: text(\"file_path\"),\n  fileSize: integer(\"file_size\"),\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\"),\n  errorMessage: text(\"error_message\"),\n  tableCount: integer(\"table_count\"),\n  recordCount: integer(\"record_count\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Audit log for tracking user actions\nexport const auditLog = sqliteTable(\"audit_log\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  userId: text(\"user_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(), // create, update, delete, view\n  tableName: text(\"table_name\").notNull(),\n  recordId: text(\"record_id\").notNull(),\n  oldValues: text(\"old_values\"), // JSON string of old values\n  newValues: text(\"new_values\"), // JSON string of new values\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Room/Service Management\nexport const roomTypes = sqliteTable(\"room_types\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull().unique(), // \"General Ward\", \"Private Room\", \"ICU\", \"Emergency\"\n  category: text(\"category\").notNull(), // \"ward\", \"icu\", \"emergency\", \"ot\", \"room\"\n  dailyCost: real(\"daily_cost\").notNull().default(0),\n  totalBeds: integer(\"total_beds\").notNull().default(0),\n  occupiedBeds: integer(\"occupied_beds\").notNull().default(0),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\nexport const rooms = sqliteTable(\"rooms\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  roomNumber: text(\"room_number\").notNull().unique(),\n  roomTypeId: text(\"room_type_id\").notNull().references(() => roomTypes.id),\n  floor: text(\"floor\"),\n  building: text(\"building\"),\n  capacity: integer(\"capacity\").notNull().default(1),\n  isOccupied: integer(\"is_occupied\", { mode: \"boolean\" }).notNull().default(false),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Pathology Categories for dynamic test management\nexport const pathologyCategories = sqliteTable(\"pathology_categories\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Dynamic Pathology Tests\nexport const dynamicPathologyTests = sqliteTable(\"dynamic_pathology_tests\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  categoryId: text(\"category_id\").notNull().references(() => pathologyCategories.id),\n  testName: text(\"test_name\").notNull(),\n  price: real(\"price\").notNull().default(0),\n  normalRange: text(\"normal_range\"),\n  description: text(\"description\"),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Service Categories for dynamic category management\nexport const serviceCategories = sqliteTable(\"service_categories\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull().unique(),\n  label: text(\"label\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\").notNull().default(\"Settings\"), // Lucide icon name\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  isSystem: integer(\"is_system\", { mode: \"boolean\" }).notNull().default(false), // true for predefined categories\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient Payments - Independent of admissions\nexport const patientPayments = sqliteTable(\"patient_payments\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  paymentId: text(\"payment_id\").notNull().unique(), // PAY-2024-001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  amount: real(\"amount\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull(), // cash, card, upi, bank_transfer\n  paymentDate: text(\"payment_date\").notNull(),\n  reason: text(\"reason\"), // Optional reason/notes for payment\n  receiptNumber: text(\"receipt_number\"),\n  processedBy: text(\"processed_by\").notNull().references(() => users.id),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient Discounts - Independent of admissions\nexport const patientDiscounts = sqliteTable(\"patient_discounts\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  discountId: text(\"discount_id\").notNull().unique(), // DISC-2024-001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  amount: real(\"amount\").notNull(),\n  discountType: text(\"discount_type\").notNull().default(\"manual\"), // manual, insurance, senior_citizen, employee\n  reason: text(\"reason\").notNull(),\n  discountDate: text(\"discount_date\").notNull(),\n  approvedBy: text(\"approved_by\").notNull().references(() => users.id),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Activities table for tracking user actions\nexport const activities = sqliteTable(\"activities\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  userId: text(\"user_id\").references(() => users.id),\n  activityType: text(\"activity_type\").notNull(), // e.g., 'login', 'create_patient', 'update_bill'\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  entityId: text(\"entity_id\"),\n  entityType: text(\"entity_type\"),\n  metadata: text(\"metadata\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Doctor Service Rates - Maps doctors to services with commission/salary rates\nexport const doctorServiceRates = sqliteTable(\"doctor_service_rates\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  doctorId: text(\"doctor_id\").notNull().references(() => doctors.id),\n  serviceId: text(\"service_id\").notNull().references(() => services.id),\n  serviceName: text(\"service_name\").notNull(), // Denormalized for easier querying\n  serviceCategory: text(\"service_category\").notNull(), // opd, diagnostics, lab_tests, admission, pathology\n  rateType: text(\"rate_type\").notNull().default(\"per_instance\"), // per_instance, percentage, fixed_daily\n  rateAmount: real(\"rate_amount\").notNull(), // Amount or percentage\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  notes: text(\"notes\"),\n  createdBy: text(\"created_by\").notNull().references(() => users.id),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Doctor Earnings - Tracks what doctors have earned based on services performed\nexport const doctorEarnings = sqliteTable(\"doctor_earnings\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  earningId: text(\"earning_id\").notNull().unique(), // EARN-2024-001 format\n  doctorId: text(\"doctor_id\").notNull().references(() => doctors.id),\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  serviceId: text(\"service_id\").notNull().references(() => services.id),\n  patientServiceId: text(\"patient_service_id\").references(() => patientServices.id), // Link to actual service performed\n  serviceName: text(\"service_name\").notNull(),\n  serviceCategory: text(\"service_category\").notNull(),\n  serviceDate: text(\"service_date\").notNull(),\n  rateType: text(\"rate_type\").notNull(), // per_instance, percentage, fixed_daily\n  rateAmount: real(\"rate_amount\").notNull(), // The rate applied\n  servicePrice: real(\"service_price\").notNull(), // Original service price\n  earnedAmount: real(\"earned_amount\").notNull(), // Calculated earning amount\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Doctor Payments - Tracks payments made to doctors\nexport const doctorPayments = sqliteTable(\"doctor_payments\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  paymentId: text(\"payment_id\").notNull().unique(), // DPAY-2024-001 format\n  doctorId: text(\"doctor_id\").notNull().references(() => doctors.id),\n  paymentDate: text(\"payment_date\").notNull(),\n  totalAmount: real(\"total_amount\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull(), // cash, bank_transfer, cheque\n  earningsIncluded: text(\"earnings_included\").notNull(), // JSON array of earning IDs\n  startDate: text(\"start_date\").notNull(), // Period start date\n  endDate: text(\"end_date\").notNull(), // Period end date\n  description: text(\"description\"),\n  processedBy: text(\"processed_by\").notNull().references(() => users.id),\n  receiptNumber: text(\"receipt_number\"),\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  primaryRole: true,\n}).extend({\n  roles: z.array(z.enum([\"super_user\", \"admin\", \"doctor\", \"receptionist\", \"billing_staff\"])).min(1, \"At least one role is required\"),\n});\n\n// Profile update schema - for users to edit their own profile\nexport const updateProfileSchema = z.object({\n  username: z.string().min(1, \"Username is required\").trim(),\n  fullName: z.string().min(1, \"Full name is required\").trim(),\n  password: z.string().min(8, \"Password must be at least 8 characters\").optional(),\n}).partial().refine((data) => {\n  // At least one field must be provided\n  return Object.keys(data).length > 0;\n}, { message: \"At least one field must be provided\" });\n\nexport const insertDoctorSchema = createInsertSchema(doctors).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  patientId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  name: z.string().min(1, \"Name is required\"),\n  age: z.number().min(1, \"Age must be greater than 0\").max(150, \"Invalid age\"),\n  gender: z.string().min(1, \"Gender is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n});\n\nexport const insertPatientVisitSchema = createInsertSchema(patientVisits).omit({\n  id: true,\n  visitId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  billingType: z.enum([\"per_instance\", \"per_24_hours\", \"per_hour\", \"composite\", \"variable\", \"per_date\"]).default(\"per_instance\"),\n  billingParameters: z.string().nullable().optional(),\n});\n\nexport const insertBillSchema = createInsertSchema(bills).omit({\n  id: true,\n  billNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBillItemSchema = createInsertSchema(billItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPathologyOrderSchema = createInsertSchema(pathologyOrders).omit({\n  id: true,\n  orderId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientServiceSchema = createInsertSchema(patientServices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  patientId: z.string().min(1, \"Patient ID is required\"),\n  serviceType: z.string().min(1, \"Service type is required\"),\n  serviceName: z.string().min(1, \"Service name is required\"),\n  scheduledDate: z.string().min(1, \"Scheduled date is required\"),\n  scheduledTime: z.string().min(1, \"Scheduled time is required\"),\n  billingType: z.enum([\"per_instance\", \"per_24_hours\", \"per_hour\", \"composite\", \"variable\", \"per_date\"]).default(\"per_instance\"),\n  billingQuantity: z.number().optional().default(1),\n  billingParameters: z.string().optional(),\n  calculatedAmount: z.number().default(0),\n  receiptNumber: z.string().optional(),\n});\n\nexport const insertAdmissionSchema = createInsertSchema(admissions).omit({\n  id: true,\n  admissionId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  patientId: z.string().min(1, \"Patient is required\"),\n  doctorId: z.string().min(1, \"Doctor is required\"),\n  currentWardType: z.string().min(1, \"Ward type is required\"),\n  admissionDate: z.string().min(1, \"Admission date is required\"),\n  reason: z.string().optional(),\n  dailyCost: z.number().min(0, \"Daily cost must be non-negative\"),\n  initialDeposit: z.number().min(0, \"Initial deposit must be non-negative\").optional(),\n});\n\nexport const insertAdmissionEventSchema = createInsertSchema(admissionEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPathologyTestSchema = createInsertSchema(pathologyTests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPathologyCategorySchema = createInsertSchema(pathologyCategories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDynamicPathologyTestSchema = createInsertSchema(dynamicPathologyTests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceCategorySchema = createInsertSchema(serviceCategories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientPaymentSchema = createInsertSchema(patientPayments).omit({\n  id: true,\n  paymentId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  patientId: z.string().min(1, \"Patient ID is required\"),\n  amount: z.number().min(0.01, \"Payment amount must be greater than 0\"),\n  paymentMethod: z.enum([\"cash\", \"card\", \"upi\", \"bank_transfer\"], {\n    errorMap: () => ({ message: \"Payment method must be cash, card, upi, or bank_transfer\" })\n  }),\n  paymentDate: z.string().min(1, \"Payment date is required\"),\n  processedBy: z.string().min(1, \"Processed by user ID is required\"),\n});\n\nexport const insertPatientDiscountSchema = createInsertSchema(patientDiscounts).omit({\n  id: true,\n  discountId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  patientId: z.string().min(1, \"Patient ID is required\"),\n  amount: z.number().min(0.01, \"Discount amount must be greater than 0\"),\n  discountType: z.enum([\"manual\", \"insurance\", \"senior_citizen\", \"employee\"], {\n    errorMap: () => ({ message: \"Discount type must be manual, insurance, senior_citizen, or employee\" })\n  }),\n  reason: z.string().min(1, \"Discount reason is required\"),\n  discountDate: z.string().min(1, \"Discount date is required\"),\n  approvedBy: z.string().min(1, \"Approved by user ID is required\"),\n});\n\nexport const insertRoomTypeSchema = createInsertSchema(roomTypes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHospitalSettingsSchema = createInsertSchema(hospitalSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSystemSettingsSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBackupLogSchema = createInsertSchema(backupLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDoctorServiceRateSchema = createInsertSchema(doctorServiceRates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  doctorId: z.string().min(1, \"Doctor ID is required\"),\n  serviceId: z.string().min(1, \"Service ID is required\"),\n  serviceName: z.string().min(1, \"Service name is required\"),\n  serviceCategory: z.enum([\"opd\", \"diagnostics\", \"lab_tests\", \"admission\", \"pathology\"], {\n    errorMap: () => ({ message: \"Service category must be opd, diagnostics, lab_tests, admission, or pathology\" })\n  }),\n  rateType: z.enum([\"amount\", \"percentage\", \"fixed_daily\"], {\n    errorMap: () => ({ message: \"Rate type must be amount, percentage, or fixed_daily\" })\n  }).default(\"amount\"),\n  rateAmount: z.number().min(0, \"Rate amount must be non-negative\"),\n  createdBy: z.string().min(1, \"Created by user ID is required\"),\n});\n\nexport const insertDoctorEarningSchema = createInsertSchema(doctorEarnings).omit({\n  id: true,\n  earningId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  doctorId: z.string().min(1, \"Doctor ID is required\"),\n  patientId: z.string().min(1, \"Patient ID is required\"),\n  serviceId: z.string().min(1, \"Service ID is required\"),\n  serviceName: z.string().min(1, \"Service name is required\"),\n  serviceCategory: z.string().min(1, \"Service category is required\"),\n  serviceDate: z.string().min(1, \"Service date is required\"),\n  rateType: z.enum([\"amount\", \"percentage\", \"fixed_daily\"]),\n  rateAmount: z.number().min(0, \"Rate amount must be non-negative\"),\n  servicePrice: z.number().min(0, \"Service price must be non-negative\"),\n  earnedAmount: z.number().min(0, \"Earned amount must be non-negative\"),\n});\n\nexport const insertDoctorPaymentSchema = createInsertSchema(doctorPayments).omit({\n  id: true,\n  paymentId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  doctorId: z.string().min(1, \"Doctor ID is required\"),\n  paymentDate: z.string().min(1, \"Payment date is required\"),\n  totalAmount: z.number().min(0.01, \"Total amount must be greater than 0\"),\n  paymentMethod: z.enum([\"cash\", \"bank_transfer\", \"cheque\"], {\n    errorMap: () => ({ message: \"Payment method must be cash, bank_transfer, or cheque\" })\n  }),\n  earningsIncluded: z.string().min(1, \"Earnings included is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  processedBy: z.string().min(1, \"Processed by user ID is required\"),\n});\n\n// Types\nexport type User = typeof users.$inferSelect & {\n  rolesArray?: string[]; // Helper property for parsed roles\n};\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type InsertDoctor = z.infer<typeof insertDoctorSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type PatientVisit = typeof patientVisits.$inferSelect;\nexport type InsertPatientVisit = z.infer<typeof insertPatientVisitSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Bill = typeof bills.$inferSelect;\nexport type InsertBill = z.infer<typeof insertBillSchema>;\nexport type BillItem = typeof billItems.$inferSelect;\nexport type InsertBillItem = z.infer<typeof insertBillItemSchema>;\nexport type PathologyOrder = typeof pathologyOrders.$inferSelect;\nexport type InsertPathologyOrder = z.infer<typeof insertPathologyOrderSchema>;\nexport type PathologyTest = typeof pathologyTests.$inferSelect;\nexport type InsertPathologyTest = z.infer<typeof insertPathologyTestSchema>;\nexport type PatientService = typeof patientServices.$inferSelect;\nexport type InsertPatientService = z.infer<typeof insertPatientServiceSchema>;\nexport type Admission = typeof admissions.$inferSelect;\nexport type InsertAdmission = z.infer<typeof insertAdmissionSchema>;\nexport type AdmissionEvent = typeof admissionEvents.$inferSelect;\nexport type InsertAdmissionEvent = z.infer<typeof insertAdmissionEventSchema>;\nexport type RoomType = typeof roomTypes.$inferSelect;\nexport type InsertRoomType = z.infer<typeof insertRoomTypeSchema>;\nexport type Room = typeof rooms.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type HospitalSettings = typeof hospitalSettings.$inferSelect;\nexport type InsertHospitalSettings = z.infer<typeof insertHospitalSettingsSchema>;\nexport type SystemSettings = typeof systemSettings.$inferSelect;\nexport type InsertSystemSettings = z.infer<typeof insertSystemSettingsSchema>;\nexport type BackupLog = typeof backupLogs.$inferSelect;\nexport type PatientPayment = typeof patientPayments.$inferSelect;\nexport type InsertPatientPayment = z.infer<typeof insertPatientPaymentSchema>;\nexport type PatientDiscount = typeof patientDiscounts.$inferSelect;\nexport type InsertPatientDiscount = z.infer<typeof insertPatientDiscountSchema>;\nexport type InsertBackupLog = z.infer<typeof insertBackupLogSchema>;\nexport type PathologyCategory = typeof pathologyCategories.$inferSelect;\nexport type InsertPathologyCategory = z.infer<typeof insertPathologyCategorySchema>;\nexport type DynamicPathologyTest = typeof dynamicPathologyTests.$inferSelect;\nexport type InsertDynamicPathologyTest = z.infer<typeof insertDynamicPathologyTestSchema>;\nexport type ServiceCategory = typeof serviceCategories.$inferSelect;\nexport type InsertServiceCategory = z.infer<typeof insertServiceCategorySchema>;\n\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\n\nexport type DoctorServiceRate = typeof doctorServiceRates.$inferSelect;\nexport type InsertDoctorServiceRate = z.infer<typeof insertDoctorServiceRateSchema>;\n\nexport type DoctorEarning = typeof doctorEarnings.$inferSelect;\nexport type InsertDoctorEarning = z.infer<typeof insertDoctorEarningSchema>;\n\nexport type DoctorPayment = typeof doctorPayments.$inferSelect;\nexport type InsertDoctorPayment = z.infer<typeof insertDoctorPaymentSchema>;\n\n\n// Update schema for PATCH (partial updates allowed)\nexport const updatePatientSchema = insertPatientSchema.partial();\nexport type UpdatePatient = z.infer<typeof updatePatientSchema>;\n\n/**\n * Calculate admission stay duration in days using consistent logic\n * This ensures frontend and backend calculations always match\n */\nexport function calculateStayDays(admissionDate: string | Date, endDate?: string | Date): number {\n  let startDate: Date;\n\n  // Parse admission date using the same robust logic as frontend\n  if (typeof admissionDate === 'string') {\n    const dateStr = admissionDate;\n\n    // Detect SQL datetime format \"YYYY-MM-DD HH:MM:SS\" or \"YYYY-MM-DD HH:MM\"\n    if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}(:\\d{2})?$/.test(dateStr)) {\n      // Parse SQL format as local time to avoid timezone conversion\n      const match = dateStr.match(/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2})(?::(\\d{2}))?$/);\n      if (match) {\n        const [, year, month, day, hour, minute, second = '0'] = match;\n        startDate = new Date(\n          parseInt(year),\n          parseInt(month) - 1, // Month is 0-indexed\n          parseInt(day),\n          parseInt(hour),\n          parseInt(minute),\n          parseInt(second)\n        );\n      } else {\n        startDate = new Date(dateStr);\n      }\n    } else {\n      // Fallback to default Date parsing for other formats\n      startDate = new Date(dateStr);\n    }\n  } else {\n    startDate = admissionDate;\n  }\n\n  const end = endDate ? new Date(endDate) : new Date();\n\n  // Guard against invalid dates\n  if (isNaN(startDate.getTime()) || isNaN(end.getTime())) {\n    return 1; // Fallback to minimum 1 day for invalid dates\n  }\n\n  // Use direct millisecond calculation to avoid floating-point precision issues\n  const timeDiff = end.getTime() - startDate.getTime();\n  return Math.max(1, Math.ceil(timeDiff / (1000 * 3600 * 24)));\n}","size_bytes":38094},"client/src/lib/time.ts":{"content":"/**\n * Utility for parsing and formatting timestamps using local system time\n */\n\ninterface ParsedTimestamp {\n  hasTime: boolean;\n  date: Date | null;\n  display: string;\n}\n\n/**\n * Parse various timestamp formats and return display string using local system time\n */\nexport function parseTimestamp(raw: any, hospitalTimeZone?: string): ParsedTimestamp {\n  if (!raw) return { hasTime: false, date: null, display: \"N/A\" };\n  \n  const rawStr = String(raw);\n  let date: Date | null = null;\n  let hasTime = false;\n\n  // Detect format and parse appropriately\n  if (detectISO(rawStr)) {\n    // ISO format - parse normally and let browser handle timezone\n    date = new Date(rawStr);\n    hasTime = true;\n  } else if (detectSQLDateTime(rawStr)) {\n    // SQL format \"YYYY-MM-DD HH:MM:SS\" - parse as local time\n    date = parseSQLDateTime(rawStr);\n    hasTime = true;\n  } else if (detectDateOnly(rawStr)) {\n    // Date only \"YYYY-MM-DD\" - no time info\n    const [year, month, day] = rawStr.split('-').map(Number);\n    date = new Date(year, month - 1, day);\n    hasTime = false;\n  } else if (detectNumeric(rawStr)) {\n    // Numeric timestamp\n    const num = Number(rawStr);\n    const timestamp = num > 1e12 ? num : num * 1000; // Convert seconds to ms if needed\n    date = new Date(timestamp);\n    hasTime = true;\n  } else {\n    // Fallback to default Date parsing\n    date = new Date(rawStr);\n    hasTime = rawStr.includes(':') || rawStr.includes('T');\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return { hasTime: false, date: null, display: \"N/A\" };\n  }\n\n  // Format the date appropriately using local system time\n  const display = formatDateTime(date, hasTime);\n  \n  return { hasTime, date, display };\n}\n\nfunction detectISO(str: string): boolean {\n  return /T.*[Z\\+\\-]/.test(str) || /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}/.test(str);\n}\n\nfunction detectSQLDateTime(str: string): boolean {\n  return /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}(:\\d{2})?$/.test(str);\n}\n\nfunction detectDateOnly(str: string): boolean {\n  return /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n}\n\nfunction detectNumeric(str: string): boolean {\n  return /^\\d+$/.test(str);\n}\n\nfunction parseSQLDateTime(sqlStr: string): Date {\n  // Parse \"YYYY-MM-DD HH:MM:SS\" as local time\n  const match = sqlStr.match(/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2})(?::(\\d{2}))?$/);\n  if (!match) return new Date(sqlStr); // Fallback\n  \n  const [, year, month, day, hour, minute, second = '0'] = match;\n  return new Date(\n    parseInt(year),\n    parseInt(month) - 1, // Month is 0-indexed\n    parseInt(day),\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  );\n}\n\n/**\n * Calculate admission stay duration in days using consistent logic\n * Uses the same calculation as backend billing to ensure consistency\n */\nexport function calcStayDays(admissionDate: string | Date, endDate?: string | Date): number {\n  let startDate: Date;\n  \n  // Parse admission date using existing detection logic for robustness\n  if (typeof admissionDate === 'string') {\n    if (detectSQLDateTime(admissionDate)) {\n      startDate = parseSQLDateTime(admissionDate);\n    } else if (detectISO(admissionDate)) {\n      startDate = new Date(admissionDate);\n    } else {\n      startDate = new Date(admissionDate);\n    }\n  } else {\n    startDate = admissionDate;\n  }\n  \n  const end = endDate ? new Date(endDate) : new Date();\n  \n  // Guard against invalid dates\n  if (isNaN(startDate.getTime()) || isNaN(end.getTime())) {\n    return 1; // Fallback to minimum 1 day for invalid dates\n  }\n  \n  // Use the same calculation as backend billing system\n  const timeDiff = end.getTime() - startDate.getTime();\n  return Math.max(1, Math.ceil(timeDiff / (1000 * 3600 * 24)));\n}\n\nfunction formatDateTime(date: Date, hasTime: boolean): string {\n  const options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n    // No timeZone specified - uses local system timezone automatically\n  };\n\n  if (hasTime) {\n    options.hour = 'numeric';\n    options.minute = '2-digit';\n    options.hour12 = true;\n  }\n\n  const formatter = new Intl.DateTimeFormat('en-US', options);\n  const formatted = formatter.format(date);\n\n  if (hasTime) {\n    // Split date and time parts for better styling\n    const parts = formatted.split(' at ');\n    if (parts.length === 2) {\n      return parts.join(' at ');\n    } else {\n      // Fallback: try to split on comma or last space before AM/PM\n      const match = formatted.match(/^(.+?)(\\s+\\d{1,2}:\\d{2}\\s*[AP]M)$/i);\n      if (match) {\n        return `${match[1]} at ${match[2].trim()}`;\n      }\n    }\n  }\n\n  return formatted;\n}","size_bytes":4578},"client/src/components/billing/bill-summary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Save, Loader2 } from \"lucide-react\";\nimport type { Service } from \"@shared/schema\";\n\ninterface BillItem {\n  serviceId: string;\n  service: Service;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\ninterface BillTotals {\n  subtotal: number;\n  taxAmount: number;\n  discountAmount: number;\n  totalAmount: number;\n}\n\ninterface BillSummaryProps {\n  billItems: BillItem[];\n  paymentMethod: \"cash\" | \"card\" | \"upi\" | \"insurance\";\n  onPaymentMethodChange: (method: \"cash\" | \"card\" | \"upi\" | \"insurance\") => void;\n  onGenerateBill: () => void;\n  isGenerating: boolean;\n  recentBills: any[];\n  totals: BillTotals;\n}\n\nexport default function BillSummary({\n  billItems,\n  paymentMethod,\n  onPaymentMethodChange,\n  onGenerateBill,\n  isGenerating,\n  recentBills,\n  totals,\n}: BillSummaryProps) {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-orange-100 text-orange-800';\n      case 'partial':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Bill Summary */}\n      <Card className=\"shadow-sm\">\n        <CardHeader>\n          <CardTitle>Bill Summary</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\" data-testid=\"bill-totals\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Subtotal:</span>\n              <span className=\"font-medium\" data-testid=\"subtotal\">\n                {formatCurrency(totals.subtotal)}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Tax (18%):</span>\n              <span className=\"font-medium\" data-testid=\"tax-amount\">\n                {formatCurrency(totals.taxAmount)}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Discount:</span>\n              <span className=\"font-medium text-green-600\" data-testid=\"discount-amount\">\n                -{formatCurrency(totals.discountAmount)}\n              </span>\n            </div>\n            <hr className=\"border-border\" />\n            <div className=\"flex justify-between\">\n              <span className=\"font-semibold\">Total Amount:</span>\n              <span className=\"font-bold text-xl text-medical-blue\" data-testid=\"total-amount\">\n                {formatCurrency(totals.totalAmount)}\n              </span>\n            </div>\n          </div>\n          \n          {/* Payment Method */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">Payment Method</label>\n            <Select value={paymentMethod} onValueChange={onPaymentMethodChange}>\n              <SelectTrigger data-testid=\"payment-method-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"cash\">Cash</SelectItem>\n                <SelectItem value=\"card\">Card</SelectItem>\n                <SelectItem value=\"upi\">UPI</SelectItem>\n                <SelectItem value=\"insurance\">Insurance</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <Button\n              onClick={onGenerateBill}\n              className=\"w-full bg-medical-blue hover:bg-medical-blue/90\"\n              disabled={isGenerating || billItems.length === 0}\n              data-testid=\"button-generate-bill\"\n            >\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Generate Bill\n                </>\n              )}\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              disabled={billItems.length === 0}\n              data-testid=\"button-save-draft\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save as Draft\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Bills */}\n      <Card className=\"shadow-sm\">\n        <CardHeader>\n          <CardTitle>Recent Bills</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recentBills.length === 0 ? (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              <p>No recent bills</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\" data-testid=\"recent-bills\">\n              {recentBills.map((billData: any) => {\n                const bill = billData.bill || billData;\n                const patient = billData.patient;\n                \n                return (\n                  <div\n                    key={bill.id}\n                    className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                    data-testid={`recent-bill-${bill.id}`}\n                  >\n                    <div>\n                      <p className=\"font-medium text-sm\" data-testid={`bill-number-${bill.id}`}>\n                        {bill.billNumber}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`bill-patient-${bill.id}`}>\n                        {patient?.name || \"Unknown Patient\"}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium text-sm\" data-testid={`bill-amount-${bill.id}`}>\n                        {formatCurrency(bill.totalAmount)}\n                      </p>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusColor(bill.paymentStatus)}\n                        data-testid={`bill-status-${bill.id}`}\n                      >\n                        {bill.paymentStatus}\n                      </Badge>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n          \n          <Button\n            variant=\"ghost\"\n            className=\"w-full mt-4 text-medical-blue hover:text-medical-blue/90\"\n            data-testid=\"button-view-all-bills\"\n          >\n            View All Bills\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7200},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/smart-costing.ts":{"content":"\nexport interface BillingCalculationInput {\n  service: {\n    id: string;\n    name: string;\n    price: number;\n    billingType: 'per_instance' | 'per_24_hours' | 'per_hour' | 'composite' | 'variable' | 'per_date';\n    billingParameters?: string;\n  };\n  quantity?: number;\n  startDateTime?: string;\n  endDateTime?: string;\n  customParameters?: Record<string, any>;\n}\n\nexport interface BillingCalculationResult {\n  totalAmount: number;\n  billingQuantity: number;\n  breakdown: {\n    unitPrice: number;\n    quantity: number;\n    subtotal: number;\n    description: string;\n  }[];\n  billingDetails: string;\n}\n\nexport class SmartCostingEngine {\n  \n  /**\n   * Calculate billing amount based on service type and parameters\n   */\n  static calculateBilling(input: BillingCalculationInput): BillingCalculationResult {\n    const { service, quantity = 1, startDateTime, endDateTime, customParameters = {} } = input;\n    \n    switch (service.billingType) {\n      case 'per_instance':\n        return this.calculatePerInstance(service, quantity);\n        \n      case 'per_24_hours':\n        return this.calculatePer24Hours(service, startDateTime, endDateTime);\n        \n      case 'per_hour':\n        return this.calculatePerHour(service, quantity);\n        \n      case 'composite':\n        return this.calculateComposite(service, customParameters);\n        \n      case 'variable':\n        return this.calculateVariable(service, customParameters);\n        \n      case 'per_date':\n        return this.calculatePerDate(service, quantity);\n        \n      default:\n        return this.calculatePerInstance(service, quantity);\n    }\n  }\n\n  /**\n   * Per-instance billing (default for diagnostics, procedures)\n   */\n  private static calculatePerInstance(service: any, quantity: number): BillingCalculationResult {\n    const totalAmount = service.price * quantity;\n    \n    return {\n      totalAmount,\n      billingQuantity: quantity,\n      breakdown: [{\n        unitPrice: service.price,\n        quantity,\n        subtotal: totalAmount,\n        description: `${service.name} (${quantity} instance${quantity > 1 ? 's' : ''})`\n      }],\n      billingDetails: `Per instance billing: ₹${service.price} × ${quantity} = ₹${totalAmount}`\n    };\n  }\n\n  /**\n   * Per-24-hours billing (room charges)\n   */\n  private static calculatePer24Hours(service: any, startDateTime?: string, endDateTime?: string): BillingCalculationResult {\n    if (!startDateTime) {\n      // Default to 1 day if no dates provided\n      return {\n        totalAmount: service.price,\n        billingQuantity: 1,\n        breakdown: [{\n          unitPrice: service.price,\n          quantity: 1,\n          subtotal: service.price,\n          description: `${service.name} (1 day)`\n        }],\n        billingDetails: `Daily rate: ₹${service.price} × 1 day = ₹${service.price}`\n      };\n    }\n\n    const startDate = new Date(startDateTime);\n    const endDate = endDateTime ? new Date(endDateTime) : new Date();\n    \n    // Calculate number of 24-hour periods\n    // Any part of a day counts as a full day (as per requirement)\n    const timeDiff = endDate.getTime() - startDate.getTime();\n    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    const billingDays = Math.max(1, daysDiff); // Minimum 1 day\n    \n    const totalAmount = service.price * billingDays;\n    \n    return {\n      totalAmount,\n      billingQuantity: billingDays,\n      breakdown: [{\n        unitPrice: service.price,\n        quantity: billingDays,\n        subtotal: totalAmount,\n        description: `${service.name} (${billingDays} day${billingDays > 1 ? 's' : ''})`\n      }],\n      billingDetails: `Daily rate: ₹${service.price} × ${billingDays} day${billingDays > 1 ? 's' : ''} = ₹${totalAmount}`\n    };\n  }\n\n  /**\n   * Per-hour billing (oxygen, etc.)\n   */\n  private static calculatePerHour(service: any, hours: number): BillingCalculationResult {\n    const totalAmount = service.price * hours;\n    \n    return {\n      totalAmount,\n      billingQuantity: hours,\n      breakdown: [{\n        unitPrice: service.price,\n        quantity: hours,\n        subtotal: totalAmount,\n        description: `${service.name} (${hours} hour${hours > 1 ? 's' : ''})`\n      }],\n      billingDetails: `Hourly rate: ₹${service.price} × ${hours} hour${hours > 1 ? 's' : ''} = ₹${totalAmount}`\n    };\n  }\n\n  /**\n   * Composite billing (ambulance: fixed + per-km)\n   */\n  private static calculateComposite(service: any, customParameters: Record<string, any>): BillingCalculationResult {\n    let billingParams: any = {};\n    \n    try {\n      billingParams = service.billingParameters ? JSON.parse(service.billingParameters) : {};\n    } catch (e) {\n      console.error('Error parsing billing parameters:', e);\n    }\n\n    const fixedCharge = billingParams.fixedCharge || service.price;\n    const perKmRate = billingParams.perKmRate || 0;\n    const distance = customParameters.distance || 0;\n    \n    const fixedAmount = fixedCharge;\n    const distanceAmount = perKmRate * distance;\n    const totalAmount = fixedAmount + distanceAmount;\n    \n    const breakdown = [\n      {\n        unitPrice: fixedCharge,\n        quantity: 1,\n        subtotal: fixedAmount,\n        description: `${service.name} - Fixed charge`\n      }\n    ];\n\n    if (distance > 0) {\n      breakdown.push({\n        unitPrice: perKmRate,\n        quantity: distance,\n        subtotal: distanceAmount,\n        description: `Distance charge (${distance} km)`\n      });\n    }\n\n    return {\n      totalAmount,\n      billingQuantity: 1,\n      breakdown,\n      billingDetails: `Fixed: ₹${fixedAmount}${distance > 0 ? ` + Distance: ₹${perKmRate} × ${distance}km = ₹${distanceAmount}` : ''} = ₹${totalAmount}`\n    };\n  }\n\n  /**\n   * Variable billing (user-defined price at time of service)\n   */\n  private static calculateVariable(service: any, customParameters: Record<string, any>): BillingCalculationResult {\n    const variablePrice = customParameters.price || service.price || 0;\n    \n    return {\n      totalAmount: variablePrice,\n      billingQuantity: 1,\n      breakdown: [{\n        unitPrice: variablePrice,\n        quantity: 1,\n        subtotal: variablePrice,\n        description: `${service.name} (Variable pricing)`\n      }],\n      billingDetails: `Variable price: ₹${variablePrice}`\n    };\n  }\n\n  /**\n   * Per calendar date billing (different from 24-hour billing)\n   */\n  private static calculatePerDate(service: any, quantity: number): BillingCalculationResult {\n    const totalAmount = service.price * quantity;\n    \n    return {\n      totalAmount,\n      billingQuantity: quantity,\n      breakdown: [{\n        unitPrice: service.price,\n        quantity,\n        subtotal: totalAmount,\n        description: `${service.name} (${quantity} calendar day${quantity > 1 ? 's' : ''})`\n      }],\n      billingDetails: `Per calendar date: ₹${service.price} × ${quantity} day${quantity > 1 ? 's' : ''} = ₹${totalAmount}`\n    };\n  }\n\n  /**\n   * Calculate room billing for admission duration\n   */\n  static calculateRoomBilling(dailyRate: number, admissionDate: string, dischargeDate?: string): BillingCalculationResult {\n    const startDate = new Date(admissionDate);\n    const endDate = dischargeDate ? new Date(dischargeDate) : new Date();\n    \n    // Calculate number of 24-hour periods\n    const timeDiff = endDate.getTime() - startDate.getTime();\n    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    const billingDays = Math.max(1, daysDiff);\n    \n    const totalAmount = dailyRate * billingDays;\n    \n    return {\n      totalAmount,\n      billingQuantity: billingDays,\n      breakdown: [{\n        unitPrice: dailyRate,\n        quantity: billingDays,\n        subtotal: totalAmount,\n        description: `Room charges (${billingDays} day${billingDays > 1 ? 's' : ''})`\n      }],\n      billingDetails: `Daily rate: ₹${dailyRate} × ${billingDays} day${billingDays > 1 ? 's' : ''} = ₹${totalAmount}`\n    };\n  }\n}\n","size_bytes":7922},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1032},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/admissions.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AccessRestricted from \"@/components/access-restricted\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Bed, \n  User, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  UserCheck,\n  UserX,\n  Eye\n} from \"lucide-react\";\nimport type { Admission, Patient, RoomType } from \"@shared/schema\";\n\nexport default function InPatientManagement() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const { user } = useAuth();\n  \n  // Check if user has appropriate role for admission creation\n  const currentUserRoles = user?.roles || [user?.role]; // Backward compatibility\n  const isBillingStaff = currentUserRoles.includes('billing_staff') && !currentUserRoles.includes('admin') && !currentUserRoles.includes('super_user');\n\n  // Fetch all admissions\n  const { data: admissions = [] } = useQuery<Admission[]>({\n    queryKey: [\"/api/admissions\"],\n  });\n\n  // Fetch patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Fetch bed occupancy data for IST-based calculation\n  const { data: bedOccupancyData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/bed-occupancy\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Fetch IST-based counts\n  const { data: currentlyAdmittedData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/currently-admitted\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: admittedTodayData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/admitted-today\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: dischargedTodayData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/discharged-today\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Calculate statistics from IST-based API data\n  const totalBeds = useMemo(() => {\n    return bedOccupancyData.reduce((sum, roomType) => sum + (roomType.totalBeds || 0), 0);\n  }, [bedOccupancyData]);\n\n  const occupiedBeds = useMemo(() => {\n    return bedOccupancyData.reduce((sum, roomType) => sum + (roomType.occupiedBeds || 0), 0);\n  }, [bedOccupancyData]);\n\n  const currentlyAdmitted = currentlyAdmittedData.length;\n  const admittedToday = admittedTodayData.length;\n  const dischargedToday = dischargedTodayData.length;\n\n  // Filter admissions based on search and status\n  const filteredAdmissions = useMemo(() => {\n    let filtered = admissions;\n    \n    // Filter by status\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(admission => admission.status === statusFilter);\n    }\n    \n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(admission => {\n        const patient = patients.find(p => p.id === admission.patientId);\n        return (\n          patient?.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          patient?.patientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          admission.admissionId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          admission.currentWardType?.toLowerCase().includes(searchQuery.toLowerCase())\n        );\n      });\n    }\n    \n    return filtered;\n  }, [admissions, patients, searchQuery, statusFilter]);\n\n  const getPatientName = (patientId: string) => {\n    const patient = patients.find(p => p.id === patientId);\n    return patient?.name || \"Unknown Patient\";\n  };\n\n  const getPatientId = (patientId: string) => {\n    const patient = patients.find(p => p.id === patientId);\n    return patient?.patientId || \"N/A\";\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"admitted\": return \"default\";\n      case \"discharged\": return \"secondary\";\n      case \"transferred\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"In-Patient Management\" />\n      \n      <div className=\"p-6\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Link href=\"/bed-occupancy\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Bed className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Bed Occupancy</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{occupiedBeds}/{totalBeds}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/currently-admitted\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <User className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Currently Admitted</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{currentlyAdmitted}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/admitted-today\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <UserCheck className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Admitted Today</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{admittedToday}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/discharged-today\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <UserX className=\"h-8 w-8 text-red-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Discharged Today</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{dischargedToday}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search patients, admission ID, or ward type...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Patients</SelectItem>\n                  <SelectItem value=\"admitted\">Admitted Only</SelectItem>\n                  <SelectItem value=\"discharged\">Discharged Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Admissions Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building2 className=\"h-5 w-5\" />\n              Patient Admissions\n            </CardTitle>\n            <CardDescription>\n              Manage all patient admissions and discharges\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredAdmissions.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Admission ID</TableHead>\n                    <TableHead>Patient</TableHead>\n                    <TableHead>Ward/Room Type</TableHead>\n                    <TableHead>Room Number</TableHead>\n                    <TableHead>Admission Date</TableHead>\n                    <TableHead>Discharge Date</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAdmissions.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell className=\"font-medium\">\n                        {admission.admissionId}\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{getPatientName(admission.patientId)}</div>\n                          <div className=\"text-sm text-gray-500\">ID: {getPatientId(admission.patientId)}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{admission.currentWardType || \"Not specified\"}</TableCell>\n                      <TableCell>{admission.currentRoomNumber || \"TBA\"}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3 text-gray-400\" />\n                          {new Date(admission.admissionDate).toLocaleDateString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {admission.dischargeDate ? (\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3 text-gray-400\" />\n                            {new Date(admission.dischargeDate).toLocaleDateString()}\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">N/A</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getStatusBadgeVariant(admission.status)}>\n                          {admission.status.charAt(0).toUpperCase() + admission.status.slice(1)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Bed className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No admissions match your search criteria.\" : \"No patient admissions found.\"}\n                </p>\n                {!isBillingStaff && (\n                  <Link href=\"/patients\">\n                    <Button className=\"mt-4\">\n                      Admit New Patient\n                    </Button>\n                  </Link>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12632},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/pages/lab-tests.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Calendar, \n  Clock, \n  Search, \n  User, \n  TestTube,\n  Phone,\n  MapPin,\n  Filter,\n  Eye\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { PathologyOrder, Patient, Doctor } from \"@shared/schema\";\n\nexport default function LabTests() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedDoctor, setSelectedDoctor] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n\n  // Fetch all pathology orders\n  const { data: pathologyOrders = [], isLoading } = useQuery({\n    queryKey: [\"/api/pathology\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  // Fetch patients for order details\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Fetch doctors for filtering\n  const { data: doctors = [] } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Group lab tests by status\n  const labTestsByStatus = useMemo(() => {\n    const filtered = pathologyOrders.filter((orderData: any) => {\n      if (!orderData?.order) return false;\n      const order = orderData.order;\n      const patient = orderData.patient;\n\n      const matchesSearch = searchQuery === \"\" || \n        order.orderId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.patientId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.phone?.includes(searchQuery);\n\n      const matchesDoctor = selectedDoctor === \"all\" || order.doctorId === selectedDoctor || \n        (selectedDoctor === \"external\" && !order.doctorId);\n      const matchesStatus = selectedStatus === \"all\" || order.status === selectedStatus;\n      const matchesDate = selectedDate === \"\" || order.orderedDate === selectedDate;\n\n      return matchesSearch && matchesDoctor && matchesStatus && matchesDate;\n    });\n\n    const grouped = filtered.reduce((groups, orderData) => {\n      const order = orderData.order;\n      const status = order.status || \"ordered\";\n      if (!groups[status]) {\n        groups[status] = [];\n      }\n      groups[status].push(orderData);\n      return groups;\n    }, {} as Record<string, any[]>);\n\n    // Sort orders within each status group by ordered date\n    Object.values(grouped).forEach(orders => {\n      orders.sort((a, b) => {\n        const dateA = new Date(a.order.orderedDate).getTime();\n        const dateB = new Date(b.order.orderedDate).getTime();\n        return dateB - dateA; // Most recent first\n      });\n    });\n\n    return grouped;\n  }, [pathologyOrders, searchQuery, selectedDoctor, selectedStatus, selectedDate]);\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"External Patient\";\n    const doctor = doctors.find(d => d.id === doctorId);\n    return doctor ? `Dr. ${doctor.name}` : \"Unknown Doctor\";\n  };\n\n  const getPatientDetails = (patientId: string) => {\n    return patients.find(p => p.id === patientId);\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"ordered\": return \"secondary\";\n      case \"collected\": return \"default\";\n      case \"processing\": return \"outline\";\n      case \"completed\": return \"default\";\n      default: return \"outline\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'collected':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'ordered':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const totalLabCount = pathologyOrders.length;\n  // Use Indian timezone (UTC+5:30) for consistent date calculation\n  const now = new Date();\n  const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n  const today = indianTime.getFullYear() + '-' + \n    String(indianTime.getMonth() + 1).padStart(2, '0') + '-' + \n    String(indianTime.getDate()).padStart(2, '0');\n  const todayLabCount = pathologyOrders.filter((orderData: any) => \n    orderData?.order?.orderedDate === today\n  ).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <p>Loading lab tests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Lab Tests</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and view all pathology orders by status\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <Calendar className=\"w-4 h-4 mr-1\" />\n            Today: {todayLabCount}\n          </Badge>\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <TestTube className=\"w-4 h-4 mr-1\" />\n            Total: {totalLabCount}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by order ID, name, patient ID, or phone...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-lab-tests\"\n              />\n            </div>\n\n            <Select value={selectedDoctor} onValueChange={setSelectedDoctor}>\n              <SelectTrigger data-testid=\"filter-doctor\">\n                <SelectValue placeholder=\"Filter by doctor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Doctors</SelectItem>\n                {doctors.map((doctor: Doctor) => (\n                  <SelectItem key={doctor.id} value={doctor.id}>\n                    {doctor.name} - {doctor.specialization}\n                  </SelectItem>\n                ))}\n                <SelectItem value=\"external\">External Patients</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"filter-status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"ordered\">Ordered</SelectItem>\n                <SelectItem value=\"collected\">Collected</SelectItem>\n                <SelectItem value=\"processing\">Processing</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              data-testid=\"filter-date\"\n            />\n\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedDoctor(\"all\");\n                setSelectedStatus(\"all\");\n                setSelectedDate(\"\");\n              }}\n              data-testid=\"clear-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Clear\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lab Tests by Status */}\n      {Object.keys(labTestsByStatus).length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <TestTube className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No lab tests found matching your criteria.</p>\n            <Link href=\"/pathology\">\n              <Button className=\"mt-4\">Order New Test</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(labTestsByStatus).map(([status, orders]) => (\n            <Card key={status}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TestTube className=\"w-5 h-5\" />\n                  {status.charAt(0).toUpperCase() + status.slice(1)} Tests\n                  <Badge variant=\"outline\">{orders.length} orders</Badge>\n                </CardTitle>\n                <CardDescription>\n                  Lab tests with {status} status\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {orders.map((orderData: any) => {\n                    const order = orderData.order;\n                    const patient = orderData.patient;\n                    const doctor = orderData.doctor;\n                    const orderedDate = new Date(order.orderedDate);\n\n                    return (\n                      <div\n                        key={order.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <User className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">\n                                {patient?.name || \"Unknown Patient\"}\n                              </span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {order.orderId}\n                              </Badge>\n                            </div>\n\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {formatDate(order.orderedDate)}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <TestTube className=\"w-3 h-3\" />\n                                {getDoctorName(order.doctorId)}\n                              </div>\n                              {patient?.phone && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {patient.phone}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-3\">\n                          <Badge \n                            className={getStatusColor(order.status)}\n                            variant=\"secondary\"\n                            data-testid={`status-${order.id}`}\n                          >\n                            {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                          </Badge>\n\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">₹{order.totalPrice}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Total Amount\n                            </div>\n                          </div>\n\n                          <Link href={`/pathology`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`view-order-${order.id}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13106},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/pages/revenue.tsx":{"content":"\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AccessRestricted from \"@/components/access-restricted\";\nimport TopBar from \"@/components/layout/topbar\";\nimport Billing from \"./billing\";\n\nexport default function RevenuePage() {\n  const { user } = useAuth();\n\n  // Check if user has access - restrict receptionist role\n  const currentUserRoles = user?.roles || (user?.role ? [user.role] : []);\n  const hasAccess = currentUserRoles.some(role => [\"admin\", \"billing_staff\", \"super_user\"].includes(role));\n\n  if (!hasAccess) {\n    return (\n      <div className=\"flex flex-col h-screen\">\n        <TopBar\n          title=\"Revenue and Payments\"\n          searchPlaceholder=\"Search revenue data...\"\n          showNotifications={true}\n          notificationCount={3}\n        />\n        <div className=\"flex-1 p-6\">\n          <AccessRestricted\n            title=\"Access Restricted\"\n            description=\"Only administrators, billing staff, and super users can access revenue & payments.\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  // If user has access, show the billing component which contains the full revenue functionality\n  return <Billing />;\n}\n","size_bytes":1158},"client/src/components/comprehensive-bill-template.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Printer, FileText, X } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport type { Patient } from '@shared/schema';\n\ninterface ComprehensiveBillItem {\n  type: 'service' | 'pathology' | 'admission' | 'payment' | 'discount';\n  id: string;\n  date: string;\n  description: string;\n  amount: number;\n  category: string;\n  details: any;\n}\n\ninterface ComprehensiveBillData {\n  patient: Patient;\n  billItems: ComprehensiveBillItem[];\n  summary: {\n    totalCharges: number;\n    totalPayments: number;\n    totalDiscounts: number;\n    remainingBalance: number;\n    lastPaymentDate?: string;\n    lastDiscountDate?: string;\n  };\n}\n\ninterface ComprehensiveBillTemplateProps {\n  billData: ComprehensiveBillData;\n  hospitalInfo: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    registrationNumber?: string;\n    logo?: string;\n  };\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ComprehensiveBillTemplate({ \n  billData, \n  hospitalInfo, \n  isOpen,\n  onClose \n}: ComprehensiveBillTemplateProps) {\n\n  // Debug logging\n  React.useEffect(() => {\n    console.log(\"=== ComprehensiveBillTemplate Render ===\");\n    console.log(\"Hospital info received in template:\", hospitalInfo);\n    console.log(\"Hospital name:\", hospitalInfo?.name);\n    console.log(\"Hospital address:\", hospitalInfo?.address);\n    console.log(\"Hospital phone:\", hospitalInfo?.phone);\n    console.log(\"Hospital email:\", hospitalInfo?.email);\n    console.log(\"Hospital registration:\", hospitalInfo?.registrationNumber);\n    console.log(\"Hospital logo:\", hospitalInfo?.logo);\n    console.log(\"Bill data:\", billData);\n    console.log(\"=== End Template Debug ===\");\n  }, [hospitalInfo, billData]);\n\n  // Security: HTML escape functions to prevent XSS\n  const escapeHtml = (text: string) => {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  };\n\n  // Security: Attribute-safe escaping for use in HTML attributes\n  const escapeAttribute = (text: string) => {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#x27;');\n  };\n\n  // Security: URL validation and sanitization for images only\n  const sanitizeImageUrl = (url: string) => {\n    // Only allow http, https, and safe data image URLs\n    if (url.match(/^https?:/i)) {\n      return escapeAttribute(url);\n    }\n    if (url.match(/^data:image\\/(png|jpeg|jpg|gif|webp|svg\\+xml);base64,/i)) {\n      return escapeAttribute(url);\n    }\n    return ''; // Block potentially malicious URLs like javascript: or data:text/html\n  };\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getItemTypeColor = (type: string) => {\n    switch (type) {\n      case 'service':\n        return 'text-blue-600';\n      case 'pathology':\n        return 'text-purple-600';\n      case 'admission':\n        return 'text-orange-600';\n      case 'payment':\n        return 'text-green-600';\n      case 'discount':\n        return 'text-indigo-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const getItemTypeIcon = (type: string) => {\n    switch (type) {\n      case 'service':\n        return '🏥';\n      case 'pathology':\n        return '🧪';\n      case 'admission':\n        return '🛏️';\n      case 'payment':\n        return '💳';\n      case 'discount':\n        return '🏷️';\n      default:\n        return '📄';\n    }\n  };\n\n  const generateReceiptNumber = () => {\n    const today = new Date();\n    const yymmdd = today.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n    const timestamp = Date.now().toString().slice(-4);\n    return `${yymmdd}-BILL-${timestamp}`;\n  };\n\n  // Filter out payments and discounts from bill items for transaction history\n  const chargeItems = billData.billItems.filter(item => \n    item.type !== 'payment' && item.type !== 'discount'\n  );\n\n  // Helper function to extract quantity and clean description\n  const getQuantityAndDescription = (item: any) => {\n    let quantity = 1;\n    let description = item.description;\n\n    // First check if quantity is directly available in details\n    if (item.details?.quantity && item.details.quantity > 1) {\n      quantity = item.details.quantity;\n      \n      // For admission services, add appropriate suffix to description\n      if (item.type === 'service' && item.details?.serviceType === 'admission') {\n        if (item.details.serviceName?.toLowerCase().includes('bed charges')) {\n          description = `${item.details.serviceName} (${quantity} ${quantity === 1 ? 'day' : 'days'})`;\n        } else if (\n          item.details.serviceName?.toLowerCase().includes('doctor charges') ||\n          item.details.serviceName?.toLowerCase().includes('nursing charges') ||\n          item.details.serviceName?.toLowerCase().includes('rmo charges')\n        ) {\n          description = `${item.details.serviceName} (${quantity} ${quantity === 1 ? 'day' : 'days'})`;\n        }\n      }\n    } else if (item.type === 'admission') {\n      // Legacy admission entries - try to extract from details\n      if (item.details?.stayDuration) {\n        quantity = item.details.stayDuration;\n        // Clean up description to remove duplicate day information\n        description = description.replace(/\\s*\\(\\d+\\s+days?\\)/g, '');\n        // Format as: \"Bed Charges - Ward Type - Admission ID\"\n        const wardType = item.details.wardType || 'General Ward';\n        const admissionId = item.details.admissionId || '';\n        description = `Bed Charges - ${wardType}${admissionId ? ` - ${admissionId}` : ''}`;\n      } else {\n        // Extract days from bed charges description as fallback\n        const dayMatch = description.match(/(\\d+)\\s+day\\(s\\)/);\n        if (dayMatch) {\n          quantity = parseInt(dayMatch[1]);\n        }\n      }\n    } else if (item.type === 'service') {\n      // For services, check billing quantity\n      if (item.details?.billingQuantity && item.details.billingQuantity > 1) {\n        quantity = item.details.billingQuantity;\n      } else {\n        // Check if description has quantity pattern like \"Service Name (x3)\"\n        const quantityMatch = description.match(/\\(x(\\d+)\\)$/);\n        if (quantityMatch) {\n          quantity = parseInt(quantityMatch[1]);\n          description = description.replace(/\\s*\\(x\\d+\\)$/, '');\n        }\n      }\n    } else if (item.type === 'pathology') {\n      // For pathology orders, always show quantity as 1 (one order)\n      // The total price already represents the sum of all tests in the order\n      quantity = 1;\n    }\n\n    return { quantity, description };\n  };\n\n  const handlePrint = async () => {\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const receiptNumber = generateReceiptNumber();\n    \n    // Comprehensive debug logging\n    console.log(\"=== COMPREHENSIVE BILL PRINT DEBUG ===\");\n    console.log(\"Hospital info received in print function:\", hospitalInfo);\n    console.log(\"Hospital name being used:\", hospitalInfo?.name);\n    console.log(\"Hospital address being used:\", hospitalInfo?.address);\n    console.log(\"Hospital phone being used:\", hospitalInfo?.phone);\n    console.log(\"Hospital email being used:\", hospitalInfo?.email);\n    console.log(\"Hospital registration being used:\", hospitalInfo?.registrationNumber);\n    console.log(\"Hospital logo being used:\", hospitalInfo?.logo);\n    console.log(\"Bill data:\", billData);\n    console.log(\"Patient data:\", billData?.patient);\n    \n    // Validate required data\n    if (!hospitalInfo) {\n      console.error(\"ERROR: Hospital info is null or undefined!\");\n    }\n    if (!billData) {\n      console.error(\"ERROR: Bill data is null or undefined!\");\n    }\n    \n    console.log(\"=== END PRINT DEBUG ===\");\n\n    const billHtml = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Comprehensive Bill - ${escapeHtml(billData.patient.name)}</title>\n          <style>\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n\n            body {\n              font-family: Arial, sans-serif;\n              line-height: 1.4;\n              color: #333;\n              background: white;\n              font-size: 14px;\n            }\n\n            .bill {\n              max-width: 800px;\n              margin: 0 auto;\n              padding: 20px;\n              display: flex;\n              flex-direction: column;\n            }\n\n            /* Page Header for printing */\n            .page-header {\n              display: none;\n            }\n\n            /* Page Footer for printing */\n            .page-footer {\n              display: none;\n            }\n\n            /* Header */\n            .header {\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              margin-bottom: 20px;\n              padding-bottom: 15px;\n              border-bottom: 2px solid #333;\n            }\n\n            .hospital-info {\n              display: flex;\n              align-items: center;\n              gap: 15px;\n            }\n\n            .hospital-logo {\n              width: 60px;\n              height: 60px;\n              object-fit: contain;\n            }\n\n            .hospital-name {\n              font-size: 24px;\n              font-weight: bold;\n              color: #333;\n            }\n\n            /* Bill Title */\n            .bill-title {\n              text-align: center;\n              font-size: 20px;\n              font-weight: bold;\n              margin: 10px 0;\n              text-transform: uppercase;\n              letter-spacing: 1px;\n              color: #2563eb;\n            }\n\n            /* Patient Information */\n            .patient-info-box {\n              border: 2px solid #333;\n              padding: 15px;\n              margin: 8px 0;\n              background: #f9f9f9;\n            }\n\n            .patient-details {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n              gap: 10px;\n              margin-bottom: 10px;\n            }\n\n            .patient-detail {\n              font-weight: bold;\n            }\n\n            .bill-meta {\n              display: flex;\n              justify-content: space-between;\n              font-weight: bold;\n              margin-top: 10px;\n              padding-top: 10px;\n              border-top: 1px solid #ddd;\n            }\n\n            /* Summary Section */\n            .summary-section {\n              background: #f0f9ff;\n              border: 2px solid #2563eb;\n              padding: 15px;\n              margin: 10px 0;\n              border-radius: 5px;\n            }\n\n            .summary-title {\n              font-size: 16px;\n              font-weight: bold;\n              color: #2563eb;\n              margin-bottom: 10px;\n              text-align: center;\n            }\n\n            .summary-grid {\n              display: grid;\n              grid-template-columns: repeat(2, 1fr);\n              gap: 10px;\n            }\n\n            .summary-item {\n              display: flex;\n              justify-content: space-between;\n              padding: 5px 0;\n              border-bottom: 1px solid #ddd;\n            }\n\n            .summary-item.total {\n              font-weight: bold;\n              font-size: 16px;\n              border-bottom: 2px solid #2563eb;\n              color: #2563eb;\n            }\n\n            /* Bill Items */\n            .bill-section {\n              margin: 10px 0;\n            }\n\n            .section-title {\n              font-size: 16px;\n              font-weight: bold;\n              margin: 15px 0 10px 0;\n              padding: 5px 10px;\n              background: #f3f4f6;\n              border-left: 4px solid #2563eb;\n            }\n\n            .bill-table {\n              width: 100%;\n              border-collapse: collapse;\n              margin: 5px 0 15px 0;\n            }\n\n            .bill-table th,\n            .bill-table td {\n              border: 1px solid #333;\n              padding: 8px;\n              text-align: left;\n            }\n\n            .bill-table th {\n              background: #f0f0f0;\n              font-weight: bold;\n            }\n\n            .amount-cell {\n              text-align: right !important;\n            }\n\n            .type-icon {\n              width: 20px;\n              text-align: center;\n            }\n\n            .service-row { background: #eff6ff; }\n            .pathology-row { background: #faf5ff; }\n            .admission-row { background: #fff7ed; }\n            .payment-row { background: #f0fdf4; }\n            .discount-row { background: #eef2ff; }\n\n            .negative-amount {\n              color: #059669;\n              font-weight: bold;\n            }\n\n            .positive-amount {\n              color: #dc2626;\n            }\n\n            /* Signature Section */\n            .signature-section {\n              margin: 35px 0;\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n            }\n\n            .signature-box {\n              text-align: center;\n              min-width: 200px;\n            }\n\n            .signature-line {\n              border-bottom: 1px solid #333;\n              margin-bottom: 5px;\n              height: 40px;\n            }\n\n            /* Footer */\n            .footer {\n              margin-top: 8px;\n              padding-top: 8px;\n              border-top: 2px solid #333;\n              text-align: center;\n              font-size: 12px;\n              line-height: 1.5;\n            }\n\n            .footer-line {\n              margin-bottom: 3px;\n            }\n\n            .bill-id {\n              margin-top: 15px;\n              font-family: monospace;\n              font-size: 10px;\n              color: #666;\n            }\n\n            @page {\n              margin: 1.5in 1in 1in 1in;\n              size: A4;\n            }\n            \n            @media print {\n              @page {\n                margin: 0;\n                size: A4;\n              }\n            }\n\n            @media print {\n              * {\n                -webkit-print-color-adjust: exact !important;\n                color-adjust: exact !important;\n              }\n\n              html, body {\n                margin: 0 !important;\n                padding: 0 !important;\n                height: auto !important;\n                background: white !important;\n              }\n              \n              /* Hide browser default headers and footers */\n              @page {\n                margin: 0;\n                size: A4;\n              }\n              \n              html {\n                -webkit-print-color-adjust: exact;\n              }\n\n              .bill {\n                margin: 0 !important;\n                padding: 0 !important;\n                page-break-inside: avoid;\n              }\n\n              /* Show headers and footers on every page */\n              .page-header {\n                display: flex !important;\n                align-items: center;\n                justify-content: center;\n                padding: 15px 0;\n                border-bottom: 2px solid #333;\n                background: white;\n                width: 100%;\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                z-index: 1000;\n              }\n\n              .page-footer {\n                display: block !important;\n                text-align: center;\n                font-size: 12px;\n                line-height: 1.5;\n                padding: 10px 0;\n                border-top: 2px solid #333;\n                background: white;\n                width: 100%;\n                position: fixed;\n                bottom: 0;\n                left: 0;\n                right: 0;\n                z-index: 1000;\n              }\n\n              /* Hide the regular header and footer in print */\n              .header {\n                display: none !important;\n              }\n\n              .footer {\n                display: none !important;\n              }\n\n              /* Ensure content doesn't overlap with fixed header/footer */\n              .bill-title {\n                margin-top: 100px !important;\n              }\n\n              .signature-section {\n                margin-bottom: 80px !important;\n              }\n\n              .bill-table {\n                page-break-inside: auto;\n              }\n\n              .bill-table tr {\n                page-break-inside: avoid;\n                page-break-after: auto;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <!-- Page Header for printing -->\n          <div class=\"page-header\">\n            <div class=\"hospital-info\">\n              ${hospitalInfo?.logo ? `\n                <img src=\"${sanitizeImageUrl(hospitalInfo.logo)}\" alt=\"Hospital Logo\" class=\"hospital-logo\">\n              ` : ''}\n              <div class=\"hospital-name\">${escapeHtml(hospitalInfo?.name || \"Hospital Name Not Set\")}</div>\n            </div>\n          </div>\n\n          <!-- Page Footer for printing -->\n          <div class=\"page-footer\">\n            <div class=\"footer-line\">Address: ${escapeHtml(hospitalInfo?.address || \"Address Not Set\")}</div>\n            <div class=\"footer-line\">Phone: ${escapeHtml(hospitalInfo?.phone || \"Phone Not Set\")} | Email: ${escapeHtml(hospitalInfo?.email || \"Email Not Set\")}${hospitalInfo?.registrationNumber ? ` | Reg. No.: ${escapeHtml(hospitalInfo.registrationNumber)}` : ''}</div>\n          </div>\n\n          <div class=\"bill\">\n            <!-- Header -->\n            <div class=\"header\">\n              <div class=\"hospital-info\">\n                ${hospitalInfo?.logo ? `\n                  <img src=\"${sanitizeImageUrl(hospitalInfo.logo)}\" alt=\"Hospital Logo\" class=\"hospital-logo\">\n                ` : ''}\n                <div class=\"hospital-name\">${escapeHtml(hospitalInfo?.name || \"Hospital Name Not Set\")}</div>\n              </div>\n            </div>\n\n            <!-- Bill Title -->\n            <div class=\"bill-title\">\n              Comprehensive Financial Statement\n            </div>\n\n            <!-- Patient Information -->\n            <div class=\"patient-info-box\">\n              <div class=\"patient-details\">\n                <div class=\"patient-detail\">Name: ${escapeHtml(billData.patient.name)}</div>\n                <div class=\"patient-detail\">Patient ID: ${escapeHtml(billData.patient.patientId)}</div>\n                <div class=\"patient-detail\">Age: ${escapeHtml(billData.patient.age?.toString() || 'N/A')} yrs</div>\n                <div class=\"patient-detail\">Gender: ${escapeHtml(billData.patient.gender || 'N/A')}</div>\n                <div class=\"patient-detail\">Phone: ${escapeHtml(billData.patient.phone || 'N/A')}</div>\n              </div>\n              <div class=\"bill-meta\">\n                <span>Bill Date: ${formatDate(new Date().toISOString())}</span>\n                <span>Bill Number: ${escapeHtml(receiptNumber)}</span>\n              </div>\n            </div>\n\n            <!-- Detailed Bill Items -->\n            <div class=\"bill-section\">\n              <div class=\"section-title\">Service & Treatment Details</div>\n\n              <table class=\"bill-table\">\n                <thead>\n                  <tr>\n                    <th style=\"width: 5%;\">#</th>\n                    <th style=\"width: 16%;\">Date</th>\n                    <th style=\"width: 39%;\">Description</th>\n                    <th style=\"width: 8%;\">Qty</th>\n                    <th style=\"width: 12%; text-align: right;\">Rate (₹)</th>\n                    <th style=\"width: 15%; text-align: right;\">Amount (₹)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  ${chargeItems.map((item, index) => {\n                    const { quantity, description } = getQuantityAndDescription(item);\n                    return `\n                    <tr class=\"${escapeHtml(item.type)}-row\">\n                      <td>${index + 1}</td>\n                      <td>${formatDate(item.date)}</td>\n                      <td>${escapeHtml(description)}</td>\n                      <td style=\"text-align: center;\">${quantity}</td>\n                      <td class=\"amount-cell\" style=\"text-align: right;\">\n                        ₹${quantity > 0 ? (item.amount / quantity).toLocaleString() : '0'}\n                      </td>\n                      <td class=\"amount-cell positive-amount\">\n                        ₹${item.amount.toLocaleString()}\n                      </td>\n                    </tr>\n                    `;\n                  }).join('')}\n\n                  <!-- Summary Section as part of table -->\n                  <tr style=\"border-top: 2px solid #333;\">\n                    <td colspan=\"5\" style=\"text-align: right; font-weight: bold; padding-top: 15px;\">TOTAL CHARGES:</td>\n                    <td class=\"amount-cell\" style=\"font-weight: bold; font-size: 16px; padding-top: 15px;\">₹${billData.summary.totalCharges.toLocaleString()}</td>\n                  </tr>\n                  <tr>\n                    <td colspan=\"5\" style=\"text-align: right; font-weight: bold;\">PAID:</td>\n                    <td class=\"amount-cell negative-amount\" style=\"font-weight: bold;\">-₹${billData.summary.totalPayments.toLocaleString()}</td>\n                  </tr>\n                  <tr>\n                    <td colspan=\"5\" style=\"text-align: right; font-weight: bold;\">DISCOUNT:</td>\n                    <td class=\"amount-cell negative-amount\" style=\"font-weight: bold;\">-₹${billData.summary.totalDiscounts.toLocaleString()}</td>\n                  </tr>\n                  <tr style=\"border-top: 2px solid #2563eb; background: #f0f9ff;\">\n                    <td colspan=\"5\" style=\"text-align: right; font-weight: bold; font-size: 18px; color: #2563eb; padding: 10px;\">BALANCE:</td>\n                    <td class=\"amount-cell ${billData.summary.remainingBalance >= 0 ? 'positive-amount' : 'negative-amount'}\" style=\"font-weight: bold; font-size: 18px; padding: 10px;\">\n                      ₹${billData.summary.remainingBalance.toLocaleString()}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n\n            <!-- Signature Section -->\n            <div class=\"signature-section\">\n              <div class=\"signature-box\" style=\"margin-left: auto;\">\n                <div class=\"signature-line\"></div>\n                <div>Authorized Signature & Stamp</div>\n              </div>\n            </div>\n\n            <!-- Footer -->\n            <div class=\"footer\">\n              <div class=\"footer-line\">Address: ${escapeHtml(hospitalInfo?.address || \"Address Not Set\")}</div>\n              <div class=\"footer-line\">Phone: ${escapeHtml(hospitalInfo?.phone || \"Phone Not Set\")} | Email: ${escapeHtml(hospitalInfo?.email || \"Email Not Set\")}${hospitalInfo?.registrationNumber ? ` | Reg. No.: ${escapeHtml(hospitalInfo.registrationNumber)}` : ''}</div>\n              <div class=\"bill-id\">\n                Bill ID: ${escapeHtml(receiptNumber)} | Generated on ${new Date().toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(billHtml);\n    printWindow.document.close();\n    printWindow.focus();\n\n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 250);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) onClose(); }}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"comprehensive-bill-dialog\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5 text-blue-600\" />\n            Comprehensive Financial Statement - {billData.patient.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Patient Info Summary */}\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Patient ID:</span>\n                <div>{billData.patient.patientId}</div>\n              </div>\n              <div>\n                <span className=\"font-medium\">Age:</span>\n                <div>{billData.patient.age} years</div>\n              </div>\n              <div>\n                <span className=\"font-medium\">Gender:</span>\n                <div>{billData.patient.gender}</div>\n              </div>\n              <div>\n                <span className=\"font-medium\">Phone:</span>\n                <div>{billData.patient.phone}</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Service & Treatment Details */}\n          <div>\n            <h3 className=\"font-semibold mb-3\">Service & Treatment Details ({chargeItems.length} items)</h3>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <div className=\"max-h-96 overflow-y-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead className=\"bg-gray-50 sticky top-0\">\n                    <tr>\n                      <th className=\"text-left p-3 border-b w-32\">Date</th>\n                      <th className=\"text-left p-3 border-b\">Description</th>\n                      <th className=\"text-center p-3 border-b w-16\">Qty</th>\n                      <th className=\"text-right p-3 border-b w-24\">Rate</th>\n                      <th className=\"text-right p-3 border-b w-28\">Amount</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {chargeItems.map((item, index) => {\n                      const { quantity, description } = getQuantityAndDescription(item);\n                      return (\n                        <tr key={`${item.type}-${item.id}`} className=\"hover:bg-gray-50\">\n                          <td className=\"p-3 border-b\">{formatDate(item.date)}</td>\n                          <td className=\"p-3 border-b\">{description}</td>\n                          <td className=\"p-3 border-b text-center\">{quantity}</td>\n                          <td className=\"p-3 border-b text-right font-medium\">\n                            {formatCurrency(quantity > 0 ? item.amount / quantity : 0)}\n                          </td>\n                          <td className=\"p-3 border-b text-right font-medium text-red-600\">\n                            {formatCurrency(item.amount)}\n                          </td>\n                        </tr>\n                      );\n                    })}\n\n                    {/* Summary as part of table */}\n                    <tr className=\"border-t-2 border-gray-300 bg-gray-50\">\n                      <td colSpan={4} className=\"p-3 text-right font-bold text-lg\">\n                        TOTAL CHARGES:\n                      </td>\n                      <td className=\"p-3 text-right font-bold text-lg text-red-600\">\n                        {formatCurrency(billData.summary.totalCharges)}\n                      </td>\n                    </tr>\n                    <tr className=\"bg-gray-50\">\n                      <td colSpan={4} className=\"p-3 text-right font-bold\">\n                        PAID:\n                      </td>\n                      <td className=\"p-3 text-right font-bold text-green-600\">\n                        -{formatCurrency(billData.summary.totalPayments)}\n                      </td>\n                    </tr>\n                    <tr className=\"bg-gray-50\">\n                      <td colSpan={4} className=\"p-3 text-right font-bold\">\n                        DISCOUNT:\n                      </td>\n                      <td className=\"p-3 text-right font-bold text-green-600\">\n                        -{formatCurrency(billData.summary.totalDiscounts)}\n                      </td>\n                    </tr>\n                    <tr className=\"border-t-2 border-blue-500 bg-blue-50\">\n                      <td colSpan={4} className=\"p-4 text-right font-bold text-xl text-blue-800\">\n                        BALANCE:\n                      </td>\n                      <td className={`p-4 text-right font-bold text-xl ${\n                        billData.summary.remainingBalance >= 0 ? 'text-red-600' : 'text-green-600'\n                      }`}>\n                        {formatCurrency(billData.summary.remainingBalance)}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3 pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-close-comprehensive-bill\"\n            >\n              <X className=\"h-4 w-4\" />\n              Close\n            </Button>\n            <Button\n              onClick={handlePrint}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-print-comprehensive-bill\"\n            >\n              <Printer className=\"h-4 w-4\" />\n              Print/Download PDF\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":29804},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"hospital_token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"hospital_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1779},"server/pathology-catalog.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Load pathology catalog from JSON file\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst catalogPath = path.join(__dirname, 'pathology-catalog.json');\nlet pathologyCatalogData: any;\n\ntry {\n  const catalogJson = fs.readFileSync(catalogPath, 'utf8');\n  pathologyCatalogData = JSON.parse(catalogJson);\n} catch (error) {\n  console.error('Error loading pathology catalog:', error);\n  pathologyCatalogData = { categories: [] };\n}\n\nexport const pathologyCatalog = pathologyCatalogData;\n\nexport interface PathologyTestCatalog {\n  test_name: string;\n  price: number;\n  category: string;\n  subtests: any[];\n}\n\nexport function getAllPathologyTests(): PathologyTestCatalog[] {\n  const allTests: PathologyTestCatalog[] = [];\n\n  pathologyCatalog.categories.forEach((category: any) => {\n    category.tests.forEach((test: any) => {\n      allTests.push({\n        ...test,\n        category: category.name\n      });\n    });\n  });\n\n  return allTests;\n}\n\nexport function getTestsByCategory(categoryName: string): PathologyTestCatalog[] {\n  const category = pathologyCatalog.categories.find((cat: any) => cat.name === categoryName);\n  if (!category) return [];\n\n  return category.tests.map((test: any) => ({\n    ...test,\n    category: categoryName\n  }));\n}\n\nexport function getTestByName(testName: string): PathologyTestCatalog | undefined {\n  for (const category of pathologyCatalog.categories) {\n    const test = category.tests.find((t: any) => t.test_name === testName);\n    if (test) {\n      return {\n        ...test,\n        category: category.name\n      };\n    }\n  }\n  return undefined;\n}\n\nexport function getCategories(): string[] {\n  return pathologyCatalog.categories.map((cat: any) => cat.name);\n}\n\n// Function to add a new category to the JSON file\nexport function addCategoryToFile(categoryName: string, description?: string): void {\n  try {\n    const newCategory = {\n      name: categoryName,\n      description: description || '',\n      tests: []\n    };\n\n    pathologyCatalog.categories.push(newCategory);\n\n    fs.writeFileSync(catalogPath, JSON.stringify(pathologyCatalog, null, 2));\n  } catch (error) {\n    console.error('Error adding category to file:', error);\n    throw error;\n  }\n}\n\n// Function to add a new test to a category in the JSON file\nexport function addTestToFile(categoryName: string, testData: any): void {\n  try {\n    const categoryIndex = pathologyCatalog.categories.findIndex((cat: any) => cat.name === categoryName);\n\n    if (categoryIndex === -1) {\n      throw new Error(`Category \"${categoryName}\" not found`);\n    }\n\n    pathologyCatalog.categories[categoryIndex].tests.push({\n      test_name: testData.test_name,\n      price: testData.price,\n      subtests: testData.subtests || []\n    });\n\n    fs.writeFileSync(catalogPath, JSON.stringify(pathologyCatalog, null, 2));\n  } catch (error) {\n    console.error('Error adding test to file:', error);\n    throw error;\n  }\n}\n\n// Function to delete a category from the JSON file\nexport function deleteCategoryFromFile(categoryName: string): void {\n  try {\n    const categoryIndex = pathologyCatalog.categories.findIndex((cat: any) => cat.name === categoryName);\n\n    if (categoryIndex === -1) {\n      throw new Error(`Category \"${categoryName}\" not found`);\n    }\n\n    pathologyCatalog.categories.splice(categoryIndex, 1);\n    fs.writeFileSync(catalogPath, JSON.stringify(pathologyCatalog, null, 2));\n  } catch (error) {\n    console.error('Error deleting category from file:', error);\n    throw error;\n  }\n}\n\n// Function to delete a test from a category in the JSON file\nexport function deleteTestFromFile(categoryName: string, testName: string): void {\n  try {\n    const categoryIndex = pathologyCatalog.categories.findIndex((cat: any) => cat.name === categoryName);\n\n    if (categoryIndex === -1) {\n      throw new Error(`Category \"${categoryName}\" not found`);\n    }\n\n    const testIndex = pathologyCatalog.categories[categoryIndex].tests.findIndex((test: any) => test.test_name === testName);\n\n    if (testIndex === -1) {\n      throw new Error(`Test \"${testName}\" not found in category \"${categoryName}\"`);\n    }\n\n    pathologyCatalog.categories[categoryIndex].tests.splice(testIndex, 1);\n    fs.writeFileSync(catalogPath, JSON.stringify(pathologyCatalog, null, 2));\n  } catch (error) {\n    console.error('Error deleting test from file:', error);\n    throw error;\n  }\n}","size_bytes":4469},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/access-restricted.tsx":{"content":"import { Shield } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface AccessRestrictedProps {\n  title?: string;\n  description?: string;\n}\n\nexport default function AccessRestricted({ \n  title = \"Access Restricted\", \n  description = \"You don't have permission to access this feature.\" \n}: AccessRestrictedProps) {\n  return (\n    <Card>\n      <CardContent className=\"p-8 text-center\">\n        <Shield className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">{title}</h3>\n        <p className=\"text-muted-foreground\">{description}</p>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":662},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/pathology.tsx":{"content":"import { useState } from \"react\";\nimport React from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\nimport { TestTube, Eye, Search, Plus, ShoppingCart, Check, ChevronsUpDown } from \"lucide-react\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { insertPathologyOrderSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AccessRestricted from \"@/components/access-restricted\";\nimport type { PathologyOrder, Patient, Doctor, Service, PathologyCategory, DynamicPathologyTest } from \"@shared/schema\";\n\n// Patient Search Combobox Component\nfunction PatientSearchCombobox({ value, onValueChange, patients }: {\n  value: string;\n  onValueChange: (value: string) => void;\n  patients: any[];\n}) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const filteredPatients = (patients || []).filter((patient: any) => {\n    if (!searchValue.trim()) return true; // Show all patients when no search\n    const searchLower = searchValue.toLowerCase().trim();\n    return (\n      patient.name?.toLowerCase().includes(searchLower) ||\n      patient.patientId?.toLowerCase().includes(searchLower) ||\n      patient.phone?.includes(searchValue.trim()) ||\n      patient.email?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const selectedPatient = patients?.find((patient: any) => patient.id === value);\n\n  const formatPatientDisplay = (patient: any) => {\n    return `${patient.name}, ${patient.age} ${patient.gender} (${patient.patientId})`;\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between text-left font-normal\"\n          data-testid=\"button-select-patient\"\n        >\n          {selectedPatient ? formatPatientDisplay(selectedPatient) : \"Search and select patient...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\" style={{ width: \"var(--radix-popover-trigger-width)\" }}>\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Type to search patients...\"\n            value={searchValue}\n            onValueChange={setSearchValue}\n            data-testid=\"input-search-patient\"\n          />\n          <CommandList className=\"max-h-[300px] overflow-y-auto\">\n            <CommandEmpty>No patients found.</CommandEmpty>\n            <CommandGroup>\n              {filteredPatients.map((patient: any) => (\n                <CommandItem\n                  key={patient.id}\n                  value={patient.name}\n                  onSelect={() => {\n                    onValueChange(patient.id);\n                    setOpen(false);\n                    setSearchValue(\"\");\n                  }}\n                  data-testid={`option-patient-${patient.id}`}\n                  className=\"cursor-pointer\"\n                >\n                  <Check\n                    className={`mr-2 h-4 w-4 ${\n                      value === patient.id ? \"opacity-100\" : \"opacity-0\"\n                    }`}\n                  />\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-medium\">{patient.name}</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {patient.age} years, {patient.gender} • {patient.patientId}\n                    </span>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n// Order Details Dialog Component\nfunction OrderDetailsDialog({ order, onClose }: { order: any, onClose: () => void }) {\n  const { data: orderDetails } = useQuery({\n    queryKey: [\"/api/pathology\", order.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/pathology/${order.id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch order details\");\n      return response.json();\n    },\n  });\n\n  const getPatientName = (patientId: string) => {\n    return orderDetails?.patient?.name || \"Unknown Patient\";\n  };\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"External Patient\";\n    return orderDetails?.doctor?.name || \"Unknown Doctor\";\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'collected':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'ordered':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>Order Details - {order.orderId}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"max-h-[calc(90vh-120px)] overflow-y-auto\">\n          <div className=\"space-y-4 px-6 pb-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Patient</Label>\n                <p className=\"text-sm text-muted-foreground\">{getPatientName(order.patientId)}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Doctor</Label>\n                <p className=\"text-sm text-muted-foreground\">{getDoctorName(order.doctorId)}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Status</Label>\n                <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                  {order.status}\n                </Badge>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Date Ordered</Label>\n                <p className=\"text-sm text-muted-foreground\">{formatDate(order.orderedDate)}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Total Price</Label>\n                <p className=\"text-sm text-muted-foreground\">₹{order.totalPrice}</p>\n              </div>\n            </div>\n            {order.remarks && (\n              <div>\n                <Label className=\"text-sm font-medium\">Remarks</Label>\n                <p className=\"text-sm text-muted-foreground\">{order.remarks}</p>\n              </div>\n            )}\n\n            <div className=\"mt-6\">\n              <Label className=\"text-sm font-medium\">Tests in this Order ({orderDetails?.tests?.length || 0} tests)</Label>\n              <div className=\"mt-2 border rounded-lg max-h-[300px] overflow-y-auto\">\n                <Table>\n                  <TableHeader className=\"sticky top-0 bg-background z-10\">\n                    <TableRow>\n                      <TableHead className=\"bg-background\">Test Name</TableHead>\n                      <TableHead className=\"bg-background\">Category</TableHead>\n                      <TableHead className=\"bg-background\">Status</TableHead>\n                      <TableHead className=\"bg-background\">Price (₹)</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {orderDetails?.tests ? (\n                      orderDetails.tests.map((test: any, index: number) => (\n                        <TableRow key={test.id} className={index % 2 === 0 ? \"bg-gray-50/50\" : \"\"}>\n                          <TableCell className=\"font-medium\">{test.testName}</TableCell>\n                          <TableCell>{test.testCategory}</TableCell>\n                          <TableCell>\n                            <Badge className={getStatusColor(test.status)} variant=\"secondary\">\n                              {test.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>₹{test.price}</TableCell>\n                        </TableRow>\n                      ))\n                    ) : (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center text-muted-foreground py-8\">\n                          Loading test details...\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Pathology() {\n  // Get URL parameters for pre-selected patient\n  const urlParams = new URLSearchParams(window.location.search);\n  const preSelectedPatientId = urlParams.get('patientId');\n  const preSelectedPatientName = urlParams.get('patientName');\n\n  const [isNewTestOpen, setIsNewTestOpen] = useState(!!preSelectedPatientId);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedCatalogTests, setSelectedCatalogTests] = useState<any[]>([]);\n  const [catalogSearchQuery, setCatalogSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Check if user has appropriate role for pathology creation\n  const currentUserRoles = user?.roles || [user?.role]; // Backward compatibility\n  const isBillingStaff = currentUserRoles.includes('billing_staff') && !currentUserRoles.includes('admin') && !currentUserRoles.includes('super_user');\n\n  const { data: pathologyOrders = [], isLoading } = useQuery({\n    queryKey: [\"/api/pathology\"],\n  });\n\n  const { data: combinedTestData } = useQuery({\n    queryKey: [\"/api/pathology-tests/combined\"],\n  });\n\n  // Extract tests and categories from combined data\n  const testCatalog = combinedTestData?.categories?.flatMap(cat =>\n    cat.tests?.map(test => ({\n      ...test,\n      category: cat.name\n    })) || []\n  ) || [];\n\n  const categories = combinedTestData?.categories?.map(cat => cat.name) || [];\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: doctors } = useQuery({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string, status: string }) => {\n      const response = await fetch(`/api/pathology/${orderId}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({ status }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update order status\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pathology\"] });\n      toast({\n        title: \"Status updated\",\n        description: \"The order status has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating status\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Sending order data:\", data);\n      const response = await fetch(\"/api/pathology\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error(\"Order creation failed:\", errorData);\n        throw new Error(`Failed to create pathology order: ${errorData}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pathology\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pathology/patient\", preSelectedPatientId] });\n      setIsNewTestOpen(false);\n      setSelectedCatalogTests([]);\n      form.reset();\n      toast({\n        title: \"Order placed successfully\",\n        description: \"The pathology order has been placed.\",\n      });\n\n      // Redirect back to patient page if came from there\n      if (preSelectedPatientId) {\n        setTimeout(() => {\n          window.location.href = `/patients/${preSelectedPatientId}#pathology`;\n        }, 500);\n      }\n    },\n    onError: (error) => {\n      console.error(\"Order mutation error:\", error);\n      toast({\n        title: \"Error placing order\",\n        description: `Please try again. ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertPathologyOrderSchema),\n    defaultValues: {\n      patientId: preSelectedPatientId || \"\",\n      doctorId: \"\",\n      orderedDate: \"\", // Will be set by useEffect\n      remarks: \"\",\n    },\n  });\n\n  // Set default date based on configured timezone\n  const { data: systemSettings } = useQuery({\n    queryKey: [\"/api/settings/system\"],\n  });\n\n  // Update ordered date and time when system settings load or timezone changes\n  React.useEffect(() => {\n    if (systemSettings?.timezone && isNewTestOpen) {\n      const timezone = systemSettings.timezone;\n      const now = new Date();\n      \n      const formatter = new Intl.DateTimeFormat('en-US', {\n        timeZone: timezone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n      \n      const parts = formatter.formatToParts(now);\n      const year = parts.find(p => p.type === 'year')?.value;\n      const month = parts.find(p => p.type === 'month')?.value;\n      const day = parts.find(p => p.type === 'day')?.value;\n      const hour = parts.find(p => p.type === 'hour')?.value;\n      const minute = parts.find(p => p.type === 'minute')?.value;\n      \n      const currentDateTime = `${year}-${month}-${day}T${hour}:${minute}`;\n      \n      form.setValue('orderedDate', currentDateTime);\n    }\n  }, [systemSettings?.timezone, isNewTestOpen]);\n\n  const onSubmit = (data: any) => {\n    if (selectedCatalogTests.length === 0) {\n      toast({\n        title: \"No tests selected\",\n        description: \"Please select at least one test from the catalog.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create single order with multiple tests\n    const orderData = {\n      patientId: data.patientId,\n      doctorId: data.doctorId === \"external\" || data.doctorId === \"\" ? null : data.doctorId, // Make doctor optional\n      orderedDate: data.orderedDate,\n      remarks: data.remarks,\n    };\n\n    const tests = selectedCatalogTests.map(test => ({\n      testName: test.test_name,\n      testCategory: test.category,\n      price: test.price,\n    }));\n\n    createOrderMutation.mutate({ orderData, tests });\n  };\n\n  const filteredOrders = (pathologyOrders || []).filter((orderData: any) => {\n    if (!orderData?.order) return false;\n    const order = orderData.order;\n    const patient = orderData.patient;\n    const matchesSearch = order.orderId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         patient?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         patient?.patientId?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const filteredCatalog = (testCatalog || []).filter((test: any) => {\n    const matchesCategory = selectedCategory === \"all\" || test.category === selectedCategory;\n    const matchesSearch = test.test_name?.toLowerCase().includes(catalogSearchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'collected':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'ordered':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const getPatientName = (patientId: string) => {\n    const patient = (patients || []).find((p: Patient) => p.id === patientId);\n    return patient?.name || \"Unknown Patient\";\n  };\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"External Patient\";\n    const doctor = (doctors || []).find((d: Doctor) => d.id === doctorId);\n    return doctor?.name || \"Unknown Doctor\";\n  };\n\n  const toggleTestSelection = (test: any) => {\n    const isSelected = selectedCatalogTests.some(t => t.test_name === test.test_name);\n    if (isSelected) {\n      setSelectedCatalogTests(prev => prev.filter(t => t.test_name !== test.test_name));\n    } else {\n      setSelectedCatalogTests(prev => [...prev, test]);\n    }\n  };\n\n  const getTotalPrice = () => {\n    return selectedCatalogTests.reduce((total, test) => total + test.price, 0);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar\n        title=\"Pathology Tests\"\n        searchPlaceholder=\"Search tests by name or ID...\"\n        onSearch={setSearchQuery}\n        onNewAction={isBillingStaff ? undefined : () => setIsNewTestOpen(true)}\n        newActionLabel={isBillingStaff ? undefined : \"Order Test\"}\n      />\n\n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Pathology Orders</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Total: {filteredOrders.length} orders\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"filter-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"ordered\">Ordered</SelectItem>\n                    <SelectItem value=\"collected\">Collected</SelectItem>\n                    <SelectItem value=\"processing\">Processing</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                <p className=\"text-sm text-muted-foreground mt-2\">Loading tests...</p>\n              </div>\n            ) : filteredOrders.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <TestTube className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No orders found</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  No pathology orders match your current search criteria.\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Order ID</TableHead>\n                    <TableHead>Patient</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Date Ordered</TableHead>\n                    <TableHead>Total Price</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredOrders.map((orderData: any) => {\n                    const order = orderData.order;\n                    const patient = orderData.patient;\n                    const doctor = orderData.doctor;\n                    return (\n                      <TableRow key={order.id} data-testid={`order-row-${order.id}`}>\n                        <TableCell className=\"font-medium\">{order.orderId}</TableCell>\n                        <TableCell>{patient?.name || \"Unknown Patient\"}</TableCell>\n                        <TableCell>{doctor?.name || \"External Patient\"}</TableCell>\n                        <TableCell>{formatDate(order.orderedDate)}</TableCell>\n                        <TableCell>₹{order.totalPrice}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                            {order.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setSelectedOrder(order)}\n                              data-testid={`view-order-${order.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Select\n                              value={order.status}\n                              onValueChange={(newStatus) => updateOrderStatusMutation.mutate({ orderId: order.id, status: newStatus })}\n                              disabled={updateOrderStatusMutation.isPending}\n                            >\n                              <SelectTrigger className=\"w-32\" data-testid={`status-select-${order.id}`}>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"ordered\">Ordered</SelectItem>\n                                <SelectItem value=\"collected\">Collected</SelectItem>\n                                <SelectItem value=\"processing\">Processing</SelectItem>\n                                <SelectItem value=\"completed\">Completed</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Order New Test Dialog */}\n      <Dialog open={isNewTestOpen} onOpenChange={setIsNewTestOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Order Pathology Tests</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"patientId\">Patient *</Label>\n                <PatientSearchCombobox\n                  value={form.watch(\"patientId\")}\n                  onValueChange={(value) => form.setValue(\"patientId\", value)}\n                  patients={patients || []}\n                />\n                {form.formState.errors.patientId && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.patientId.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"doctorId\">Doctor (Optional for External Patients)</Label>\n                <Select\n                  onValueChange={(value) => form.setValue(\"doctorId\", value)}\n                  data-testid=\"select-doctor\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select doctor (optional)\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"external\">External Patient (No Doctor)</SelectItem>\n                    {(doctors || []).map((doctor: Doctor) => (\n                      <SelectItem key={doctor.id} value={doctor.id}>\n                        {doctor.name} - {doctor.specialization}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"orderedDate\">Order Date & Time *</Label>\n                <Input\n                  type=\"datetime-local\"\n                  {...form.register(\"orderedDate\")}\n                  data-testid=\"input-ordered-datetime\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Select Tests from Catalog</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {(categories || []).map((category: string) => (\n                        <SelectItem key={category} value={category}>{category}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search tests by name...\"\n                      value={catalogSearchQuery}\n                      onChange={(e) => setCatalogSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"search-catalog-tests\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg max-h-64 overflow-y-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">Select</TableHead>\n                      <TableHead>Test Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Price (₹)</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredCatalog.map((test: any, index: number) => {\n                      const isSelected = selectedCatalogTests.some(t => t.test_name === test.test_name);\n                      return (\n                        <TableRow\n                          key={`${test.category}-${test.test_name}-${index}`}\n                          className={isSelected ? \"bg-blue-50\" : \"\"}\n                        >\n                          <TableCell>\n                            <input\n                              type=\"checkbox\"\n                              checked={isSelected}\n                              onChange={() => toggleTestSelection(test)}\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            />\n                          </TableCell>\n                          <TableCell className=\"font-medium\">{test.test_name}</TableCell>\n                          <TableCell>{test.category}</TableCell>\n                          <TableCell>₹{test.price}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {selectedCatalogTests.length > 0 && (\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Selected Tests ({selectedCatalogTests.length})</h4>\n                  <div className=\"space-y-1\">\n                    {selectedCatalogTests.map((test, index) => (\n                      <div key={index} className=\"flex justify-between text-sm\">\n                        <span>{test.test_name}</span>\n                        <span>₹{test.price}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"border-t border-blue-200 mt-2 pt-2 font-medium text-blue-900\">\n                    Total: ₹{getTotalPrice()}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"remarks\">Remarks</Label>\n              <Textarea\n                {...form.register(\"remarks\")}\n                placeholder=\"Enter any additional remarks or instructions\"\n                data-testid=\"input-remarks\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewTestOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createOrderMutation.isPending || selectedCatalogTests.length === 0}\n                data-testid=\"button-order-tests\"\n              >\n                {createOrderMutation.isPending ? \"Ordering...\" : `Order ${selectedCatalogTests.length} Test(s)`}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Order Details Dialog */}\n      {selectedOrder && <OrderDetailsDialog order={selectedOrder} onClose={() => setSelectedOrder(null)} />}\n    </div>\n  );\n}","size_bytes":32064},"client/src/components/layout/topbar.tsx":{"content":"import { Search, Bell, Plus, CalendarDays } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface TopBarProps {\n  title: string;\n  searchPlaceholder?: string;\n  onSearch?: (query: string) => void;\n  onNewAction?: () => void;\n  newActionLabel?: string;\n  showNotifications?: boolean;\n  notificationCount?: number;\n  showDateFilter?: boolean;\n  fromDate?: string;\n  toDate?: string;\n  onFromDateChange?: (date: string) => void;\n  onToDateChange?: (date: string) => void;\n  onTodayClick?: () => void;\n  actions?: React.ReactNode;\n}\n\nexport default function TopBar({\n  title,\n  searchPlaceholder = \"Search...\",\n  onSearch,\n  onNewAction,\n  newActionLabel = \"New\",\n  showNotifications = true,\n  notificationCount = 0,\n  showDateFilter = false,\n  fromDate,\n  toDate,\n  onFromDateChange,\n  onToDateChange,\n  onTodayClick,\n  actions,\n}: TopBarProps) {\n  const currentDate = new Date().toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n\n  return (\n    <header className=\"bg-surface border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-2xl font-bold text-text-dark\" data-testid=\"page-title\">\n            {title}\n          </h2>\n          <div className=\"flex items-center space-x-2 bg-muted px-3 py-1 rounded-full\">\n            <div className=\"w-4 h-4 text-text-muted\">📅</div>\n            <span className=\"text-sm text-text-muted\" data-testid=\"current-date\">\n              {currentDate}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Custom Actions */}\n          {actions}\n          \n          {/* Date Range Filter */}\n          {showDateFilter && (\n            <div className=\"flex items-center gap-4 px-4 py-2 bg-muted/50 rounded-lg border\">\n              <CalendarDays className=\"w-4 h-4 text-text-muted\" />\n              <div className=\"flex items-center gap-2\">\n                <Label htmlFor=\"navbar-from-date\" className=\"text-sm font-medium\">From:</Label>\n                <Input\n                  id=\"navbar-from-date\"\n                  type=\"date\"\n                  value={fromDate}\n                  onChange={(e) => onFromDateChange?.(e.target.value)}\n                  className=\"w-36 text-sm\"\n                  data-testid=\"input-navbar-from-date\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Label htmlFor=\"navbar-to-date\" className=\"text-sm font-medium\">To:</Label>\n                <Input\n                  id=\"navbar-to-date\"\n                  type=\"date\"\n                  value={toDate}\n                  onChange={(e) => onToDateChange?.(e.target.value)}\n                  className=\"w-36 text-sm\"\n                  data-testid=\"input-navbar-to-date\"\n                />\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={onTodayClick}\n                data-testid=\"button-navbar-today\"\n              >\n                Today\n              </Button>\n            </div>\n          )}\n          \n          {/* Search Bar */}\n          {onSearch && (\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder={searchPlaceholder}\n                className=\"w-80 pl-10\"\n                onChange={(e) => onSearch(e.target.value)}\n                data-testid=\"search-input\"\n              />\n              <Search className=\"absolute left-3 top-3 w-4 h-4 text-text-muted\" />\n            </div>\n          )}\n          \n          {/* New Action Button */}\n          {onNewAction && (\n            <Button \n              onClick={onNewAction}\n              className=\"bg-medical-blue hover:bg-medical-blue/90\"\n              data-testid=\"button-new-action\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {newActionLabel}\n            </Button>\n          )}\n          \n          {/* Notifications */}\n          {showNotifications && (\n            <div className=\"relative\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                className=\"relative\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"w-5 h-5\" />\n                {notificationCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center text-xs p-0\"\n                    data-testid=\"notification-count\"\n                  >\n                    {notificationCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5041},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/settings.tsx":{"content":"import React, { useState, useRef, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { \n  Settings as SettingsIcon, \n  Users, \n  Shield, \n  Database, \n  Bell, \n  Palette,\n  Plus,\n  Edit,\n  Trash2,\n  UserPlus,\n  RotateCcw,\n  Check,\n  ChevronsUpDown\n} from \"lucide-react\";\nimport { insertServiceSchema, insertUserSchema, insertSystemSettingsSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { Service, User } from \"@shared/schema\";\nimport AccessRestricted from \"@/components/access-restricted\";\nimport { clearTimezoneCache } from \"@/lib/timezone\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Settings() {\n  const [isNewServiceOpen, setIsNewServiceOpen] = useState(false);\n  const [isNewUserOpen, setIsNewUserOpen] = useState(false);\n  const [isEditUserOpen, setIsEditUserOpen] = useState(false);\n  const [isDeleteUserOpen, setIsDeleteUserOpen] = useState(false);\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userToDelete, setUserToDelete] = useState<User | null>(null);\n  const [hospitalLogo, setHospitalLogo] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const [showRestoreDialog, setShowRestoreDialog] = useState(false);\n  const [selectedBackupFile, setSelectedBackupFile] = useState<string>(\"\");\n  const [showAutoBackupConfig, setShowAutoBackupConfig] = useState(false);\n  const [autoBackupSettings, setAutoBackupSettings] = useState({\n    frequency: 'daily',\n    time: '02:00'\n  });\n  const [pendingSystemSettings, setPendingSystemSettings] = useState<any>(null);\n  const [timezoneOpen, setTimezoneOpen] = useState(false);\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: hospitalSettings, isLoading: settingsLoading } = useQuery({\n    queryKey: [\"/api/settings/hospital\"],\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: systemSettings, isLoading: systemSettingsLoading } = useQuery({\n    queryKey: [\"/api/settings/system\"],\n  });\n\n  const popularTimezones = useMemo(() => {\n    const timezoneList = [\n      { value: 'UTC', label: 'UTC - Coordinated Universal Time' },\n      { value: 'Africa/Cairo', label: 'Egypt - Cairo' },\n      { value: 'Africa/Johannesburg', label: 'South Africa - Johannesburg' },\n      { value: 'Africa/Lagos', label: 'Nigeria - Lagos' },\n      { value: 'Africa/Nairobi', label: 'Kenya - Nairobi' },\n      { value: 'America/Anchorage', label: 'USA - Alaska' },\n      { value: 'America/Argentina/Buenos_Aires', label: 'Argentina - Buenos Aires' },\n      { value: 'America/Bogota', label: 'Colombia - Bogota' },\n      { value: 'America/Caracas', label: 'Venezuela - Caracas' },\n      { value: 'America/Chicago', label: 'USA - Central Time' },\n      { value: 'America/Denver', label: 'USA - Mountain Time' },\n      { value: 'America/Detroit', label: 'USA - Detroit' },\n      { value: 'America/Halifax', label: 'Canada - Halifax' },\n      { value: 'America/Los_Angeles', label: 'USA - Pacific Time' },\n      { value: 'America/Mexico_City', label: 'Mexico - Mexico City' },\n      { value: 'America/New_York', label: 'USA - Eastern Time' },\n      { value: 'America/Phoenix', label: 'USA - Arizona' },\n      { value: 'America/Santiago', label: 'Chile - Santiago' },\n      { value: 'America/Sao_Paulo', label: 'Brazil - Sao Paulo' },\n      { value: 'America/Toronto', label: 'Canada - Toronto' },\n      { value: 'America/Vancouver', label: 'Canada - Vancouver' },\n      { value: 'Asia/Baghdad', label: 'Iraq - Baghdad' },\n      { value: 'Asia/Bangkok', label: 'Thailand - Bangkok' },\n      { value: 'Asia/Beirut', label: 'Lebanon - Beirut' },\n      { value: 'Asia/Colombo', label: 'Sri Lanka - Colombo' },\n      { value: 'Asia/Dhaka', label: 'Bangladesh - Dhaka' },\n      { value: 'Asia/Dubai', label: 'UAE - Dubai' },\n      { value: 'Asia/Hong_Kong', label: 'Hong Kong' },\n      { value: 'Asia/Jakarta', label: 'Indonesia - Jakarta' },\n      { value: 'Asia/Jerusalem', label: 'Israel - Jerusalem' },\n      { value: 'Asia/Kabul', label: 'Afghanistan - Kabul' },\n      { value: 'Asia/Karachi', label: 'Pakistan - Karachi' },\n      { value: 'Asia/Kathmandu', label: 'Nepal - Kathmandu' },\n      { value: 'Asia/Kolkata', label: 'India - New Delhi' },\n      { value: 'Asia/Kuala_Lumpur', label: 'Malaysia - Kuala Lumpur' },\n      { value: 'Asia/Kuwait', label: 'Kuwait' },\n      { value: 'Asia/Manila', label: 'Philippines - Manila' },\n      { value: 'Asia/Muscat', label: 'Oman - Muscat' },\n      { value: 'Asia/Riyadh', label: 'Saudi Arabia - Riyadh' },\n      { value: 'Asia/Seoul', label: 'South Korea - Seoul' },\n      { value: 'Asia/Shanghai', label: 'China - Shanghai' },\n      { value: 'Asia/Singapore', label: 'Singapore' },\n      { value: 'Asia/Taipei', label: 'Taiwan - Taipei' },\n      { value: 'Asia/Tehran', label: 'Iran - Tehran' },\n      { value: 'Asia/Tokyo', label: 'Japan - Tokyo' },\n      { value: 'Atlantic/Azores', label: 'Portugal - Azores' },\n      { value: 'Atlantic/Cape_Verde', label: 'Cape Verde' },\n      { value: 'Atlantic/Reykjavik', label: 'Iceland - Reykjavik' },\n      { value: 'Australia/Adelaide', label: 'Australia - Adelaide' },\n      { value: 'Australia/Brisbane', label: 'Australia - Brisbane' },\n      { value: 'Australia/Darwin', label: 'Australia - Darwin' },\n      { value: 'Australia/Melbourne', label: 'Australia - Melbourne' },\n      { value: 'Australia/Perth', label: 'Australia - Perth' },\n      { value: 'Australia/Sydney', label: 'Australia - Sydney' },\n      { value: 'Europe/Amsterdam', label: 'Netherlands - Amsterdam' },\n      { value: 'Europe/Athens', label: 'Greece - Athens' },\n      { value: 'Europe/Belgrade', label: 'Serbia - Belgrade' },\n      { value: 'Europe/Berlin', label: 'Germany - Berlin' },\n      { value: 'Europe/Brussels', label: 'Belgium - Brussels' },\n      { value: 'Europe/Bucharest', label: 'Romania - Bucharest' },\n      { value: 'Europe/Budapest', label: 'Hungary - Budapest' },\n      { value: 'Europe/Copenhagen', label: 'Denmark - Copenhagen' },\n      { value: 'Europe/Dublin', label: 'Ireland - Dublin' },\n      { value: 'Europe/Helsinki', label: 'Finland - Helsinki' },\n      { value: 'Europe/Istanbul', label: 'Turkey - Istanbul' },\n      { value: 'Europe/Kiev', label: 'Ukraine - Kiev' },\n      { value: 'Europe/Lisbon', label: 'Portugal - Lisbon' },\n      { value: 'Europe/London', label: 'UK - London' },\n      { value: 'Europe/Madrid', label: 'Spain - Madrid' },\n      { value: 'Europe/Moscow', label: 'Russia - Moscow' },\n      { value: 'Europe/Oslo', label: 'Norway - Oslo' },\n      { value: 'Europe/Paris', label: 'France - Paris' },\n      { value: 'Europe/Prague', label: 'Czech Republic - Prague' },\n      { value: 'Europe/Rome', label: 'Italy - Rome' },\n      { value: 'Europe/Stockholm', label: 'Sweden - Stockholm' },\n      { value: 'Europe/Vienna', label: 'Austria - Vienna' },\n      { value: 'Europe/Warsaw', label: 'Poland - Warsaw' },\n      { value: 'Europe/Zurich', label: 'Switzerland - Zurich' },\n      { value: 'Pacific/Auckland', label: 'New Zealand - Auckland' },\n      { value: 'Pacific/Fiji', label: 'Fiji' },\n      { value: 'Pacific/Guam', label: 'Guam' },\n      { value: 'Pacific/Honolulu', label: 'USA - Hawaii' },\n      { value: 'Pacific/Midway', label: 'Midway Island' },\n      { value: 'Pacific/Port_Moresby', label: 'Papua New Guinea' },\n      { value: 'Pacific/Tongatapu', label: 'Tonga' },\n    ];\n    return timezoneList;\n  }, []);\n\n  const getTimezoneOffset = (timezone: string): string => {\n    try {\n      const date = new Date();\n      const formatter = new Intl.DateTimeFormat('en-US', {\n        timeZone: timezone,\n        timeZoneName: 'longOffset'\n      });\n      const parts = formatter.formatToParts(date);\n      const offsetPart = parts.find(part => part.type === 'timeZoneName');\n      if (offsetPart && offsetPart.value.includes('GMT')) {\n        const match = offsetPart.value.match(/GMT([+-]\\d{1,2}):?(\\d{2})?/);\n        if (match) {\n          const hours = match[1];\n          const minutes = match[2] || '00';\n          return `${hours.padStart(3, '0')}:${minutes}`;\n        }\n      }\n      return '+00:00';\n    } catch (error) {\n      return '+00:00';\n    }\n  };\n\n  React.useEffect(() => {\n    if (systemSettings && !pendingSystemSettings) {\n      setPendingSystemSettings(systemSettings);\n    }\n  }, [systemSettings]);\n\n  const { data: backupHistory = [], isLoading: backupHistoryLoading, refetch: refetchBackupHistory } = useQuery({\n    queryKey: [\"/api/backup/history\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/backup/history\", {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}` }\n      });\n\n      if (!response.ok) {\n        return []; // Return empty array on error\n      }\n\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n  });\n\n  // Get all backup logs (including restores) for finding last restored\n  const { data: allBackupLogs = [] } = useQuery({\n    queryKey: [\"/api/backup/logs\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/backup/logs\", {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}` }\n      });\n\n      if (!response.ok) {\n        return []; // Return empty array on error\n      }\n\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n  });\n\n  const { data: availableBackups = [], refetch: refetchAvailableBackups } = useQuery({\n    queryKey: [\"/api/backup/available\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/backup/available\", {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}` }\n      });\n\n      if (!response.ok) {\n        return []; // Return empty array on error\n      }\n\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: showRestoreDialog,\n  });\n\n  const saveHospitalSettingsMutation = useMutation({\n    mutationFn: async (settingsData: any) => {\n      const response = await fetch(\"/api/settings/hospital\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(settingsData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save hospital settings\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/hospital\"] });\n      toast({\n        title: \"Settings saved successfully\",\n        description: \"Hospital information has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error saving settings\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (serviceData: any) => {\n      const response = await fetch(\"/api/services\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(serviceData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create service\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setIsNewServiceOpen(false);\n      serviceForm.reset();\n      toast({\n        title: \"Service created successfully\",\n        description: \"The service has been added to the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating service\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create user\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsNewUserOpen(false);\n      userForm.reset();\n      toast({\n        title: \"User created successfully\",\n        description: \"The user account has been created.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating user\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, userData }: { id: string; userData: any }) => {\n      // Filter out empty password field to avoid updating it\n      const filteredData = { ...userData };\n      if (!filteredData.password || filteredData.password.trim() === '') {\n        delete filteredData.password;\n      }\n\n      const response = await fetch(`/api/users/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(filteredData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update user\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsEditUserOpen(false);\n      editUserForm.reset();\n      toast({\n        title: \"User updated successfully\",\n        description: \"The user account has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error updating user\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete user\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsDeleteUserOpen(false);\n      setUserToDelete(null);\n      toast({\n        title: \"User deleted successfully\",\n        description: \"The user account has been deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error deleting user\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveSystemSettingsMutation = useMutation({\n    mutationFn: async (settingsData: any) => {\n      const response = await fetch(\"/api/settings/system\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(settingsData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save system settings\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/system\"] });\n      toast({\n        title: \"Settings saved successfully\",\n        description: \"System configuration has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error saving settings\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createBackupMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/backup/create\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({ backupType: 'manual' }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create backup\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/backup/history\"] });\n      refetchAvailableBackups();\n      toast({\n        title: \"Manual backup created successfully\",\n        description: \"Your data has been backed up securely.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error creating backup\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const restoreBackupMutation = useMutation({\n    mutationFn: async (backupFilePath: string) => {\n      const response = await fetch(\"/api/backup/restore\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({ backupFilePath }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to restore backup\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Backup restored successfully. Please refresh the page to see changes.\",\n      });\n      setShowRestoreDialog(false);\n      setSelectedBackupFile(\"\");\n      refetchBackupHistory();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const serviceForm = useForm({\n    resolver: zodResolver(insertServiceSchema),\n    defaultValues: {\n      name: \"\",\n      category: \"\",\n      price: 0,\n      description: \"\",\n    },\n  });\n\n  const userForm = useForm({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      fullName: \"\",\n      roles: [],\n    },\n  });\n\n  const editUserForm = useForm({\n    defaultValues: {\n      username: \"\",\n      fullName: \"\",\n      roles: [],\n    },\n  });\n\n  const hospitalForm = useForm({\n    defaultValues: {\n      name: hospitalSettings?.name || \"MedCare Pro Hospital\",\n      address: hospitalSettings?.address || \"123 Healthcare Street, Medical District, City - 123456\",\n      phone: hospitalSettings?.phone || \"+91 98765 43210\",\n      email: hospitalSettings?.email || \"info@medcarepro.com\",\n      registrationNumber: hospitalSettings?.registrationNumber || \"\",\n    },\n  });\n\n  // Update form when hospital settings are loaded\n  React.useEffect(() => {\n    if (hospitalSettings) {\n      hospitalForm.reset({\n        name: hospitalSettings.name,\n        address: hospitalSettings.address,\n        phone: hospitalSettings.phone,\n        email: hospitalSettings.email,\n        registrationNumber: hospitalSettings.registrationNumber,\n      });\n      setHospitalLogo(hospitalSettings.logoPath);\n    }\n  }, [hospitalSettings, hospitalForm]);\n\n  const onServiceSubmit = (data: any) => {\n    createServiceMutation.mutate(data);\n  };\n\n  const onUserSubmit = (data: any) => {\n    createUserMutation.mutate(data);\n  };\n\n  const onEditUserSubmit = (data: any) => {\n    if (!selectedUser) return;\n    updateUserMutation.mutate({ id: selectedUser.id, userData: data });\n  };\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    editUserForm.reset({\n      username: user.username,\n      fullName: user.fullName,\n      roles: user.roles || [user.role], // Backward compatibility\n    });\n    setIsEditUserOpen(true);\n  };\n\n  const handleDeleteUser = (user: User) => {\n    setUserToDelete(user);\n    setIsDeleteUserOpen(true);\n  };\n\n  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (file.size > 2 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image under 2MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      setHospitalLogo(result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const onHospitalSettingsSubmit = (data: any) => {\n    saveHospitalSettingsMutation.mutate({\n      ...data,\n      logoPath: hospitalLogo,\n    });\n  };\n\n  const handleSystemSettingChange = (field: string, value: boolean | string) => {\n    if (field === 'autoBackup' && value) {\n      // Show configuration dialog when enabling auto backup\n      setAutoBackupSettings({\n        frequency: pendingSystemSettings?.backupFrequency || 'daily',\n        time: pendingSystemSettings?.backupTime || '02:00'\n      });\n      setShowAutoBackupConfig(true);\n      return;\n    }\n\n    const updatedSettings = {\n      ...pendingSystemSettings,\n      [field]: value,\n    };\n\n    setPendingSystemSettings(updatedSettings);\n  };\n\n  const handleSaveSystemSettings = () => {\n    saveSystemSettingsMutation.mutate(pendingSystemSettings);\n\n    // Clear timezone cache and invalidate queries when timezone settings are updated\n    if ((pendingSystemSettings as any)?.timezone !== (systemSettings as any)?.timezone || \n        (pendingSystemSettings as any)?.timezoneOffset !== (systemSettings as any)?.timezoneOffset) {\n      clearTimezoneCache();\n      // Force all components to re-fetch system settings to get the new timezone\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/system\"] });\n    }\n  };\n\n  const handleTimezoneChange = (timezoneValue: string) => {\n    const selectedTimezone = popularTimezones.find(tz => tz.value === timezoneValue);\n    if (selectedTimezone) {\n      const dynamicOffset = getTimezoneOffset(selectedTimezone.value);\n      const updatedSettings = {\n        ...pendingSystemSettings,\n        timezone: selectedTimezone.value,\n        timezoneOffset: dynamicOffset,\n      };\n      setPendingSystemSettings(updatedSettings);\n      setTimezoneOpen(false);\n    }\n  };\n\n  const handleAutoBackupConfigSave = () => {\n    const updatedSettings = {\n      ...pendingSystemSettings,\n      autoBackup: true,\n      backupFrequency: autoBackupSettings.frequency,\n      backupTime: autoBackupSettings.time\n    };\n\n    setPendingSystemSettings(updatedSettings);\n    setShowAutoBackupConfig(false);\n  };\n\n  const handleCreateBackup = () => {\n    createBackupMutation.mutate();\n  };\n\n\n\n  const handleRestoreBackup = () => {\n    if (selectedBackupFile) {\n      restoreBackupMutation.mutate(selectedBackupFile);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const serviceCategories = [\n    \"consultation\",\n    \"pathology\", \n    \"radiology\",\n    \"procedure\",\n    \"surgery\",\n    \"pharmacy\",\n    \"emergency\"\n  ];\n\n  const userRoles = [\n    \"super_user\",\n    \"admin\",\n    \"doctor\",\n    \"receptionist\", \n    \"billing_staff\"\n  ];\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'consultation':\n        return 'bg-blue-100 text-blue-800';\n      case 'pathology':\n        return 'bg-purple-100 text-purple-800';\n      case 'radiology':\n        return 'bg-green-100 text-green-800';\n      case 'procedure':\n        return 'bg-orange-100 text-orange-800';\n      case 'surgery':\n        return 'bg-red-100 text-red-800';\n      case 'pharmacy':\n        return 'bg-teal-100 text-teal-800';\n      case 'emergency':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'super_user':\n        return 'bg-gray-100 text-gray-600 border border-gray-300'; // Silver styling\n      case 'admin':\n        return 'bg-red-100 text-red-800';\n      case 'doctor':\n        return 'bg-blue-100 text-blue-800';\n      case 'receptionist':\n        return 'bg-green-100 text-green-800';\n      case 'billing_staff':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Only show settings if user has admin or super_user role\n  const currentUserRoles = user?.roles || [user?.role]; // Backward compatibility\n  const hasAccess = currentUserRoles.includes('admin') || currentUserRoles.includes('super_user');\n\n  if (!hasAccess) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"System Settings\" />\n        <div className=\"p-6\">\n          <AccessRestricted \n            title=\"Access Restricted\"\n            description=\"Only administrators and super users can access system settings.\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"System Settings\" />\n\n      <div className=\"p-6\">\n        <Tabs defaultValue=\"users\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"system\" data-testid=\"tab-system\">System</TabsTrigger>\n            <TabsTrigger value=\"backup\" data-testid=\"tab-backup\">Backup</TabsTrigger>\n          </TabsList>\n\n\n\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>User Management</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Manage system users and their roles\n                    </p>\n                  </div>\n                  <Button \n                    onClick={() => setIsNewUserOpen(true)}\n                    className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                    data-testid=\"button-add-user\"\n                  >\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Add User\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {usersLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Loading users...</p>\n                  </div>\n                ) : users?.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No users found</p>\n                    <Button \n                      onClick={() => setIsNewUserOpen(true)}\n                      className=\"mt-4\"\n                      data-testid=\"button-first-user\"\n                    >\n                      Add your first user\n                    </Button>\n                  </div>\n                ) : (\n                  <Table data-testid=\"users-table\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Full Name</TableHead>\n                        <TableHead>Username</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {users?.map((tableUser: User) => (\n                        <TableRow key={tableUser.id} data-testid={`user-row-${tableUser.id}`}>\n                          <TableCell className=\"font-medium\" data-testid={`user-name-${tableUser.id}`}>\n                            {tableUser.fullName}\n                          </TableCell>\n                          <TableCell data-testid={`user-username-${tableUser.id}`}>\n                            {tableUser.username}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {(tableUser.roles || [tableUser.role]).map((role: string) => (\n                                <Badge \n                                  key={role}\n                                  variant=\"default\"\n                                  className={getRoleColor(role)}\n                                  data-testid={`user-role-${tableUser.id}-${role}`}\n                                >\n                                  {role === 'super_user' ? 'Super User' : role.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                                </Badge>\n                              ))}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant=\"default\"\n                              className=\"bg-green-100 text-green-800\"\n                              data-testid={`user-status-${tableUser.id}`}\n                            >\n                              Active\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              {(() => {\n                                const targetUserRoles = tableUser.roles || [tableUser.role];\n                                const isEditingSelf = tableUser.id === user?.id;\n                                const currentUserIsAdmin = currentUserRoles.includes('admin');\n                                const currentUserIsSuperUser = currentUserRoles.includes('super_user');\n                                const targetIsAdmin = targetUserRoles.includes('admin');\n                                const targetIsSuperUser = targetUserRoles.includes('super_user');\n\n                                // Don't show edit button for root user unless current user is super user\n                                if (tableUser.username === 'root' && !currentUserIsSuperUser) {\n                                  return null;\n                                }\n\n                                let disabled = false;\n\n                                if (currentUserIsSuperUser) {\n                                  // Super users can edit anyone\n                                  disabled = false;\n                                } else if (currentUserIsAdmin) {\n                                  // Admins can edit themselves and non-admin users\n                                  disabled = !isEditingSelf && (targetIsAdmin || targetIsSuperUser);\n                                } else {\n                                  // Non-admin users can edit themselves and other non-admin, non-super users\n                                  disabled = !isEditingSelf && (targetIsAdmin || targetIsSuperUser);\n                                }\n\n                                return (\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    onClick={() => handleEditUser(tableUser)}\n                                    disabled={disabled}\n                                    data-testid={`button-edit-user-${tableUser.id}`}\n                                  >\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                );\n                              })()}\n                              {tableUser.username !== 'root' && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-destructive hover:text-destructive\"\n                                  onClick={() => handleDeleteUser(tableUser)}\n                                  disabled={\n                                    tableUser.id === user?.id || // Prevent deleting self\n                                    ((tableUser.roles || [tableUser.role]).includes('admin') && !currentUserRoles.includes('super_user')) || // Only super users can delete admin accounts\n                                    ((tableUser.roles || [tableUser.role]).includes('super_user') && !currentUserRoles.includes('super_user')) // Only super users can delete super_user accounts\n                                  }\n                                  data-testid={`button-delete-user-${tableUser.id}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"system\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>System Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {systemSettingsLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                      <p className=\"text-sm text-muted-foreground mt-2\">Loading system settings...</p>\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label className=\"text-base\">Email Notifications</Label>\n                          <p className=\"text-sm text-muted-foreground\">Send email alerts for important events</p>\n                        </div>\n                        <Switch \n                          checked={pendingSystemSettings?.emailNotifications || false}\n                          onCheckedChange={(checked) => handleSystemSettingChange('emailNotifications', checked)}\n                          data-testid=\"switch-email-notifications\" \n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label className=\"text-base\">SMS Notifications</Label>\n                          <p className=\"text-sm text-muted-foreground\">Send SMS alerts to patients</p>\n                        </div>\n                        <Switch \n                          checked={pendingSystemSettings?.smsNotifications || false}\n                          onCheckedChange={(checked) => handleSystemSettingChange('smsNotifications', checked)}\n                          data-testid=\"switch-sms-notifications\" \n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label className=\"text-base\">Auto Backup</Label>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {pendingSystemSettings?.autoBackup \n                              ? `Automatically backup data ${pendingSystemSettings.backupFrequency || 'daily'} at ${pendingSystemSettings.backupTime || '02:00'}`\n                              : 'Automatically backup data at scheduled intervals'\n                            }\n                          </p>\n                        </div>\n                        <Switch \n                          checked={pendingSystemSettings?.autoBackup || false}\n                          onCheckedChange={(checked) => handleSystemSettingChange('autoBackup', checked)}\n                          data-testid=\"switch-auto-backup\" \n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label className=\"text-base\">Audit Logging</Label>\n                          <p className=\"text-sm text-muted-foreground\">Track all user actions</p>\n                        </div>\n                        <Switch \n                          checked={pendingSystemSettings?.auditLogging || false}\n                          onCheckedChange={(checked) => handleSystemSettingChange('auditLogging', checked)}\n                          data-testid=\"switch-audit-logging\" \n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-base\">System Timezone</Label>\n                        <p className=\"text-sm text-muted-foreground\">All timestamps will be displayed in this timezone</p>\n                        <Popover open={timezoneOpen} onOpenChange={setTimezoneOpen}>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              role=\"combobox\"\n                              aria-expanded={timezoneOpen}\n                              className=\"w-full justify-between\"\n                              data-testid=\"button-timezone-selector\"\n                            >\n                              <span className=\"flex-1 text-left truncate\">\n                                {pendingSystemSettings?.timezone \n                                  ? (() => {\n                                      const tz = popularTimezones.find(tz => tz.value === pendingSystemSettings.timezone);\n                                      const offset = pendingSystemSettings.timezoneOffset || getTimezoneOffset(pendingSystemSettings.timezone);\n                                      return tz ? `${tz.label}   UTC${offset}` : pendingSystemSettings.timezone;\n                                    })()\n                                  : 'Select timezone...'}\n                              </span>\n                              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0\">\n                            <Command>\n                              <CommandInput placeholder=\"Search timezone...\" data-testid=\"input-timezone-search\" />\n                              <CommandList>\n                                <CommandEmpty>No timezone found.</CommandEmpty>\n                                <CommandGroup>\n                                  {popularTimezones.map((timezone) => {\n                                    const offset = getTimezoneOffset(timezone.value);\n                                    return (\n                                      <CommandItem\n                                        key={timezone.value}\n                                        value={timezone.label}\n                                        onSelect={() => handleTimezoneChange(timezone.value)}\n                                        data-testid={`timezone-option-${timezone.value}`}\n                                      >\n                                        <Check\n                                          className={cn(\n                                            \"mr-2 h-4 w-4\",\n                                            pendingSystemSettings?.timezone === timezone.value ? \"opacity-100\" : \"opacity-0\"\n                                          )}\n                                        />\n                                        <span className=\"flex-1\">{timezone.label}</span>\n                                        <span className=\"text-xs text-muted-foreground ml-2\">UTC{offset}</span>\n                                      </CommandItem>\n                                    );\n                                  })}\n                                </CommandGroup>\n                              </CommandList>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n\n                      <Button \n                        onClick={handleSaveSystemSettings}\n                        className=\"w-full bg-medical-blue hover:bg-medical-blue/90\"\n                        disabled={saveSystemSettingsMutation.isPending}\n                        data-testid=\"button-save-system-settings\"\n                      >\n                        {saveSystemSettingsMutation.isPending ? \"Saving...\" : \"Save System Configuration\"}\n                      </Button>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Hospital Information</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={hospitalForm.handleSubmit(onHospitalSettingsSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Hospital Logo</Label>\n                      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                        <div className=\"space-y-2\">\n                          {hospitalLogo ? (\n                            <div className=\"w-16 h-16 mx-auto rounded-lg overflow-hidden\">\n                              <img \n                                src={hospitalLogo} \n                                alt=\"Hospital Logo\" \n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                          ) : (\n                            <div className=\"w-16 h-16 mx-auto bg-gray-100 rounded-lg flex items-center justify-center\">\n                              <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                              </svg>\n                            </div>\n                          )}\n                          <div>\n                            <Input \n                              ref={fileInputRef}\n                              type=\"file\" \n                              accept=\"image/*\" \n                              className=\"hidden\" \n                              id=\"logo-upload\"\n                              onChange={handleLogoUpload}\n                              data-testid=\"input-hospital-logo\"\n                            />\n                            <Label \n                              htmlFor=\"logo-upload\" \n                              className=\"cursor-pointer text-sm text-blue-600 hover:text-blue-500\"\n                            >\n                              {hospitalLogo ? 'Change Hospital Logo' : 'Upload Hospital Logo'}\n                            </Label>\n                            <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG, GIF up to 2MB</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Hospital Name</Label>\n                      <Input \n                        {...hospitalForm.register(\"name\")}\n                        data-testid=\"input-hospital-name\" \n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Address</Label>\n                      <Textarea \n                        {...hospitalForm.register(\"address\")}\n                        rows={3}\n                        data-testid=\"input-hospital-address\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Phone</Label>\n                        <Input \n                          {...hospitalForm.register(\"phone\")}\n                          data-testid=\"input-hospital-phone\" \n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label>Email</Label>\n                        <Input \n                          {...hospitalForm.register(\"email\")}\n                          data-testid=\"input-hospital-email\" \n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Registration Number</Label>\n                      <Input \n                        {...hospitalForm.register(\"registrationNumber\")}\n                        placeholder=\"Hospital registration number\"\n                        data-testid=\"input-hospital-registration\" \n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\"\n                      className=\"w-full\" \n                      disabled={saveHospitalSettingsMutation.isPending}\n                      data-testid=\"button-save-hospital-info\"\n                    >\n                      {saveHospitalSettingsMutation.isPending ? \"Saving...\" : \"Save Hospital Information\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"backup\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Data Backup</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"text-center py-4\">\n                    <Database className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground mb-4\">Protect your hospital data with regular backups</p>\n\n                    <div className=\"space-y-2\">\n                      <Button \n                        onClick={handleCreateBackup}\n                        disabled={createBackupMutation.isPending}\n                        className=\"w-full\" \n                        data-testid=\"button-create-backup\"\n                      >\n                        <Database className=\"w-4 h-4 mr-2\" />\n                        {createBackupMutation.isPending ? \"Creating...\" : \"Create Manual Backup\"}\n                      </Button>\n\n\n\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\" \n                        data-testid=\"button-restore-backup\"\n                        onClick={() => setShowRestoreDialog(true)}\n                      >\n                        <RotateCcw className=\"w-4 h-4 mr-2\" />\n                        Restore from Backup\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground\">\n                    <p>Last backup: {backupHistory && backupHistory.length > 0 \n                      ? new Date(backupHistory[0].createdAt).toLocaleString()\n                      : 'Never'\n                    }</p>\n                    <p>Auto backup: {systemSettings?.autoBackup \n                      ? `${systemSettings.backupFrequency} at ${systemSettings.backupTime}`\n                      : 'Disabled'\n                    }</p>\n                    <p>Last restored: {(() => {\n                      // Find the most recent restore operation from all backup logs\n                      if (!allBackupLogs || !Array.isArray(allBackupLogs)) {\n                        return 'N/A';\n                      }\n                      const restoreOperations = allBackupLogs\n                        .filter((log: any) => log.backupType === 'restore' && log.status === 'completed')\n                        .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n                      return restoreOperations.length > 0 \n                        ? new Date(restoreOperations[0].createdAt).toLocaleString()\n                        : 'N/A';\n                    })()}</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Backup History</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {backupHistoryLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                      <p className=\"text-sm text-muted-foreground mt-2\">Loading backup history...</p>\n                    </div>\n                  ) : !backupHistory || backupHistory.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Database className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No backups created yet</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                      {backupHistory.slice(0, 10).map((backup: any) => (\n                        <div key={backup.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-sm\">{backup.backupId}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {backup.backupType === 'auto' ? 'Automatic' : 'Manual'} • \n                              {new Date(backup.createdAt).toLocaleString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant={backup.status === 'completed' ? 'default' : 'secondary'}>\n                              {backup.status}\n                            </Badge>\n                            {backup.size && (\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                {(backup.size / (1024 * 1024)).toFixed(2)} MB\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  <div className=\"pt-4 border-t\">\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Total Backups</p>\n                        <p className=\"font-medium\">{backupHistory?.length || 0}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Backup Storage</p>\n                        <p className=\"font-medium\">\n                          {backupHistory && backupHistory.length > 0 \n                            ? `${(backupHistory.reduce((sum: number, b: any) => sum + (b.size || 0), 0) / (1024 * 1024)).toFixed(2)} MB`\n                            : '0 MB'\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* New Service Dialog */}\n      <Dialog open={isNewServiceOpen} onOpenChange={setIsNewServiceOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-service-dialog\">\n          <DialogHeader>\n            <DialogTitle>Add New Service</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={serviceForm.handleSubmit(onServiceSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"serviceName\">Service Name *</Label>\n                <Input\n                  id=\"serviceName\"\n                  {...serviceForm.register(\"name\")}\n                  placeholder=\"e.g., Blood Test\"\n                  data-testid=\"input-service-name\"\n                />\n                {serviceForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{serviceForm.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category *</Label>\n                <Select onValueChange={(value) => serviceForm.setValue(\"category\", value)}>\n                  <SelectTrigger data-testid=\"select-service-category\">\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {serviceCategories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category.charAt(0).toUpperCase() + category.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {serviceForm.formState.errors.category && (\n                  <p className=\"text-sm text-destructive\">{serviceForm.formState.errors.category.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"price\">Price (₹) *</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                step=\"0.01\"\n                {...serviceForm.register(\"price\", { valueAsNumber: true })}\n                placeholder=\"0.00\"\n                data-testid=\"input-service-price\"\n              />\n              {serviceForm.formState.errors.price && (\n                <p className=\"text-sm text-destructive\">{serviceForm.formState.errors.price.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                {...serviceForm.register(\"description\")}\n                placeholder=\"Optional description of the service\"\n                rows={3}\n                data-testid=\"input-service-description\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewServiceOpen(false)}\n                data-testid=\"button-cancel-service\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createServiceMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-service\"\n              >\n                {createServiceMutation.isPending ? \"Adding...\" : \"Add Service\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* New User Dialog */}\n      <Dialog open={isNewUserOpen} onOpenChange={setIsNewUserOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-user-dialog\">\n          <DialogHeader>\n            <DialogTitle>Add New User</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={userForm.handleSubmit(onUserSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Full Name *</Label>\n                <Input\n                  id=\"fullName\"\n                  {...userForm.register(\"fullName\")}\n                  placeholder=\"John Doe\"\n                  data-testid=\"input-user-fullname\"\n                />\n                {userForm.formState.errors.fullName && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.fullName.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username *</Label>\n                <Input\n                  id=\"username\"\n                  {...userForm.register(\"username\")}\n                  placeholder=\"johndoe\"\n                  data-testid=\"input-user-username\"\n                />\n                {userForm.formState.errors.username && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.username.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  {...userForm.register(\"password\")}\n                  placeholder=\"••••••••\"\n                  data-testid=\"input-user-password\"\n                />\n                {userForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.password.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Roles *</Label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {userRoles.map((role) => {\n                    // Disable admin and super_user roles for admin users (not super users)\n                    const isRoleDisabled = currentUserRoles.includes('admin') && \n                                         !currentUserRoles.includes('super_user') && \n                                         (role === 'admin' || role === 'super_user');\n\n                    return (\n                      <div key={role} className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id={`role-${role}`}\n                          checked={userForm.watch(\"roles\").includes(role)}\n                          disabled={isRoleDisabled}\n                          onChange={(e) => {\n                            const currentRoles = userForm.watch(\"roles\");\n                            if (e.target.checked) {\n                              userForm.setValue(\"roles\", [...currentRoles, role]);\n                            } else {\n                              userForm.setValue(\"roles\", currentRoles.filter(r => r !== role));\n                            }\n                          }}\n                          data-testid={`checkbox-role-${role}`}\n                        />\n                        <Label htmlFor={`role-${role}`} className={`text-sm ${isRoleDisabled ? 'text-gray-400' : ''}`}>\n                          {role === 'super_user' ? 'Super User' : role.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                        </Label>\n                      </div>\n                    );\n                  })}\n                </div>\n                {userForm.formState.errors.roles && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.roles.message}</p>\n                )}\n                {currentUserRoles.includes('admin') && !currentUserRoles.includes('super_user') && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    Note: Admin users cannot grant admin or super user roles.\n                  </p>\n                )}\n              </div>\n\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewUserOpen(false)}\n                data-testid=\"button-cancel-user\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createUserMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-user\"\n              >\n                {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit User Dialog */}\n      <Dialog open={isEditUserOpen} onOpenChange={setIsEditUserOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"edit-user-dialog\">\n          <DialogHeader>\n            <DialogTitle>Edit User: {selectedUser?.fullName}</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={editUserForm.handleSubmit(onEditUserSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editFullName\">Full Name *</Label>\n                <Input\n                  id=\"editFullName\"\n                  {...editUserForm.register(\"fullName\")}\n                  placeholder=\"John Doe\"\n                  data-testid=\"input-edit-user-fullname\"\n                />\n                {editUserForm.formState.errors.fullName && (\n                  <p className=\"text-sm text-destructive\">{editUserForm.formState.errors.fullName.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editUsername\">Username *</Label>\n                <Input\n                  id=\"editUsername\"\n                  {...editUserForm.register(\"username\")}\n                  placeholder=\"johndoe\"\n                  data-testid=\"input-edit-user-username\"\n                />\n                {editUserForm.formState.errors.username && (\n                  <p className=\"text-sm text-destructive\">{editUserForm.formState.errors.username.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editPassword\">New Password</Label>\n                <Input\n                  id=\"editPassword\"\n                  type=\"password\"\n                  {...editUserForm.register(\"password\")}\n                  placeholder=\"Leave empty to keep current\"\n                  data-testid=\"input-edit-user-password\"\n                />\n                {editUserForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">{editUserForm.formState.errors.password.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Roles *</Label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {userRoles.map((role) => {\n                    const isEditingSelf = selectedUser?.id === user?.id;\n                    const currentUserIsAdmin = currentUserRoles.includes('admin');\n                    const currentUserIsSuperUser = currentUserRoles.includes('super_user');\n\n                    let isRoleDisabled = false;\n\n                    if (currentUserIsSuperUser) {\n                      // Super users can grant any role (no restrictions)\n                      isRoleDisabled = false;\n                    } else if (currentUserIsAdmin) {\n                      // Admins cannot modify their own roles or grant admin/super_user roles\n                      if (isEditingSelf) {\n                        isRoleDisabled = true; // Cannot modify own roles\n                      } else {\n                        isRoleDisabled = role === 'admin' || role === 'super_user'; // Cannot grant admin/super roles\n                      }\n                    } else {\n                      // Non-admin users cannot modify their own roles or grant admin/super_user roles\n                      if (isEditingSelf) {\n                        isRoleDisabled = true; // Cannot modify own roles\n                      } else {\n                        isRoleDisabled = role === 'admin' || role === 'super_user'; // Cannot grant admin/super roles\n                      }\n                    }\n\n                    return (\n                      <div key={role} className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id={`edit-role-${role}`}\n                          checked={editUserForm.watch(\"roles\").includes(role)}\n                          disabled={isRoleDisabled}\n                          onChange={(e) => {\n                            const currentRoles = editUserForm.watch(\"roles\");\n                            if (e.target.checked) {\n                              editUserForm.setValue(\"roles\", [...currentRoles, role]);\n                            } else {\n                              editUserForm.setValue(\"roles\", currentRoles.filter(r => r !== role));\n                            }\n                          }}\n                          data-testid={`edit-checkbox-role-${role}`}\n                        />\n                        <Label htmlFor={`edit-role-${role}`} className={`text-sm ${isRoleDisabled ? 'text-gray-400' : ''}`}>\n                          {role === 'super_user' ? 'Super User' : role.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                        </Label>\n                      </div>\n                    );\n                  })}\n                </div>\n                {editUserForm.formState.errors.roles && (\n                  <p className=\"text-sm text-destructive\">{editUserForm.formState.errors.roles.message}</p>\n                )}\n                {!currentUserRoles.includes('super_user') && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    Note: {currentUserRoles.includes('admin') ? 'Admin users' : 'Users'} cannot grant admin or super user roles, and cannot modify their own roles.\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditUserOpen(false)}\n                data-testid=\"button-cancel-edit-user\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateUserMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-edit-user\"\n              >\n                {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete User Confirmation Dialog */}\n      <Dialog open={isDeleteUserOpen} onOpenChange={setIsDeleteUserOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Deactivate User Account</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to deactivate {userToDelete?.fullName}? This will:\n              <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                <li>Prevent the user from logging in</li>\n                <li>Free up the username \"{userToDelete?.username}\" for reuse</li>\n                <li>Keep all historical records intact (bills, activities, etc.)</li>\n                <li>Hide the user from the user management list</li>\n              </ul>\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsDeleteUserOpen(false);\n                setUserToDelete(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => {\n                if (userToDelete) {\n                  deleteUserMutation.mutate(userToDelete.id);\n                }\n              }}\n              disabled={deleteUserMutation.isPending}\n            >\n              {deleteUserMutation.isPending ? \"Deactivating...\" : \"Deactivate Account\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Auto Backup Configuration Dialog */}\n      <Dialog open={showAutoBackupConfig} onOpenChange={setShowAutoBackupConfig}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Configure Auto Backup</DialogTitle>\n            <DialogDescription>\n              Set up your automatic backup schedule. Backups will run at the specified time.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"backup-frequency\">Backup Frequency</Label>\n              <Select \n                value={autoBackupSettings.frequency} \n                onValueChange={(value) => setAutoBackupSettings(prev => ({ ...prev, frequency: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select frequency\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"daily\">Daily</SelectItem>\n                  <SelectItem value=\"weekly\">Weekly (Sundays)</SelectItem>\n                  <SelectItem value=\"monthly\">Monthly (1st of month)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"backup-time\">Backup Time</Label>\n              <Input\n                id=\"backup-time\"\n                type=\"time\"\n                value={autoBackupSettings.time}\n                onChange={(e) => setAutoBackupSettings(prev => ({ ...prev, time: e.target.value }))}\n                className=\"w-full\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Time is in Indian Standard Time (IST)\n              </p>\n            </div>\n\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-4 h-4 rounded-full bg-blue-500 mt-0.5 flex-shrink-0\"></div>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium text-blue-800\">Schedule Preview</p>\n                  <p className=\"text-blue-700\">\n                    Backups will run {autoBackupSettings.frequency} at {autoBackupSettings.time} IST\n                    {autoBackupSettings.frequency === 'weekly' && ' (every Sunday)'}\n                    {autoBackupSettings.frequency === 'monthly' && ' (on the 1st of each month)'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAutoBackupConfig(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleAutoBackupConfigSave}>\n              Enable Auto Backup\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Restore Backup Dialog */}\n      <Dialog open={showRestoreDialog} onOpenChange={setShowRestoreDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Restore from Backup</DialogTitle>\n            <DialogDescription>\n              Select a backup file to restore your hospital data. This will overwrite all current data.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"max-h-64 overflow-y-auto border rounded-lg\">\n              {availableBackups.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Database className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No backup files found</p>\n                </div>\n              ) : (\n                <div className=\"space-y-2 p-4\">\n                  {availableBackups.map((backup: any) => (\n                    <div \n                      key={backup.fileName}\n                      className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer hover:bg-gray-50 ${\n                        selectedBackupFile === backup.filePath ? 'bg-blue-50 border-blue-200' : ''\n                      }`}\n                      onClick={() => setSelectedBackupFile(backup.filePath)}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{backup.fileName}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Created: {new Date(backup.createdAt).toLocaleString()}\n                        </p>\n                        {backup.backupLog && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            Backup ID: {backup.backupLog.backupId}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-xs text-muted-foreground\">\n                          {(backup.fileSize / (1024 * 1024)).toFixed(2)} MB\n                        </p>\n                        {selectedBackupFile === backup.filePath && (\n                          <Badge variant=\"default\" className=\"mt-1\">Selected</Badge>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {selectedBackupFile && (\n              <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <div className=\"flex items-start space-x-2\">\n                  <Shield className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-yellow-800\">Warning</p>\n                    <p className=\"text-sm text-yellow-700\">\n                      This action will completely replace all current data with the backup data. \n                      This cannot be undone. Make sure to create a current backup before proceeding.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowRestoreDialog(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleRestoreBackup}\n              disabled={!selectedBackupFile || restoreBackupMutation.isPending}\n              variant=\"destructive\"\n            >\n              {restoreBackupMutation.isPending ? \"Restoring...\" : \"Restore Backup\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":77092},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/pages/doctors.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { UserPlus, Eye, Edit, Trash2, Stethoscope, IndianRupee, Calculator, Wallet, Settings, Shield, Check } from \"lucide-react\";\nimport { insertDoctorSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { Doctor, Service, DoctorServiceRate } from \"@shared/schema\";\nimport AccessRestricted from \"@/components/access-restricted\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nexport default function Doctors() {\n  const [isNewDoctorOpen, setIsNewDoctorOpen] = useState(false);\n  const [isEditDoctorOpen, setIsEditDoctorOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isPermanentDeleteDialogOpen, setIsPermanentDeleteDialogOpen] = useState(false);\n  const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null);\n  const [doctorToDelete, setDoctorToDelete] = useState<Doctor | null>(null);\n  const [doctorToPermanentlyDelete, setDoctorToPermanentlyDelete] = useState<Doctor | null>(null);\n  const [deleteConfirmationText, setDeleteConfirmationText] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { user } = useAuth();\n  // Check if user can access doctor management at all\n  const currentUserRoles = user?.roles || [user?.role]; // Backward compatibility\n  const isAdmin = currentUserRoles.includes('admin');\n  const isBillingStaff = currentUserRoles.includes('billing_staff');\n  const isSuperUser = currentUserRoles.includes('super_user');\n\n  const hasAccess = isAdmin || isBillingStaff || isSuperUser;\n\n  if (!hasAccess) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Doctor Management\" />\n        <div className=\"p-6\">\n          <AccessRestricted \n            title=\"Access Restricted\"\n            description=\"Only administrators, billing staff, and super users can access doctor management.\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  // Salary Management States\n  const [selectedDoctorId, setSelectedDoctorId] = useState<string>(\"\");\n  const [serviceSelections, setServiceSelections] = useState<{\n    [key: string]: {\n      isSelected: boolean;\n      salaryBasis: 'amount' | 'percentage' | '';\n      amount: number;\n      percentage: number;\n    }\n  }>({});\n\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: doctors = [], isLoading } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  const { data: deletedDoctors = [], isLoading: isLoadingDeleted } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors/deleted\"],\n  });\n\n  // Fetch services for salary management\n  const { data: services = [] } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  // Fetch pathology tests for salary management\n  const { data: pathologyData } = useQuery({\n    queryKey: [\"/api/pathology-tests/combined\"],\n  });\n\n  // Fetch doctor salary rates when doctor is selected\n  const { data: doctorRates = [], refetch: refetchDoctorRates } = useQuery<DoctorServiceRate[]>({\n    queryKey: [\"/api/doctors\", selectedDoctorId, \"salary-rates\"],\n    enabled: !!selectedDoctorId,\n  });\n\n  const filteredDoctors = doctors?.filter((doctor: Doctor) =>\n    doctor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doctor.specialization.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doctor.qualification.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  // Fetch doctor earnings for all doctors\n  const { data: allDoctorEarnings = [] } = useQuery({\n    queryKey: [\"/api/doctors/all-earnings\"],\n    queryFn: async () => {\n      const promises = filteredDoctors.map(async (doctor: Doctor) => {\n        const response = await fetch(`/api/doctors/${doctor.id}/earnings?status=pending`, {\n          headers: {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n        });\n        if (response.ok) {\n          const earnings = await response.json();\n          return {\n            doctorId: doctor.id,\n            doctorName: doctor.name,\n            earnings: earnings,\n            totalPending: earnings.reduce((sum: number, earning: any) => sum + earning.earnedAmount, 0),\n            servicesCount: earnings.length,\n          };\n        }\n        return {\n          doctorId: doctor.id,\n          doctorName: doctor.name,\n          earnings: [],\n          totalPending: 0,\n          servicesCount: 0,\n        };\n      });\n      return Promise.all(promises);\n    },\n    enabled: filteredDoctors.length > 0,\n  });\n\n\n  // Save doctor salary rates mutation\n  const saveDoctorRatesMutation = useMutation({\n    mutationFn: async (rates: any[]) => {\n      const response = await fetch(`/api/doctors/${selectedDoctorId}/salary-rates`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({ rates }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save doctor salary rates\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Doctor salary rates saved successfully\",\n      });\n      refetchDoctorRates();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save doctor salary rates\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark doctor earnings as paid mutation\n  const markAsPaidMutation = useMutation({\n    mutationFn: async (doctorId: string) => {\n      const response = await fetch(`/api/doctors/${doctorId}/mark-paid`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to mark earnings as paid\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, doctorId) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors/all-earnings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\", doctorId, \"earnings\"] });\n      toast({\n        title: \"Payment Confirmed\",\n        description: `Successfully marked ${data.count} earnings as paid`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to mark earnings as paid\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createDoctorMutation = useMutation({\n    mutationFn: async (doctorData: any) => {\n      const response = await fetch(\"/api/doctors\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(doctorData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      setIsNewDoctorOpen(false);\n      form.reset();\n      toast({\n        title: \"Doctor added successfully\",\n        description: \"The doctor profile has been created.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error adding doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDoctorMutation = useMutation({\n    mutationFn: async ({ id, doctorData }: { id: string; doctorData: any }) => {\n      const response = await fetch(`/api/doctors/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(doctorData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      setIsEditDoctorOpen(false);\n      setSelectedDoctor(null);\n      editForm.reset();\n      toast({\n        title: \"Doctor updated successfully\",\n        description: \"The doctor profile has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error updating doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDoctorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/doctors/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors/deleted\"] });\n      toast({\n        title: \"Doctor deleted successfully\",\n        description: \"The doctor profile has been removed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error deleting doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const restoreDoctorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/doctors/${id}/restore`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to restore doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors/deleted\"] });\n      toast({\n        title: \"Doctor restored successfully\",\n        description: \"The doctor profile has been restored to active status.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error restoring doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const permanentDeleteDoctorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/doctors/${id}/permanent`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to permanently delete doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors/deleted\"] });\n      toast({\n        title: \"Doctor permanently deleted\",\n        description: \"The doctor profile has been permanently removed from the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error permanently deleting doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertDoctorSchema),\n    defaultValues: {\n      name: \"\",\n      specialization: \"\",\n      qualification: \"\",\n      consultationFee: 0,\n      userId: undefined,\n    },\n  });\n\n  const editForm = useForm({\n    resolver: zodResolver(insertDoctorSchema),\n    defaultValues: {\n      name: \"\",\n      specialization: \"\",\n      qualification: \"\",\n      consultationFee: 0,\n      userId: undefined,\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createDoctorMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (selectedDoctor) {\n      updateDoctorMutation.mutate({ id: selectedDoctor.id, doctorData: data });\n    }\n  };\n\n  const handleEditDoctor = (doctor: Doctor) => {\n    setSelectedDoctor(doctor);\n    editForm.reset({\n      name: doctor.name,\n      specialization: doctor.specialization,\n      qualification: doctor.qualification,\n      consultationFee: doctor.consultationFee,\n      userId: undefined,\n    } as any);\n    setIsEditDoctorOpen(true);\n  };\n\n  const handleDeleteDoctor = (doctor: Doctor) => {\n    setDoctorToDelete(doctor);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteDoctor = () => {\n    if (doctorToDelete) {\n      deleteDoctorMutation.mutate(doctorToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setDoctorToDelete(null);\n    }\n  };\n\n  const handleRestoreDoctor = (doctorId: string) => {\n    restoreDoctorMutation.mutate(doctorId);\n  };\n\n  const handlePermanentDeleteDoctor = (doctor: Doctor) => {\n    setDoctorToPermanentlyDelete(doctor);\n    setDeleteConfirmationText(\"\");\n    setIsPermanentDeleteDialogOpen(true);\n  };\n\n  const confirmPermanentDeleteDoctor = () => {\n    if (doctorToPermanentlyDelete && deleteConfirmationText === \"delete\") {\n      permanentDeleteDoctorMutation.mutate(doctorToPermanentlyDelete.id);\n      setIsPermanentDeleteDialogOpen(false);\n      setDoctorToPermanentlyDelete(null);\n      setDeleteConfirmationText(\"\");\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const specializations = [\n    \"General Medicine\",\n    \"Cardiology\",\n    \"Neurology\",\n    \"Orthopedics\",\n    \"Dermatology\",\n    \"Pediatrics\",\n    \"Gynecology\",\n    \"Urology\",\n    \"Psychiatry\",\n    \"Radiology\",\n    \"Pathology\",\n    \"Anesthesiology\",\n    \"Emergency Medicine\",\n    \"Surgery\",\n    \"ENT\",\n    \"Ophthalmology\"\n  ];\n\n  // Utility function to categorize services\n  const categorizeServices = () => {\n    type CategorizedService = {\n      id: string;\n      name: string;\n      category: string;\n      price: number;\n    };\n\n    const categories: {\n      opd: CategorizedService[];\n      labTests: CategorizedService[];\n      diagnostic: CategorizedService[];\n      operations: CategorizedService[];\n      admissions: CategorizedService[];\n      services: CategorizedService[];\n    } = {\n      opd: [],\n      labTests: [],\n      diagnostic: [],\n      operations: [],\n      admissions: [],\n      services: []\n    };\n\n    // Add OPD consultation services from actual services\n    if (services && services.length > 0) {\n      const opdServices = services.filter(service => \n        service.category?.toLowerCase() === 'consultation' || \n        service.name?.toLowerCase().includes('opd') || \n        service.name?.toLowerCase().includes('consultation')\n      );\n\n      // Only add real OPD services if they exist\n      if (opdServices.length > 0) {\n        categories.opd.push(...opdServices.map(service => ({\n          id: service.id,\n          name: service.name,\n          category: 'opd',\n          price: service.price || 0\n        })));\n      } else {\n        // Add placeholder only if no real OPD services exist\n        categories.opd.push({\n          id: 'opd_consultation_placeholder',\n          name: 'OPD Consultation',\n          category: 'opd',\n          price: 0\n        });\n      }\n    } else {\n      // Add placeholder if services array is empty\n      categories.opd.push({\n        id: 'opd_consultation_placeholder',\n        name: 'OPD Consultation',\n        category: 'opd',\n        price: 0\n      });\n    }\n\n    // Add pathology services as individual entries using real service IDs\n    if (services && services.length > 0) {\n      const pathologyServices = services.filter(service => \n        service.category?.toLowerCase() === 'pathology' ||\n        service.name?.toLowerCase().includes('pathology') ||\n        service.name?.toLowerCase().includes('lab') ||\n        service.name?.toLowerCase().includes('test')\n      );\n\n      categories.labTests.push(...pathologyServices.map(service => ({\n        id: service.id,\n        name: service.name,\n        category: 'pathology',\n        price: service.price || 0\n      })));\n    }\n\n    // Categorize remaining services based on their category field\n    // Exclude services that are already categorized as OPD or pathology\n    if (services && services.length > 0) {\n      const alreadyCategorizedIds = new Set([\n        ...categories.opd.map(s => s.id),\n        ...categories.labTests.map(s => s.id)\n      ]);\n\n      services.forEach((service: any) => {\n        // Skip if already categorized as OPD or pathology\n        if (alreadyCategorizedIds.has(service.id)) {\n          return;\n        }\n\n        const serviceItem = {\n          id: service.id,\n          name: service.name,\n          category: service.category,\n          price: service.price || 0\n        };\n\n        switch (service.category?.toLowerCase()) {\n          case 'diagnostic':\n          case 'diagnostics':\n          case 'radiology':\n            categories.diagnostic.push(serviceItem);\n            break;\n          case 'operation':\n          case 'operations':\n          case 'surgery':\n          case 'surgical':\n            categories.operations.push(serviceItem);\n            break;\n          case 'admission':\n          case 'admissions':\n          case 'inpatient':\n          case 'ward':\n          case 'icu':\n            categories.admissions.push(serviceItem);\n            break;\n          default:\n            categories.services.push(serviceItem);\n            break;\n        }\n      });\n    }\n\n\n    return categories;\n  };\n\n  // Handle service selection\n  const handleServiceSelection = (serviceId: string, isSelected: boolean) => {\n    setServiceSelections(prev => ({\n      ...prev,\n      [serviceId]: {\n        ...prev[serviceId],\n        isSelected,\n        salaryBasis: isSelected ? prev[serviceId]?.salaryBasis || '' : '',\n        amount: prev[serviceId]?.amount || 0,\n        percentage: prev[serviceId]?.percentage || 0\n      }\n    }));\n  };\n\n  // Handle salary basis change\n  const handleSalaryBasisChange = (serviceId: string, salaryBasis: 'amount' | 'percentage') => {\n    setServiceSelections(prev => ({\n      ...prev,\n      [serviceId]: {\n        ...prev[serviceId],\n        salaryBasis,\n        amount: prev[serviceId]?.amount || 0,\n        percentage: prev[serviceId]?.percentage || 0\n      }\n    }));\n  };\n\n  // Handle amount/percentage change\n  const handleValueChange = (serviceId: string, field: 'amount' | 'percentage', value: number) => {\n    setServiceSelections(prev => ({\n      ...prev,\n      [serviceId]: {\n        ...prev[serviceId],\n        [field]: value\n      }\n    }));\n  };\n\n  const categorizedServices = categorizeServices();\n\n  // Effect to populate service selections from existing doctor rates\n  useEffect(() => {\n    if (selectedDoctorId && doctorRates.length > 0) {\n      const newSelections: typeof serviceSelections = {};\n\n      doctorRates.forEach((rate: any) => {\n        const serviceId = rate.serviceId;\n        newSelections[serviceId] = {\n          isSelected: true,\n          salaryBasis: rate.rateType === 'percentage' ? 'percentage' : 'amount',\n          amount: rate.rateType === 'amount' ? rate.rateAmount : 0,\n          percentage: rate.rateType === 'percentage' ? rate.rateAmount : 0,\n        };\n      });\n\n      setServiceSelections(newSelections);\n    } else if (selectedDoctorId && doctorRates.length === 0) {\n      // Clear selections when doctor is selected but has no existing rates\n      setServiceSelections({});\n    }\n  }, [selectedDoctorId, doctorRates]);\n\n  // Function to convert service selections to API format\n  const convertSelectionsToRates = () => {\n    const rates: any[] = [];\n\n    // Service category mapping to ensure schema compliance\n    const categoryMapping: { [key: string]: string } = {\n      'opd': 'opd',\n      'pathology': 'pathology',\n      'diagnostic': 'diagnostics',\n      'diagnostics': 'diagnostics',\n      'operations': 'opd',\n      'admissions': 'admission',\n      'admission': 'admission',\n      'services': 'opd'\n    };\n\n    // Helper function to add service to rates\n    const addServiceToRates = (services: any[], categoryKey: string) => {\n      const normalizedCategory = categoryMapping[categoryKey] || 'opd';\n      services.forEach((service: any) => {\n        const selection = serviceSelections[service.id];\n        if (selection?.isSelected && selection.salaryBasis && (selection.amount > 0 || selection.percentage > 0)) {\n          rates.push({\n            serviceId: service.id,\n            serviceName: service.name,\n            serviceCategory: normalizedCategory,\n            isSelected: true,\n            salaryBasis: selection.salaryBasis,\n            amount: selection.amount,\n            percentage: selection.percentage,\n          });\n        }\n      });\n    };\n\n    // Add rates from all categories\n    addServiceToRates(categorizedServices.opd.filter(s => s.id !== 'opd_consultation_placeholder'), 'opd'); // Exclude placeholder for actual services\n    addServiceToRates(categorizedServices.labTests, 'pathology');\n    addServiceToRates(categorizedServices.diagnostic, 'diagnostic');\n    addServiceToRates(categorizedServices.operations, 'operations');\n    addServiceToRates(categorizedServices.admissions, 'admissions');\n    addServiceToRates(categorizedServices.services, 'services');\n\n    // Handle OPD consultation placeholder separately\n    const opdSelection = serviceSelections['opd_consultation_placeholder'];\n    if (opdSelection?.isSelected && opdSelection.salaryBasis && (opdSelection.amount > 0 || opdSelection.percentage > 0)) {\n      rates.push({\n        serviceId: 'opd_consultation_placeholder',\n        serviceName: 'OPD Consultation',\n        serviceCategory: 'opd',\n        salaryBasis: opdSelection.salaryBasis,\n        amount: opdSelection.amount,\n        percentage: opdSelection.percentage,\n        isSelected: true,\n      });\n    }\n\n    return rates;\n  };\n\n  // Handle save rates\n  const handleSaveRates = () => {\n    if (!selectedDoctorId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a doctor first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const rates = convertSelectionsToRates();\n    saveDoctorRatesMutation.mutate(rates);\n  };\n\n  // Handle mark as paid\n  const handleMarkAsPaid = (doctorId: string) => {\n    markAsPaidMutation.mutate(doctorId);\n  };\n\n  const getSpecializationIcon = (specialization: string) => {\n    // Return appropriate icon based on specialization\n    return <Stethoscope className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Doctor Management\"\n        searchPlaceholder={hasAccess ? \"Search doctors by name or specialization...\" : undefined}\n        onSearch={hasAccess ? setSearchQuery : undefined}\n        onNewAction={(isAdmin || isSuperUser) ? () => setIsNewDoctorOpen(true) : undefined}\n        newActionLabel={(isAdmin || isSuperUser) ? \"Add Doctor\" : undefined}\n      />\n\n      <div className=\"p-6\">\n        <Tabs defaultValue={isBillingStaff && !isAdmin && !isSuperUser ? \"salary\" : \"all-doctors\"} className=\"space-y-6\">\n          <TabsList>\n            {(isAdmin || isSuperUser) && (\n              <TabsTrigger value=\"all-doctors\" data-testid=\"tab-all-doctors\">Active Doctors</TabsTrigger>\n            )}\n            {(isAdmin || isSuperUser) && (\n              <TabsTrigger value=\"manage-salary\" data-testid=\"tab-manage-salary\">\n                <Calculator className=\"w-4 h-4 mr-1\" />\n                Manage Salary\n              </TabsTrigger>\n            )}\n            {(isAdmin || isBillingStaff || isSuperUser) && (\n              <TabsTrigger value=\"salary\" data-testid=\"tab-salary\">\n                <Wallet className=\"w-4 h-4 mr-1\" />\n                Salary\n              </TabsTrigger>\n            )}\n            {(isAdmin || isSuperUser) && (\n              <TabsTrigger value=\"deleted-doctors\" data-testid=\"tab-deleted-doctors\">Inactive Doctors</TabsTrigger>\n            )}\n          </TabsList>\n\n          {(isAdmin || isSuperUser) && (\n            <TabsContent value=\"all-doctors\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Doctor Profiles</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Total: {filteredDoctors.length} doctors\n                  </p>\n                </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Loading doctors...</p>\n                  </div>\n                ) : filteredDoctors.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Stethoscope className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No doctors found</p>\n                    {(isAdmin || isSuperUser) && (\n                      <Button \n                        onClick={() => setIsNewDoctorOpen(true)}\n                        className=\"mt-4\"\n                        data-testid=\"button-first-doctor\"\n                      >\n                        Add your first doctor\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"doctors-grid\">\n                    {filteredDoctors.map((doctor: Doctor) => (\n                      <Card key={doctor.id} className=\"hover:shadow-md transition-shadow\" data-testid={`doctor-card-${doctor.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-12 h-12 bg-healthcare-green rounded-full flex items-center justify-center\">\n                                <span className=\"text-white font-medium text-sm\">\n                                  {doctor.name.split(' ').map(n => n[0]).join('')}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-lg\" data-testid={`doctor-name-${doctor.id}`}>\n                                  {doctor.name}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`doctor-specialization-${doctor.id}`}>\n                                  {doctor.specialization}\n                                </p>\n                              </div>\n                            </div>\n                            <Badge \n                              variant={doctor.isActive ? \"default\" : \"secondary\"} \n                              data-testid={`doctor-status-${doctor.id}`}\n                            >\n                              {doctor.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </div>\n\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getSpecializationIcon(doctor.specialization)}\n                              <span className=\"text-sm\" data-testid={`doctor-qualification-${doctor.id}`}>\n                                {doctor.qualification}\n                              </span>\n                            </div>\n\n                            <div className=\"flex items-center space-x-2\">\n                              <IndianRupee className=\"w-4 h-4 text-healthcare-green\" />\n                              <span className=\"text-sm font-medium\" data-testid={`doctor-fee-${doctor.id}`}>\n                                Consultation: {formatCurrency(doctor.consultationFee)}\n                              </span>\n                            </div>\n\n                            <div className=\"text-xs text-muted-foreground\">\n                              Joined: {formatDate(doctor.createdAt)}\n                            </div>\n                          </div>\n\n                          <div className=\"flex space-x-2 mt-4 pt-4 border-t\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"flex-1\"\n                              onClick={() => setLocation(`/doctors/${doctor.id}`)}\n                              data-testid={`button-view-doctor-${doctor.id}`}\n                            >\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              View Doctor\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"flex-1\"\n                              onClick={() => handleEditDoctor(doctor)}\n                              data-testid={`button-edit-${doctor.id}`}\n                            >\n                              <Edit className=\"w-4 h-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"flex-1 text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              onClick={() => handleDeleteDoctor(doctor)}\n                              data-testid={`button-delete-${doctor.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n          )}\n\n          {(isAdmin || isSuperUser) && (\n          <TabsContent value=\"deleted-doctors\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Inactive Doctors</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Doctors that have been deactivated can be restored here. Total: {deletedDoctors?.length || 0} inactive doctors\n                </p>\n              </CardHeader>\n              <CardContent>\n                {isLoadingDeleted ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Loading deleted doctors...</p>\n                  </div>\n                ) : (deletedDoctors?.length || 0) === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Stethoscope className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No inactive doctors found</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"deleted-doctors-grid\">\n                    {deletedDoctors?.map((doctor: Doctor) => (\n                      <Card key={doctor.id} className=\"opacity-75 hover:opacity-100 transition-opacity border-red-200\" data-testid={`deleted-doctor-card-${doctor.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-12 h-12 bg-gray-400 rounded-full flex items-center justify-center\">\n                                <span className=\"text-white font-medium text-sm\">\n                                  {doctor.name.split(' ').map(n => n[0]).join('')}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-lg text-gray-600\" data-testid={`deleted-doctor-name-${doctor.id}`}>\n                                  {doctor.name}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`deleted-doctor-specialization-${doctor.id}`}>\n                                  {doctor.specialization}\n                                </p>\n                              </div>\n                            </div>\n                            <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">\n                              Inactive\n                            </Badge>\n                          </div>\n\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getSpecializationIcon(doctor.specialization)}\n                              <span className=\"text-sm text-gray-600\" data-testid={`deleted-doctor-qualification-${doctor.id}`}>\n                                {doctor.qualification}\n                              </span>\n                            </div>\n\n                            <div className=\"flex items-center space-x-2\">\n                              <IndianRupee className=\"w-4 h-4 text-gray-500\" />\n                              <span className=\"text-sm font-medium text-gray-600\" data-testid={`deleted-doctor-fee-${doctor.id}`}>\n                                Consultation: {formatCurrency(doctor.consultationFee)}\n                              </span>\n                            </div>\n\n                            <div className=\"text-xs text-muted-foreground\">\n                              Deactivated: {formatDate(doctor.updatedAt)}\n                            </div>\n                          </div>\n\n                          <div className=\"flex flex-col space-y-2 mt-4 pt-4 border-t\">\n                            <Button \n                              variant=\"default\" \n                              size=\"sm\"\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              onClick={() => handleRestoreDoctor(doctor.id)}\n                              disabled={restoreDoctorMutation.isPending}\n                              data-testid={`button-restore-${doctor.id}`}\n                            >\n                              {restoreDoctorMutation.isPending ? \"Restoring...\" : \"Restore Doctor\"}\n                            </Button>\n                            <Button \n                              variant=\"destructive\" \n                              size=\"sm\"\n                              onClick={() => handlePermanentDeleteDoctor(doctor)}\n                              disabled={permanentDeleteDoctorMutation.isPending}\n                              data-testid={`button-permanent-delete-${doctor.id}`}\n                            >\n                              {permanentDeleteDoctorMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n          )}\n\n          {(isAdmin || isSuperUser) && (\n          <TabsContent value=\"manage-salary\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Manage Doctor Salary Rates</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Configure commission and salary rates for different services by doctor\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {/* Doctor Selection */}\n                  <div className=\"flex flex-col sm:flex-row gap-4\">\n                    <div className=\"flex-1\">\n                      <Label htmlFor=\"doctor-select\">Select Doctor</Label>\n                      <Select value={selectedDoctorId} onValueChange={setSelectedDoctorId}>\n                        <SelectTrigger id=\"doctor-select\" data-testid=\"select-doctor-salary\">\n                          <SelectValue placeholder=\"Choose a doctor to configure salary rates\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {filteredDoctors.map((doctor: Doctor) => (\n                            <SelectItem key={doctor.id} value={doctor.id}>\n                              {doctor.name} - {doctor.specialization}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex items-end\">\n                      <Button \n                        data-testid=\"button-save-rates\" \n                        disabled={!selectedDoctorId || saveDoctorRatesMutation.isPending}\n                        onClick={handleSaveRates}\n                      >\n                        <Calculator className=\"w-4 h-4 mr-1\" />\n                        {saveDoctorRatesMutation.isPending ? \"Saving...\" : \"Save Rates\"}\n                      </Button>\n                    </div>\n                  </div>\n\n                  {selectedDoctorId ? (\n                    <div className=\"space-y-8\">\n                      {/* OPD Services */}\n                      {categorizedServices.opd.length > 0 && (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">OPD Consultation</h3>\n                          <div className=\"space-y-3\">\n                            {categorizedServices.opd.map((service: any) => (\n                              <div key={service.id} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-lg\" data-testid={`service-row-${service.id}`}>\n                                <Checkbox\n                                  checked={serviceSelections[service.id]?.isSelected === true}\n                                  onCheckedChange={(checked) => handleServiceSelection(service.id, checked === true)}\n                                  data-testid={`checkbox-${service.id}`}\n                                />\n                                <div className=\"flex-1\">\n                                  <span className=\"font-medium\">{service.name}</span>\n                                </div>\n                                <div className=\"flex items-center gap-3\">\n                                  <Select\n                                    value={serviceSelections[service.id]?.salaryBasis || ''}\n                                    onValueChange={(value) => handleSalaryBasisChange(service.id, value as 'amount' | 'percentage')}\n                                    disabled={!serviceSelections[service.id]?.isSelected}\n                                  >\n                                    <SelectTrigger className=\"w-32\" data-testid={`select-basis-${service.id}`}>\n                                      <SelectValue placeholder=\"Basis\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"amount\">Amount</SelectItem>\n                                      <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Label htmlFor={`amount-${service.id}`} className=\"text-sm\">₹</Label>\n                                    <Input\n                                      id={`amount-${service.id}`}\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.amount || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'amount', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-amount-${service.id}`}\n                                    />\n                                  </div>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.percentage || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'percentage', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-percentage-${service.id}`}\n                                    />\n                                    <Label className=\"text-sm\">%</Label>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Lab Tests */}\n                      {categorizedServices.labTests.length > 0 && (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">Lab Tests</h3>\n                          <div className=\"space-y-3\">\n                            {categorizedServices.labTests.map((service: any) => (\n                              <div key={service.id} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-lg\" data-testid={`service-row-${service.id}`}>\n                                <Checkbox\n                                  checked={serviceSelections[service.id]?.isSelected === true}\n                                  onCheckedChange={(checked) => handleServiceSelection(service.id, checked === true)}\n                                  data-testid={`checkbox-${service.id}`}\n                                />\n                                <div className=\"flex-1\">\n                                  <span className=\"font-medium\">{service.name}</span>\n                                </div>\n                                <div className=\"flex items-center gap-3\">\n                                  <Select\n                                    value={serviceSelections[service.id]?.salaryBasis || ''}\n                                    onValueChange={(value) => handleSalaryBasisChange(service.id, value as 'amount' | 'percentage')}\n                                    disabled={!serviceSelections[service.id]?.isSelected}\n                                  >\n                                    <SelectTrigger className=\"w-32\" data-testid={`select-basis-${service.id}`}>\n                                      <SelectValue placeholder=\"Basis\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"amount\">Amount</SelectItem>\n                                      <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Label htmlFor={`amount-${service.id}`} className=\"text-sm\">₹</Label>\n                                    <Input\n                                      id={`amount-${service.id}`}\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.amount || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'amount', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-amount-${service.id}`}\n                                    />\n                                  </div>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.percentage || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'percentage', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-percentage-${service.id}`}\n                                    />\n                                    <Label className=\"text-sm\">%</Label>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Diagnostic Services */}\n                      {categorizedServices.diagnostic.length > 0 && (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">Diagnostic</h3>\n                          <div className=\"space-y-3\">\n                            {categorizedServices.diagnostic.map((service: any) => (\n                              <div key={service.id} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-lg\" data-testid={`service-row-${service.id}`}>\n                                <Checkbox\n                                  checked={serviceSelections[service.id]?.isSelected === true}\n                                  onCheckedChange={(checked) => handleServiceSelection(service.id, checked === true)}\n                                  data-testid={`checkbox-${service.id}`}\n                                />\n                                <div className=\"flex-1\">\n                                  <span className=\"font-medium\">{service.name}</span>\n                                </div>\n                                <div className=\"flex items-center gap-3\">\n                                  <Select\n                                    value={serviceSelections[service.id]?.salaryBasis || ''}\n                                    onValueChange={(value) => handleSalaryBasisChange(service.id, value as 'amount' | 'percentage')}\n                                    disabled={!serviceSelections[service.id]?.isSelected}\n                                  >\n                                    <SelectTrigger className=\"w-32\" data-testid={`select-basis-${service.id}`}>\n                                      <SelectValue placeholder=\"Basis\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"amount\">Amount</SelectItem>\n                                      <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Label htmlFor={`amount-${service.id}`} className=\"text-sm\">₹</Label>\n                                    <Input\n                                      id={`amount-${service.id}`}\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.amount || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'amount', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-amount-${service.id}`}\n                                    />\n                                  </div>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.percentage || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'percentage', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-percentage-${service.id}`}\n                                    />\n                                    <Label className=\"text-sm\">%</Label>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Operations */}\n                      {categorizedServices.operations.length > 0 && (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">Operations</h3>\n                          <div className=\"space-y-3\">\n                            {categorizedServices.operations.map((service: any) => (\n                              <div key={service.id} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-lg\" data-testid={`service-row-${service.id}`}>\n                                <Checkbox\n                                  checked={serviceSelections[service.id]?.isSelected === true}\n                                  onCheckedChange={(checked) => handleServiceSelection(service.id, checked === true)}\n                                  data-testid={`checkbox-${service.id}`}\n                                />\n                                <div className=\"flex-1\">\n                                  <span className=\"font-medium\">{service.name}</span>\n                                </div>\n                                <div className=\"flex items-center gap-3\">\n                                  <Select\n                                    value={serviceSelections[service.id]?.salaryBasis || ''}\n                                    onValueChange={(value) => handleSalaryBasisChange(service.id, value as 'amount' | 'percentage')}\n                                    disabled={!serviceSelections[service.id]?.isSelected}\n                                  >\n                                    <SelectTrigger className=\"w-32\" data-testid={`select-basis-${service.id}`}>\n                                      <SelectValue placeholder=\"Basis\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"amount\">Amount</SelectItem>\n                                      <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Label htmlFor={`amount-${service.id}`} className=\"text-sm\">₹</Label>\n                                    <Input\n                                      id={`amount-${service.id}`}\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.amount || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'amount', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-amount-${service.id}`}\n                                    />\n                                  </div>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.percentage || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'percentage', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-percentage-${service.id}`}\n                                    />\n                                    <Label className=\"text-sm\">%</Label>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Admission Services */}\n                      {categorizedServices.admissions.length > 0 && (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">Admission Services</h3>\n                          <div className=\"space-y-3\">\n                            {categorizedServices.admissions.map((service: any) => (\n                              <div key={service.id} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-lg\" data-testid={`service-row-${service.id}`}>\n                                <Checkbox\n                                  checked={serviceSelections[service.id]?.isSelected === true}\n                                  onCheckedChange={(checked) => handleServiceSelection(service.id, checked === true)}\n                                  data-testid={`checkbox-${service.id}`}\n                                />\n                                <div className=\"flex-1\">\n                                  <span className=\"font-medium\">{service.name}</span>\n                                </div>\n                                <div className=\"flex items-center gap-3\">\n                                  <Select\n                                    value={serviceSelections[service.id]?.salaryBasis || ''}\n                                    onValueChange={(value) => handleSalaryBasisChange(service.id, value as 'amount' | 'percentage')}\n                                    disabled={!serviceSelections[service.id]?.isSelected}\n                                  >\n                                    <SelectTrigger className=\"w-32\" data-testid={`select-basis-${service.id}`}>\n                                      <SelectValue placeholder=\"Basis\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"amount\">Amount</SelectItem>\n                                      <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Label htmlFor={`amount-${service.id}`} className=\"text-sm\">₹</Label>\n                                    <Input\n                                      id={`amount-${service.id}`}\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.amount || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'amount', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-amount-${service.id}`}\n                                    />\n                                  </div>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.percentage || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'percentage', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-percentage-${service.id}`}\n                                    />\n                                    <Label className=\"text-sm\">%</Label>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Other Services */}\n                      {categorizedServices.services.length > 0 && (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">Services</h3>\n                          <div className=\"space-y-3\">\n                            {categorizedServices.services.map((service: any) => (\n                              <div key={service.id} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-lg\" data-testid={`service-row-${service.id}`}>\n                                <Checkbox\n                                  checked={serviceSelections[service.id]?.isSelected === true}\n                                  onCheckedChange={(checked) => handleServiceSelection(service.id, checked === true)}\n                                  data-testid={`checkbox-${service.id}`}\n                                />\n                                <div className=\"flex-1\">\n                                  <span className=\"font-medium\">{service.name}</span>\n                                </div>\n                                <div className=\"flex items-center gap-3\">\n                                  <Select\n                                    value={serviceSelections[service.id]?.salaryBasis || ''}\n                                    onValueChange={(value) => handleSalaryBasisChange(service.id, value as 'amount' | 'percentage')}\n                                    disabled={!serviceSelections[service.id]?.isSelected}\n                                  >\n                                    <SelectTrigger className=\"w-32\" data-testid={`select-basis-${service.id}`}>\n                                      <SelectValue placeholder=\"Basis\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"amount\">Amount</SelectItem>\n                                      <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Label htmlFor={`amount-${service.id}`} className=\"text-sm\">₹</Label>\n                                    <Input\n                                      id={`amount-${service.id}`}\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.amount || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'amount', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'amount' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-amount-${service.id}`}\n                                    />\n                                  </div>\n\n                                  <div className=\"flex items-center gap-2\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      max=\"100\"\n                                      step=\"0.01\"\n                                      placeholder=\"0\"\n                                      value={serviceSelections[service.id]?.percentage || 0}\n                                      onChange={(e) => handleValueChange(service.id, 'percentage', parseFloat(e.target.value) || 0)}\n                                      disabled={!serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage'}\n                                      className={`w-20 text-center ${\n                                        !serviceSelections[service.id]?.isSelected || serviceSelections[service.id]?.salaryBasis !== 'percentage' \n                                          ? 'bg-gray-100 text-gray-400' : ''\n                                      }`}\n                                      data-testid={`input-percentage-${service.id}`}\n                                    />\n                                    <Label className=\"text-sm\">%</Label>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-sm text-muted-foreground\">\n                      Select a doctor above to configure their salary rates for different services\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          )}\n\n          {(isAdmin || isBillingStaff || isSuperUser) && (\n          <TabsContent value=\"salary\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Doctor Salary & Earnings</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  View earnings, process payments, and track payment history for doctors\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {/* Summary Cards */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Card className=\"p-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                          <Wallet className=\"w-5 h-5 text-green-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Pending</p>\n                          <p className=\"text-xl font-semibold text-green-600\">\n                            ₹{allDoctorEarnings.reduce((sum: number, doctor: any) => sum + doctor.totalPending, 0).toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    </Card>\n                    <Card className=\"p-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <IndianRupee className=\"w-5 h-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Paid This Month</p>\n                          <p className=\"text-xl font-semibold text-blue-600\">₹0</p>\n                        </div>\n                      </div>\n                    </Card>\n                    <Card className=\"p-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                          <Calculator className=\"w-5 h-5 text-purple-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Doctors</p>\n                          <p className=\"text-xl font-semibold text-purple-600\">{filteredDoctors.length}</p>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n\n                  {/* Doctor Earnings Table */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <h3 className=\"text-lg font-medium\">Doctor Earnings</h3>\n                    </div>\n\n                    <div className=\"border rounded-lg\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Doctor</TableHead>\n                            <TableHead>Pending Amount</TableHead>\n                            <TableHead>Last Payment</TableHead>\n                            <TableHead>Last Payment Date</TableHead>\n                            <TableHead>Status</TableHead>\n                            <TableHead>Actions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {allDoctorEarnings.length > 0 ? allDoctorEarnings.map((doctorData: any) => (\n                            <TableRow key={doctorData.doctorId}>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"w-8 h-8 bg-healthcare-green rounded-full flex items-center justify-center\">\n                                    <span className=\"text-white text-xs font-medium\">\n                                      {doctorData.doctorName.split(' ').map((n: string) => n[0]).join('')}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    <p className=\"font-medium\" data-testid={`salary-doctor-name-${doctorData.doctorId}`}>{doctorData.doctorName}</p>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      {filteredDoctors.find((d: Doctor) => d.id === doctorData.doctorId)?.specialization}\n                                    </p>\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell data-testid={`salary-pending-${doctorData.doctorId}`}>\n                                <span className=\"font-medium text-green-600\">₹{doctorData.totalPending.toFixed(2)}</span>\n                              </TableCell>\n                              <TableCell data-testid={`salary-last-payment-${doctorData.doctorId}`}>\n                                <span className=\"text-sm text-muted-foreground\">No payments yet</span>\n                              </TableCell>\n                              <TableCell data-testid={`salary-last-payment-date-${doctorData.doctorId}`}>\n                                <span className=\"text-sm text-muted-foreground\">-</span>\n                              </TableCell>\n                              <TableCell>\n                                <Badge \n                                  variant={doctorData.totalPending > 0 ? \"default\" : \"secondary\"} \n                                  data-testid={`salary-status-${doctorData.doctorId}`}\n                                >\n                                  {doctorData.totalPending > 0 ? \"Pending Payment\" : \"No Activity\"}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                <TooltipProvider>\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button \n                                        variant=\"outline\" \n                                        size=\"sm\" \n                                        onClick={() => handleMarkAsPaid(doctorData.doctorId)}\n                                        disabled={markAsPaidMutation.isPending || doctorData.totalPending === 0}\n                                        className={doctorData.totalPending > 0 ? \"hover:bg-green-50 hover:text-green-600\" : \"opacity-50 cursor-not-allowed\"}\n                                        data-testid={`button-pay-doctor-${doctorData.doctorId}`}\n                                      >\n                                        <Check className=\"w-4 h-4 mr-2\" />\n                                        Mark as Paid\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>\n                                      <p>{doctorData.totalPending > 0 ? \"Mark as Paid\" : \"No pending earnings\"}</p>\n                                    </TooltipContent>\n                                  </Tooltip>\n                                </TooltipProvider>\n                              </TableCell>\n                            </TableRow>\n                          )) : (\n                            <TableRow>\n                              <TableCell colSpan={6} className=\"text-center py-8\">\n                                <div className=\"flex flex-col items-center space-y-2\">\n                                  <Wallet className=\"w-8 h-8 text-muted-foreground\" />\n                                  <p className=\"text-muted-foreground\">No doctors found</p>\n                                  <p className=\"text-sm text-muted-foreground\">Add doctors to start tracking salary earnings</p>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          )}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          )}\n        </Tabs>\n      </div>\n\n      {/* New Doctor Dialog */}\n      <Dialog open={isNewDoctorOpen} onOpenChange={setIsNewDoctorOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-doctor-dialog\">\n          <DialogHeader>\n            <DialogTitle>Add New Doctor</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"Dr. John Doe\"\n                  data-testid=\"input-doctor-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"specialization\">Specialization *</Label>\n                <Select onValueChange={(value) => form.setValue(\"specialization\", value)}>\n                  <SelectTrigger data-testid=\"select-specialization\">\n                    <SelectValue placeholder=\"Select specialization\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {specializations.map((spec) => (\n                      <SelectItem key={spec} value={spec}>\n                        {spec}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.specialization && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.specialization.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"qualification\">Qualification *</Label>\n                <Input\n                  id=\"qualification\"\n                  {...form.register(\"qualification\")}\n                  placeholder=\"MBBS, MD, MS etc.\"\n                  data-testid=\"input-qualification\"\n                />\n                {form.formState.errors.qualification && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.qualification.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"consultationFee\">Consultation Fee (₹) *</Label>\n                <Input\n                  id=\"consultationFee\"\n                  type=\"number\"\n                  {...form.register(\"consultationFee\", { valueAsNumber: true })}\n                  placeholder=\"500\"\n                  data-testid=\"input-consultation-fee\"\n                />\n                {form.formState.errors.consultationFee && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.consultationFee.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewDoctorOpen(false)}\n                data-testid=\"button-cancel-doctor\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createDoctorMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-doctor\"\n              >\n                {createDoctorMutation.isPending ? \"Adding...\" : \"Add Doctor\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Doctor Details Dialog */}\n      {selectedDoctor && (\n        <Dialog open={!!selectedDoctor} onOpenChange={() => setSelectedDoctor(null)}>\n          <DialogContent className=\"max-w-2xl\" data-testid=\"doctor-details-dialog\">\n            <DialogHeader>\n              <DialogTitle>Doctor Profile - {selectedDoctor.name}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-healthcare-green rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-medium text-lg\">\n                    {selectedDoctor.name.split(' ').map(n => n[0]).join('')}\n                  </span>\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold\" data-testid=\"detail-doctor-name\">\n                    {selectedDoctor.name}\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"detail-doctor-specialization\">\n                    {selectedDoctor.specialization}\n                  </p>\n                  <Badge \n                    variant={selectedDoctor.isActive ? \"default\" : \"secondary\"}\n                    data-testid=\"detail-doctor-status\"\n                  >\n                    {selectedDoctor.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Qualification</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-qualification\">\n                    {selectedDoctor.qualification}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Consultation Fee</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-consultation-fee\">\n                    {formatCurrency(selectedDoctor.consultationFee)}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Joined Date</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-joined-date\">\n                    {formatDate(selectedDoctor.createdAt)}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Last Updated</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-updated-date\">\n                    {formatDate(selectedDoctor.updatedAt)}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <h4 className=\"font-medium mb-3\">Quick Actions</h4>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" data-testid=\"button-edit-profile\">\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Edit Profile\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-view-schedule\">\n                    View Schedule\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-view-patients\">\n                    View Patients\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Edit Doctor Dialog */}\n      <Dialog open={isEditDoctorOpen} onOpenChange={setIsEditDoctorOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"edit-doctor-dialog\">\n          <DialogHeader>\n            <DialogTitle>Edit Doctor Profile</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Full Name *</Label>\n                <Input\n                  id=\"edit-name\"\n                  {...editForm.register(\"name\")}\n                  placeholder=\"Dr. John Doe\"\n                  data-testid=\"input-edit-doctor-name\"\n                />\n                {editForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-specialization\">Specialization *</Label>\n                <Select \n                  value={editForm.watch(\"specialization\")}\n                  onValueChange={(value) => editForm.setValue(\"specialization\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-edit-specialization\">\n                    <SelectValue placeholder=\"Select specialization\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {specializations.map((spec) => (\n                      <SelectItem key={spec} value={spec}>\n                        {spec}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {editForm.formState.errors.specialization && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.specialization.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-qualification\">Qualification *</Label>\n                <Input\n                  id=\"edit-qualification\"\n                  {...editForm.register(\"qualification\")}\n                  placeholder=\"MBBS, MD, MS etc.\"\n                  data-testid=\"input-edit-qualification\"\n                />\n                {editForm.formState.errors.qualification && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.qualification.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-consultationFee\">Consultation Fee (₹) *</Label>\n                <Input\n                  id=\"edit-consultationFee\"\n                  type=\"number\"\n                  {...editForm.register(\"consultationFee\", { valueAsNumber: true })}\n                  placeholder=\"500\"\n                  data-testid=\"input-edit-consultation-fee\"\n                />\n                {editForm.formState.errors.consultationFee && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.consultationFee.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDoctorOpen(false)}\n                data-testid=\"button-cancel-edit-doctor\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateDoctorMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-edit-doctor\"\n              >\n                {updateDoctorMutation.isPending ? \"Updating...\" : \"Update Doctor\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"delete-doctor-dialog\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Doctor</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {doctorToDelete?.name}? This action cannot be undone.\n              All associated appointments and records will remain but will no longer be linked to this doctor.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDeleteDoctor}\n              disabled={deleteDoctorMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteDoctorMutation.isPending ? \"Deleting...\" : \"Delete Doctor\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Permanent Delete Confirmation Dialog */}\n      <Dialog open={isPermanentDeleteDialogOpen} onOpenChange={setIsPermanentDeleteDialogOpen}>\n        <DialogContent className=\"max-w-md\" data-testid=\"permanent-delete-doctor-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-red-600\">Permanently Delete Doctor</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-sm text-red-800 font-medium mb-2\">⚠️ Warning: This action is irreversible</p>\n              <p className=\"text-sm text-red-700\">\n                You are about to permanently delete <strong>{doctorToPermanentlyDelete?.name}</strong> from the system. \n                This will completely remove all doctor data and cannot be undone.\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"delete-confirmation\" className=\"text-sm font-medium\">\n                Type \"delete\" to confirm permanent deletion:\n              </Label>\n              <Input\n                id=\"delete-confirmation\"\n                value={deleteConfirmationText}\n                onChange={(e) => setDeleteConfirmationText(e.target.value)}\n                placeholder=\"Type 'delete' here\"\n                className=\"text-center\"\n                data-testid=\"input-delete-confirmation\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsPermanentDeleteDialogOpen(false);\n                setDoctorToPermanentlyDelete(null);\n                setDeleteConfirmationText(\"\");\n              }}\n              data-testid=\"button-cancel-permanent-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmPermanentDeleteDoctor}\n              disabled={deleteConfirmationText !== \"delete\" || permanentDeleteDoctorMutation.isPending}\n              data-testid=\"button-confirm-permanent-delete\"\n            >\n              {permanentDeleteDoctorMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":93241},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"sqlite\",\n  dbCredentials: {\n    url: \"./hospital.db\",\n  },\n});\n","size_bytes":205},"server/storage.ts":{"content":"import Database from \"better-sqlite3\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport { migrate } from \"drizzle-orm/better-sqlite3/migrator\";\nimport * as schema from \"@shared/schema\";\nimport { calculateStayDays } from \"@shared/schema\";\nimport type {\n  User,\n  InsertUser,\n  Doctor,\n  InsertDoctor,\n  Patient,\n  InsertPatient,\n  PatientVisit,\n  InsertPatientVisit,\n  Service,\n  InsertService,\n  Bill,\n  InsertBill,\n  BillItem,\n  InsertBillItem,\n  PathologyOrder,\n  InsertPathologyOrder,\n  PathologyTest,\n  InsertPathologyTest,\n  PatientService,\n  InsertPatientService,\n  Admission,\n  InsertAdmission,\n  AdmissionEvent,\n  InsertAdmissionEvent,\n  AuditLog,\n  InsertAuditLog,\n  PathologyCategory,\n  InsertPathologyCategory,\n  DynamicPathologyTest,\n  InsertDynamicPathologyTest,\n  Activity,\n  InsertActivity,\n  PatientPayment,\n  InsertPatientPayment,\n  PatientDiscount,\n  InsertPatientDiscount,\n  ServiceCategory,\n  InsertServiceCategory,\n  DoctorServiceRate,\n  InsertDoctorServiceRate,\n  DoctorEarning,\n  InsertDoctorEarning,\n  DoctorPayment,\n  InsertDoctorPayment,\n  ScheduleEvent,\n  InsertScheduleEvent,\n} from \"@shared/schema\";\nimport {\n  eq,\n  gte,\n  lte,\n  and,\n  desc,\n  asc,\n  isNull,\n  isNotNull,\n  like,\n  sql,\n  ne,\n  inArray,\n  or,\n} from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Filter types for patient services\nexport interface PatientServiceFilters {\n  patientId?: string;\n  serviceType?: string;\n  serviceTypes?: string[]; // Added for multiple service types\n  fromDate?: string;\n  toDate?: string;\n  doctorId?: string;\n  serviceName?: string;\n  status?: string;\n}\n\n// Filter types for bills\nexport interface BillFilters {\n  fromDate?: string;\n  toDate?: string;\n  paymentStatus?: string;\n  patientId?: string;\n}\n\n// Initialize SQLite database\nconst dbPath = path.join(process.cwd(), \"hospital.db\");\nconst sqlite = new Database(dbPath);\nexport const db = drizzle(sqlite, { schema });\n\n// Initialize database with tables\nasync function initializeDatabase() {\n  try {\n    // Create tables if they don't exist\n    sqlite.exec(`\n      CREATE TABLE IF NOT EXISTS users (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        username TEXT NOT NULL UNIQUE,\n        password TEXT NOT NULL,\n        full_name TEXT NOT NULL,\n        roles TEXT NOT NULL DEFAULT '[\"user\"]', -- Store roles as JSON array\n        primary_role TEXT NOT NULL, -- Required: for quick access to a primary role\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS doctors (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        user_id TEXT REFERENCES users(id),\n        name TEXT NOT NULL,\n        specialization TEXT NOT NULL,\n        qualification TEXT NOT NULL,\n        consultation_fee REAL NOT NULL,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patients (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        patient_id TEXT NOT NULL UNIQUE,\n        name TEXT NOT NULL,\n        age INTEGER NOT NULL,\n        gender TEXT NOT NULL,\n        phone TEXT NOT NULL,\n        address TEXT,\n        email TEXT,\n        emergency_contact TEXT,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patient_visits (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        visit_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        doctor_id TEXT NOT NULL REFERENCES doctors(id),\n        visit_type TEXT NOT NULL,\n        visit_date TEXT NOT NULL,\n        symptoms TEXT,\n        diagnosis TEXT,\n        prescription TEXT,\n        status TEXT NOT NULL DEFAULT 'scheduled',\n        admission_date TEXT,\n        discharge_date TEXT,\n        room_number TEXT,\n        scheduled_date TEXT,\n        scheduled_time TEXT DEFAULT '09:00',\n        consultation_fee REAL NOT NULL DEFAULT 0,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS services (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL,\n        category TEXT NOT NULL,\n        price REAL NOT NULL,\n        description TEXT,\n        billing_type TEXT NOT NULL DEFAULT 'per_instance',\n        billing_parameters TEXT,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS bills (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        bill_number TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        visit_id TEXT REFERENCES patient_visits(id),\n        subtotal REAL NOT NULL,\n        tax_amount REAL NOT NULL,\n        discount_amount REAL NOT NULL DEFAULT 0,\n        total_amount REAL NOT NULL,\n        payment_method TEXT NOT NULL,\n        payment_status TEXT NOT NULL DEFAULT 'pending',\n        paid_amount REAL NOT NULL DEFAULT 0,\n        created_by TEXT NOT NULL REFERENCES users(id),\n        bill_date TEXT NOT NULL,\n        due_date TEXT,\n        notes TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS bill_items (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        bill_id TEXT NOT NULL REFERENCES bills(id),\n        service_id TEXT NOT NULL REFERENCES services(id),\n        quantity INTEGER NOT NULL DEFAULT 1,\n        unit_price REAL NOT NULL,\n        total_price REAL NOT NULL,\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS pathology_orders (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        order_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        visit_id TEXT REFERENCES patient_visits(id),\n        doctor_id TEXT REFERENCES doctors(id),\n        status TEXT NOT NULL DEFAULT 'ordered',\n        ordered_date TEXT NOT NULL,\n        collected_date TEXT,\n        report_date TEXT,\n        remarks TEXT,\n        total_price REAL NOT NULL DEFAULT 0,\n        receipt_number TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS pathology_tests (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        order_id TEXT NOT NULL REFERENCES pathology_orders(id),\n        test_name TEXT NOT NULL,\n        test_category TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'ordered',\n        results TEXT,\n        normal_range TEXT,\n        price REAL NOT NULL,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patient_services (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        order_id TEXT,\n        service_id TEXT NOT NULL,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        visit_id TEXT REFERENCES patient_visits(id),\n        doctor_id TEXT REFERENCES doctors(id),\n        service_type TEXT NOT NULL,\n        service_name TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'scheduled',\n        scheduled_date TEXT NOT NULL,\n        scheduled_time TEXT NOT NULL DEFAULT '09:00',\n        completed_date TEXT,\n        notes TEXT,\n        price REAL NOT NULL DEFAULT 0,\n        billing_type TEXT NOT NULL DEFAULT 'per_instance',\n        billing_quantity REAL DEFAULT 1,\n        billing_parameters TEXT,\n        calculated_amount REAL NOT NULL DEFAULT 0,\n        receipt_number TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      -- Add order_id column to existing patient_services table if it doesn't exist\n      PRAGMA table_info(patient_services);\n    `);\n\n    // Check if order_id column exists and add it if it doesn't\n    const columns = sqlite.prepare(\"PRAGMA table_info(patient_services)\").all();\n    const hasOrderId = columns.some((col: any) => col.name === \"order_id\");\n\n    if (!hasOrderId) {\n      sqlite.exec(\"ALTER TABLE patient_services ADD COLUMN order_id TEXT;\");\n      console.log(\"Added order_id column to patient_services table\");\n    }\n\n    sqlite.exec(`\n\n      CREATE TABLE IF NOT EXISTS admissions (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        admission_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        doctor_id TEXT REFERENCES doctors(id),\n        current_room_id TEXT,\n        current_ward_type TEXT,\n        current_room_number TEXT,\n        admission_date TEXT NOT NULL,\n        discharge_date TEXT,\n        status TEXT NOT NULL DEFAULT 'admitted',\n        reason TEXT,\n        diagnosis TEXT,\n        notes TEXT,\n        daily_cost REAL NOT NULL DEFAULT 0,\n        total_cost REAL NOT NULL DEFAULT 0,\n        initial_deposit REAL NOT NULL DEFAULT 0,\n        additional_payments REAL NOT NULL DEFAULT 0,\n        last_payment_date TEXT,\n        total_discount REAL DEFAULT 0,\n        last_discount_date TEXT,\n        last_discount_amount REAL DEFAULT 0,\n        last_discount_reason TEXT,\n        last_payment_amount REAL DEFAULT 0,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS hospital_settings (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL DEFAULT 'MedCare Pro Hospital',\n        address TEXT NOT NULL DEFAULT '123 Healthcare Street, Medical District, City - 123456',\n        phone TEXT NOT NULL DEFAULT '+91 98765 43210',\n        email TEXT NOT NULL DEFAULT 'info@medcarepro.com',\n        registration_number TEXT,\n        logo_path TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS admission_events (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        admission_id TEXT NOT NULL REFERENCES admissions(id),\n        event_type TEXT NOT NULL,\n        event_time TEXT NOT NULL DEFAULT (datetime('now')),\n        room_id TEXT,\n        room_number TEXT,\n        ward_type TEXT,\n        notes TEXT,\n        receipt_number TEXT,\n        created_by TEXT REFERENCES users(id),\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS room_types (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL UNIQUE,\n        category TEXT NOT NULL,\n        daily_cost REAL NOT NULL DEFAULT 0,\n        total_beds INTEGER NOT NULL DEFAULT 0,\n        occupied_beds INTEGER NOT NULL DEFAULT 0,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS rooms (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        room_number TEXT NOT NULL UNIQUE,\n        room_type_id TEXT NOT NULL REFERENCES room_types(id),\n        floor TEXT,\n        building TEXT,\n        capacity INTEGER NOT NULL DEFAULT 1,\n        is_occupied INTEGER NOT NULL DEFAULT 0,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        notes TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS pathology_categories (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL UNIQUE,\n        description TEXT,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS dynamic_pathology_tests (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        category_id TEXT NOT NULL REFERENCES pathology_categories(id),\n        test_name TEXT NOT NULL,\n        price REAL NOT NULL DEFAULT 0,\n        normal_range TEXT,\n        description TEXT,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS audit_log (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        user_id TEXT NOT NULL REFERENCES users(id),\n        action TEXT NOT NULL,\n        table_name TEXT NOT NULL,\n        record_id TEXT NOT NULL,\n        old_values TEXT,\n        new_values TEXT,\n        ip_address TEXT,\n        user_agent TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS system_settings (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        email_notifications INTEGER NOT NULL DEFAULT 0,\n        sms_notifications INTEGER NOT NULL DEFAULT 0,\n        auto_backup INTEGER NOT NULL DEFAULT 1,\n        audit_logging INTEGER NOT NULL DEFAULT 1,\n        backup_frequency TEXT NOT NULL DEFAULT 'daily',\n        backup_time TEXT NOT NULL DEFAULT '02:00',\n        last_backup_date TEXT,\n        backup_retention_days INTEGER NOT NULL DEFAULT 30,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS backup_logs (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        backup_id TEXT NOT NULL UNIQUE,\n        status TEXT NOT NULL,\n        backup_type TEXT NOT NULL DEFAULT 'auto',\n        file_path TEXT,\n        file_size INTEGER,\n        start_time TEXT NOT NULL,\n        end_time TEXT,\n        error_message TEXT,\n        table_count INTEGER,\n        record_count INTEGER,\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS activities (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        user_id TEXT NOT NULL REFERENCES users(id),\n        activity_type TEXT NOT NULL,\n        title TEXT NOT NULL,\n        description TEXT,\n        entity_id TEXT,\n        entity_type TEXT,\n        metadata TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patient_payments (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        payment_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        amount REAL NOT NULL,\n        payment_method TEXT NOT NULL,\n        payment_date TEXT NOT NULL,\n        reason TEXT,\n        receipt_number TEXT,\n        processed_by TEXT NOT NULL REFERENCES users(id),\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patient_discounts (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        discount_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        amount REAL NOT NULL,\n        discount_type TEXT NOT NULL DEFAULT 'manual',\n        reason TEXT NOT NULL,\n        discount_date TEXT NOT NULL,\n        approved_by TEXT NOT NULL REFERENCES users(id),\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS schedule_events (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        title TEXT NOT NULL,\n        description TEXT,\n        start_time TEXT NOT NULL,\n        end_time TEXT NOT NULL,\n        doctor_id TEXT REFERENCES doctors(id),\n        patient_id TEXT REFERENCES patients(id),\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS service_categories (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL UNIQUE,\n        label TEXT NOT NULL,\n        description TEXT,\n        icon TEXT NOT NULL DEFAULT 'Settings',\n        is_active INTEGER NOT NULL DEFAULT 1,\n        is_system INTEGER NOT NULL DEFAULT 0,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS doctor_service_rates (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        doctor_id TEXT NOT NULL REFERENCES doctors(id),\n        service_id TEXT NOT NULL REFERENCES services(id),\n        service_name TEXT NOT NULL,\n        service_category TEXT NOT NULL,\n        rate_type TEXT NOT NULL DEFAULT 'per_instance',\n        rate_amount REAL NOT NULL,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        notes TEXT,\n        created_by TEXT NOT NULL REFERENCES users(id),\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS doctor_earnings (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        earning_id TEXT NOT NULL UNIQUE,\n        doctor_id TEXT NOT NULL REFERENCES doctors(id),\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        service_id TEXT NOT NULL REFERENCES services(id),\n        patient_service_id TEXT REFERENCES patient_services(id),\n        service_name TEXT NOT NULL,\n        service_category TEXT NOT NULL,\n        service_date TEXT NOT NULL,\n        rate_type TEXT NOT NULL,\n        rate_amount REAL NOT NULL,\n        service_price REAL NOT NULL,\n        earned_amount REAL NOT NULL,\n        status TEXT NOT NULL DEFAULT 'pending',\n        notes TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS doctor_payments (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        payment_id TEXT NOT NULL UNIQUE,\n        doctor_id TEXT NOT NULL REFERENCES doctors(id),\n        payment_date TEXT NOT NULL,\n        total_amount REAL NOT NULL,\n        payment_method TEXT NOT NULL,\n        earnings_included TEXT NOT NULL,\n        start_date TEXT NOT NULL,\n        end_date TEXT NOT NULL,\n        description TEXT,\n        processed_by TEXT NOT NULL REFERENCES users(id),\n        receipt_number TEXT,\n        notes TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n    `);\n\n    // Migrate existing tables to add new columns if they don't exist\n    try {\n      // Add total_beds and occupied_beds columns to room_types table if they don't exist\n      db.$client.exec(`\n        ALTER TABLE room_types ADD COLUMN total_beds INTEGER DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE room_types ADD COLUMN occupied_beds INTEGER DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add additional_payments column to admissions table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN additional_payments REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add registration_number column to hospital_settings table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE hospital_settings ADD COLUMN registration_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add new columns to admissions table for current room tracking\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN current_room_id TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN current_ward_type TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN current_room_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add last_payment_date column to admissions table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_payment_date TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add discount-related columns to admissions table if they don't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN total_discount REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_discount_date TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_discount_amount REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_discount_reason TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_payment_amount REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add receiptNumber column to patient_services table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE patient_services ADD COLUMN receipt_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add receiptNumber column to pathology_orders table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE pathology_orders ADD COLUMN receipt_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add receiptNumber column to admission_events table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admission_events ADD COLUMN receipt_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add billing columns to services table if they don't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE services ADD COLUMN billing_type TEXT DEFAULT 'per_instance';\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE services ADD COLUMN billing_parameters TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add billing columns to patient_services table if they don't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE patient_services ADD COLUMN billing_type TEXT DEFAULT 'per_instance';\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE patient_services ADD COLUMN billing_quantity REAL DEFAULT 1;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE patient_services ADD COLUMN billing_parameters TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE patient_services ADD COLUMN calculated_amount REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add consultation_fee column to patient_visits table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE patient_visits ADD COLUMN consultation_fee REAL DEFAULT 0;\n      `);\n      console.log(\"Added consultation_fee column to patient_visits table\");\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add timezone columns to system_settings table if they don't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE system_settings ADD COLUMN timezone TEXT DEFAULT 'UTC';\n      `);\n      console.log(\"Added timezone column to system_settings table\");\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE system_settings ADD COLUMN timezone_offset TEXT DEFAULT '+00:00';\n      `);\n      console.log(\"Added timezone_offset column to system_settings table\");\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Always ensure demo users and data exist on every restart\n    await createDemoData();\n\n    // Ensure Root user has super_user role\n    await ensureRootUserSuperRole();\n\n    console.log(\"Database initialized successfully\");\n  } catch (error) {\n    console.error(\"Database initialization error:\", error);\n  }\n}\n\n// Ensure Root user has super_user role\nasync function ensureRootUserSuperRole() {\n  try {\n    // Check if root user exists\n    const rootUser = db\n      .select()\n      .from(schema.users)\n      .where(eq(schema.users.username, \"root\"))\n      .get();\n\n    if (!rootUser) {\n      // Create root user with super_user role\n      const hashedPassword = await bcrypt.hash(\"root123\", 10);\n      const rolesJson = JSON.stringify([\"super_user\"]);\n      db.insert(schema.users)\n        .values({\n          id: \"root-user-id\",\n          username: \"root\",\n          password: hashedPassword,\n          fullName: \"Root User\",\n          roles: rolesJson,\n          primaryRole: \"super_user\",\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        })\n        .run();\n      console.log(\"Created Root user with super_user role\");\n    } else {\n      // Update existing root user to have super_user role if it doesn't already\n      const currentRoles = JSON.parse(rootUser.roles);\n      if (\n        !currentRoles.includes(\"super_user\") ||\n        rootUser.primaryRole !== \"super_user\"\n      ) {\n        const updatedRoles = JSON.stringify([\"super_user\"]);\n        db.update(schema.users)\n          .set({\n            roles: updatedRoles,\n            primaryRole: \"super_user\",\n            updatedAt: new Date().toISOString(),\n          })\n          .where(eq(schema.users.id, rootUser.id))\n          .run();\n        console.log(\"Updated Root user to have super_user role\");\n      }\n    }\n  } catch (error) {\n    console.error(\"Error ensuring Root user super role:\", error);\n  }\n}\n\n// Demo data creation function\nasync function createDemoData() {\n  try {\n    // Check and create demo users (only create if they've never existed before)\n    const demoUserData = [\n      {\n        username: \"doctor\",\n        password: \"doctor123\",\n        fullName: \"Dr. John Smith\",\n        roles: [\"doctor\", \"billing_staff\"], // Multiple roles\n        primaryRole: \"doctor\",\n        id: \"doctor-user-id\",\n      },\n      {\n        username: \"billing\",\n        password: \"billing123\",\n        fullName: \"Billing Staff\",\n        roles: [\"billing_staff\"],\n        primaryRole: \"billing_staff\",\n        id: \"billing-user-id\",\n      },\n      {\n        username: \"reception\",\n        password: \"reception123\",\n        fullName: \"Reception Staff\",\n        roles: [\"receptionist\"],\n        primaryRole: \"receptionist\",\n        id: \"reception-user-id\",\n      },\n    ];\n\n    for (const userData of demoUserData) {\n      // Check if user exists by ID (this will be null if user was deleted)\n      const existing = db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, userData.id))\n        .get();\n      if (!existing) {\n        // Only create if it's the first time the system is running (no users exist at all)\n        const allUsers = db.select().from(schema.users).all();\n        if (allUsers.length <= 1) {\n          // Allow for root user existence\n          const hashedPassword = await bcrypt.hash(userData.password, 10);\n          const rolesJson = JSON.stringify(userData.roles);\n          db.insert(schema.users)\n            .values({\n              id: userData.id,\n              username: userData.username,\n              password: hashedPassword,\n              fullName: userData.fullName,\n              roles: rolesJson, // Store roles as JSON string\n              primaryRole: userData.primaryRole,\n              isActive: true,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n            })\n            .run();\n          console.log(`Created demo user: ${userData.username}`);\n        }\n      }\n    }\n\n    // Check and create demo doctor profile\n    const existingDoctor = db\n      .select()\n      .from(schema.doctors)\n      .where(eq(schema.doctors.id, \"doctor-profile-id\"))\n      .get();\n    if (!existingDoctor) {\n      // Ensure the doctor user exists first\n      const doctorUser = db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, \"doctor-user-id\"))\n        .get();\n      if (doctorUser) {\n        db.insert(schema.doctors)\n          .values({\n            id: \"doctor-profile-id\",\n            userId: \"doctor-user-id\",\n            name: \"Dr. John Smith\",\n            specialization: \"General Medicine\",\n            qualification: \"MBBS, MD\",\n            consultationFee: 500,\n            isActive: true,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n          })\n          .run();\n        console.log(\"Created demo doctor profile\");\n      } else {\n        console.log(\n          \"Skipping demo doctor profile creation - doctor user not found\",\n        );\n      }\n    }\n\n    console.log(\"Demo data verification completed\");\n  } catch (error) {\n    console.error(\"Error creating demo data:\", error);\n  }\n}\n\n// IMPORTANT: All timestamps in the database are stored in UTC.\n// The server should NOT format timestamps for display - that's the frontend's job.\n// The frontend uses Intl.DateTimeFormat with the configured IANA timezone to\n// correctly handle timezone conversion including DST.\n//\n// This file intentionally does NOT include a server-side formatting function\n// to prevent double-offset issues. If you need to format timestamps on the server\n// (e.g., for exports), use a proper library like date-fns-tz or Luxon.\n\n// Initialize the database\ninitializeDatabase().then(() => {\n  createDemoData();\n});\n\nexport interface IStorage {\n  // User management\n  createUser(user: InsertUser): Promise<User>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<User | undefined>;\n  verifyPassword(password: string, hashedPassword: string): Promise<boolean>;\n  hashPassword(password: string): Promise<string>;\n\n  // Doctor management\n  createDoctor(doctor: InsertDoctor, userId?: string): Promise<Doctor>;\n  getDoctors(): Promise<Doctor[]>;\n  getDoctorById(id: string): Promise<Doctor | undefined>;\n  updateDoctor(\n    id: string,\n    doctor: Partial<InsertDoctor>,\n  ): Promise<Doctor | undefined>;\n  deleteDoctor(id: string, userId?: string): Promise<Doctor | undefined>; // Added deleteDoctor\n  restoreDoctor(id: string, userId?: string): Promise<Doctor | undefined>;\n  permanentlyDeleteDoctor(id: string): Promise<Doctor | undefined>;\n\n  // Patient management\n  createPatient(patient: InsertPatient, userId?: string): Promise<Patient>;\n  getPatients(): Promise<Patient[]>;\n  getPatientById(id: string): Promise<Patient | undefined>;\n  searchPatients(query: string): Promise<Patient[]>;\n  updatePatient(\n    id: string,\n    patient: Partial<InsertPatient>,\n  ): Promise<Patient | undefined>;\n\n  // Patient visits\n  createPatientVisit(visit: InsertPatientVisit): Promise<PatientVisit>;\n  getPatientVisits(patientId?: string): Promise<PatientVisit[]>;\n  getPatientVisitById(id: string): Promise<PatientVisit | undefined>;\n\n  // OPD visits - specific methods for OPD management\n  createOpdVisit(visit: InsertPatientVisit): Promise<PatientVisit>;\n  getOpdVisits(filters?: {\n    doctorId?: string;\n    patientId?: string;\n    scheduledDate?: string;\n    status?: string;\n    fromDate?: string;\n    toDate?: string;\n  }): Promise<any[]>;\n  updateOpdVisitStatus(\n    id: string,\n    status: string,\n  ): Promise<PatientVisit | undefined>;\n\n  // Services\n  createService(service: InsertService, userId?: string): Promise<Service>;\n  getServices(): Promise<Service[]>;\n  getServiceById(id: string): Promise<Service | undefined>;\n  searchServices(query: string): Promise<Service[]>;\n  updateService(\n    id: string,\n    service: InsertService,\n    userId?: string,\n  ): Promise<Service | undefined>;\n  deleteService(id: string, userId?: string): Promise<boolean>;\n\n  // Billing\n  createBill(\n    bill: InsertBill,\n    items: InsertBillItem[],\n    userId?: string,\n  ): Promise<Bill>;\n  getBills(): Promise<Bill[]>;\n  getBillById(id: string): Promise<Bill | undefined>;\n  getBillItems(billId: string): Promise<BillItem[]>;\n  getBillsWithPatients(): Promise<any[]>;\n  getBillsWithFilters(filters: BillFilters): Promise<any[]>;\n\n  // Pathology order and test management\n  createPathologyOrder(\n    orderData: InsertPathologyOrder,\n    tests: InsertPathologyTest[],\n    userId?: string,\n  ): Promise<PathologyOrder>;\n  getPathologyOrders(fromDate?: string, toDate?: string): Promise<any[]>;\n  getPathologyOrderById(id: string): Promise<any>;\n  getPathologyOrdersByPatient(patientId: string): Promise<PathologyOrder[]>;\n  updatePathologyOrderStatus(\n    id: string,\n    status: string,\n  ): Promise<PathologyOrder | undefined>;\n  updatePathologyTestStatus(\n    id: string,\n    status: string,\n    results?: string,\n    userId?: string,\n  ): Promise<PathologyTest | undefined>;\n\n  // Patient Services\n  createPatientService(\n    service: InsertPatientService,\n    userId?: string,\n  ): Promise<PatientService>;\n  createPatientServicesBatch(\n    services: InsertPatientService[],\n    userId?: string,\n  ): Promise<PatientService[]>;\n  getPatientServices(patientId?: string): Promise<PatientService[]>;\n  getPatientServicesWithFilters(\n    filters: PatientServiceFilters,\n  ): Promise<PatientService[]>;\n  getPatientServiceById(id: string): Promise<PatientService | undefined>;\n  updatePatientService(\n    id: string,\n    service: Partial<InsertPatientService>,\n  ): Promise<PatientService | undefined>;\n\n  // Patient Admissions\n  createAdmission(admission: InsertAdmission): Promise<Admission>;\n  getAdmissions(\n    patientId?: string,\n    fromDate?: string,\n    toDate?: string,\n  ): Promise<Admission[]>;\n  getAdmissionById(id: string): Promise<Admission | undefined>;\n  updateAdmission(\n    id: string,\n    admission: Partial<InsertAdmission>,\n  ): Promise<Admission | undefined>;\n\n  // Admission Events\n  createAdmissionEvent(event: InsertAdmissionEvent): Promise<AdmissionEvent>;\n  getAdmissionEvents(admissionId: string): Promise<AdmissionEvent[]>;\n  transferRoom(\n    admissionId: string,\n    roomData: { roomNumber: string; wardType: string },\n    userId: string,\n  ): Promise<Admission | undefined>;\n  dischargePatient(\n    admissionId: string,\n    userId: string,\n    dischargeDateTime?: string,\n  ): Promise<Admission | undefined>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise<any>;\n\n  // Hospital settings\n  getHospitalSettings(): Promise<any>;\n  saveHospitalSettings(settings: any): Promise<any>;\n  saveLogo(logoData: string): Promise<string>;\n\n  // System settings\n  getSystemSettings(): Promise<any>;\n  saveSystemSettings(settings: any): Promise<any>;\n\n  // Backup functionality\n  createBackup(backupType?: string): Promise<any>;\n  getBackupLogs(): Promise<any[]>;\n  getBackupHistory(): Promise<any[]>;\n  cleanOldBackups(): Promise<void>;\n  restoreBackup(backupFilePath: string): Promise<any>;\n  getAvailableBackups(): Promise<any[]>;\n\n  // Audit logging\n  logAction(log: InsertAuditLog): Promise<void>;\n\n  // Activity logging\n  logActivity(\n    userId: string,\n    activityType: string,\n    title: string,\n    description: string,\n    entityId?: string,\n    entityType?: string,\n    metadata?: any,\n  ): Promise<void>;\n  getRecentActivities(limit?: number): Promise<any[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n\n  // Receipt numbering\n  getDailyReceiptCount(serviceType: string, date: string): Promise<number>;\n  getDailyReceiptCountSync(serviceType: string, date: string): number;\n\n  // Pathology category management\n  createPathologyCategory(\n    category: InsertPathologyCategory,\n  ): Promise<PathologyCategory>;\n  getPathologyCategories(): Promise<PathologyCategory[]>;\n  getPathologyCategoryById(id: string): Promise<PathologyCategory | undefined>;\n  updatePathologyCategory(\n    id: string,\n    category: Partial<InsertPathologyCategory>,\n  ): Promise<PathologyCategory | undefined>;\n  deletePathologyCategory(id: string): Promise<boolean>;\n\n  // Dynamic pathology test management\n  createDynamicPathologyTest(\n    test: InsertDynamicPathologyTest,\n  ): Promise<DynamicPathologyTest>;\n  getDynamicPathologyTests(): Promise<DynamicPathologyTest[]>;\n  getDynamicPathologyTestsByCategory(\n    categoryId: string,\n  ): Promise<DynamicPathologyTest[]>;\n  getDynamicPathologyTestById(\n    id: string,\n  ): Promise<DynamicPathologyTest | undefined>;\n  updateDynamicPathologyTest(\n    id: string,\n    test: Partial<InsertDynamicPathologyTest>,\n  ): Promise<DynamicPathologyTest | undefined>;\n  deleteDynamicPathologyTest(id: string): Promise<boolean>;\n  bulkCreateDynamicPathologyTests(\n    tests: InsertDynamicPathologyTest[],\n  ): Promise<DynamicPathologyTest[]>;\n\n  // Schedule Event Management\n  getAllScheduleEvents(): Promise<ScheduleEvent[]>;\n  createScheduleEvent(event: InsertScheduleEvent): Promise<ScheduleEvent>;\n  updateScheduleEvent(\n    id: string,\n    event: Partial<InsertScheduleEvent>,\n  ): Promise<ScheduleEvent | undefined>;\n  deleteScheduleEvent(id: string): Promise<void>;\n  getScheduleEventsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise<ScheduleEvent[]>;\n  getScheduleEventsByDoctor(doctorId: string): Promise<ScheduleEvent[]>;\n\n  // Inpatient Management Detail Methods\n  getBedOccupancyDetails(): Promise<any[]>;\n  getCurrentlyAdmittedPatients(): Promise<any[]>;\n  getTodayAdmissions(): Promise<any[]>;\n  getTodayDischarges(): Promise<any[]>;\n\n  // Service Category Management\n  getServiceCategories(): Promise<ServiceCategory[]>;\n  createServiceCategory(\n    category: InsertServiceCategory,\n  ): Promise<ServiceCategory>;\n  updateServiceCategory(\n    id: string,\n    category: Partial<InsertServiceCategory>,\n  ): Promise<ServiceCategory | undefined>;\n  deleteServiceCategory(id: string): Promise<boolean>;\n\n  // Comprehensive Bill Generation\n  generateComprehensiveBill(patientId: string): Promise<any>;\n\n  // Doctor Salary Management\n  createDoctorServiceRate(\n    rate: InsertDoctorServiceRate,\n  ): Promise<DoctorServiceRate>;\n  getDoctorServiceRates(doctorId?: string): Promise<DoctorServiceRate[]>;\n  getDoctorServiceRateById(id: string): Promise<DoctorServiceRate | undefined>;\n  updateDoctorServiceRate(\n    id: string,\n    rate: Partial<InsertDoctorServiceRate>,\n  ): Promise<DoctorServiceRate | undefined>;\n  deleteDoctorServiceRate(id: string): Promise<boolean>;\n\n  // Doctor Earnings Management\n  createDoctorEarning(earning: InsertDoctorEarning): Promise<DoctorEarning>;\n  getDoctorEarnings(\n    doctorId?: string,\n    status?: string,\n  ): Promise<DoctorEarning[]>;\n  getDoctorEarningById(id: string): Promise<DoctorEarning | undefined>;\n  updateDoctorEarningStatus(\n    id: string,\n    status: string,\n  ): Promise<DoctorEarning | undefined>;\n  getDoctorPendingEarnings(doctorId: string): Promise<DoctorEarning[]>;\n  recalculateDoctorEarnings(\n    doctorId?: string,\n  ): Promise<{ processed: number; created: number }>;\n\n  // New function for bulk pending bills\n  getAllPatientsPendingBills(): Promise<any[]>;\n}\n\nexport class SqliteStorage implements IStorage {\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n\n  private generatePatientId(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.patients).all().length + 1;\n    return `PAT-${year}-${count.toString().padStart(3, \"0\")}`;\n  }\n\n  private generateVisitId(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.patientVisits).all().length + 1;\n    return `VIS-${year}-${count.toString().padStart(3, \"0\")}`;\n  }\n\n  private generateBillNumber(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.bills).all().length + 1;\n    return `BILL-${year}-${count.toString().padStart(4, \"0\")}`;\n  }\n\n  private generateOrderId(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.pathologyOrders).all().length + 1;\n    return `LAB-${year}-${count.toString().padStart(3, \"0\")}`;\n  }\n\n  private generateServiceOrderId(): string {\n    const year = new Date().getFullYear();\n    // Count DISTINCT orderIds instead of all services to get correct sequential number\n    const existingOrderIds = db\n      .select({ orderId: schema.patientServices.orderId })\n      .from(schema.patientServices)\n      .where(isNotNull(schema.patientServices.orderId))\n      .all();\n\n    // Get unique orderIds\n    const uniqueOrderIds = new Set(existingOrderIds.map((row) => row.orderId));\n    const count = uniqueOrderIds.size + 1;\n\n    // Use SER prefix and flexible padding (3 digits minimum, grows as needed)\n    return `SER-${year}-${count.toString().padStart(3, \"0\")}`;\n  }\n\n  private generateAdmissionId(): string {\n    const year = new Date().getFullYear();\n    try {\n      const count = db.select().from(schema.admissions).all().length + 1;\n      return `ADM-${year}-${count.toString().padStart(3, \"0\")}`;\n    } catch (error) {\n      console.error(\"Error querying admissions table:\", error);\n      // Fallback to timestamp-based ID if table query fails\n      const timestamp = Date.now().toString().slice(-6);\n      return `ADM-${year}-${timestamp}`;\n    }\n  }\n\n  private generatePaymentId(): string {\n    const year = new Date().getFullYear();\n    try {\n      const count = db.select().from(schema.patientPayments).all().length + 1;\n      return `PAY-${year}-${count.toString().padStart(3, \"0\")}`;\n    } catch (error) {\n      console.error(\"Error querying patient_payments table:\", error);\n      const timestamp = Date.now().toString().slice(-6);\n      return `PAY-${year}-${timestamp}`;\n    }\n  }\n\n  private generateDiscountId(): string {\n    const year = new Date().getFullYear();\n    try {\n      const count = db.select().from(schema.patientDiscounts).all().length + 1;\n      return `DISC-${year}-${count.toString().padStart(3, \"0\")}`;\n    } catch (error) {\n      console.error(\"Error querying patient_discounts table:\", error);\n      const timestamp = Date.now().toString().slice(-6);\n      return `DISC-${year}-${timestamp}`;\n    }\n  }\n\n  private generateEarningId(): string {\n    const year = new Date().getFullYear();\n    try {\n      const count = db.select().from(schema.doctorEarnings).all().length + 1;\n      return `EARN-${year}-${count.toString().padStart(3, \"0\")}`;\n    } catch (error) {\n      console.error(\"Error querying doctor_earnings table:\", error);\n      const timestamp = Date.now().toString().slice(-6);\n      return `EARN-${year}-${timestamp}`;\n    }\n  }\n\n  private generateDoctorPaymentId(): string {\n    const year = new Date().getFullYear();\n    try {\n      const count = db.select().from(schema.doctorPayments).all().length + 1;\n      return `DPAY-${year}-${count.toString().padStart(3, \"0\")}`;\n    } catch (error) {\n      console.error(\"Error querying doctor_payments table:\", error);\n      const timestamp = Date.now().toString().slice(-6);\n      return `DPAY-${year}-${timestamp}`;\n    }\n  }\n\n  // Calculate and create doctor earning record for a patient service\n  private async calculateDoctorEarning(\n    patientService: PatientService,\n    service: Service,\n  ): Promise<void> {\n    try {\n      console.log(\n        `Starting earnings calculation for doctor ${patientService.doctorId}, patient service ${patientService.id}`,\n      );\n      console.log(\n        `Service details - ID: ${service.id}, Name: ${service.name}, Category: ${service.category}`,\n      );\n\n      // Check if earning already exists for this patient service to prevent duplicates\n      const existingEarning = db\n        .select()\n        .from(schema.doctorEarnings)\n        .where(eq(schema.doctorEarnings.patientServiceId, patientService.id))\n        .get();\n\n      if (existingEarning) {\n        console.log(\n          `Earning already exists for patient service ${patientService.id}, skipping creation`,\n        );\n        return;\n      }\n\n      // Try to find doctor service rate - First by exact serviceId match\n      let doctorRate = db\n        .select()\n        .from(schema.doctorServiceRates)\n        .where(\n          and(\n            eq(schema.doctorServiceRates.doctorId, patientService.doctorId!),\n            eq(schema.doctorServiceRates.serviceId, service.id),\n            eq(schema.doctorServiceRates.isActive, true),\n          ),\n        )\n        .get();\n\n      // If not found by serviceId, try matching by service name and category\n      if (!doctorRate) {\n        console.log(\n          `No exact serviceId match, trying name+category match for ${service.name} in ${service.category}`,\n        );\n        doctorRate = db\n          .select()\n          .from(schema.doctorServiceRates)\n          .where(\n            and(\n              eq(schema.doctorServiceRates.doctorId, patientService.doctorId!),\n              eq(schema.doctorServiceRates.serviceName, service.name),\n              eq(schema.doctorServiceRates.serviceCategory, service.category),\n              eq(schema.doctorServiceRates.isActive, true),\n            ),\n          )\n          .get();\n      }\n\n      if (!doctorRate) {\n        console.log(\n          `No salary rate found for doctor ${patientService.doctorId}, service ${service.name} (${service.category})`,\n        );\n        return;\n      }\n\n      console.log(\n        `Found doctor rate: ${doctorRate.rateType} = ${doctorRate.rateAmount} for service ${service.name}`,\n      );\n\n      // Calculate earning amount based on rate type\n      let earnedAmount = 0;\n      const servicePrice =\n        patientService.calculatedAmount ||\n        patientService.price ||\n        service.price;\n\n      if (doctorRate.rateType === \"percentage\") {\n        earnedAmount = (servicePrice * doctorRate.rateAmount) / 100;\n      } else if (doctorRate.rateType === \"amount\") {\n        earnedAmount = doctorRate.rateAmount;\n      } else if (doctorRate.rateType === \"fixed_daily\") {\n        earnedAmount = doctorRate.rateAmount;\n      }\n\n      console.log(\n        `Calculated earning: ₹${earnedAmount} (${doctorRate.rateType} of ₹${servicePrice})`,\n      );\n\n      // Create doctor earning record using the storage interface method\n      await this.createDoctorEarning({\n        doctorId: patientService.doctorId!,\n        patientId: patientService.patientId,\n        serviceId: service.id,\n        patientServiceId: patientService.id,\n        serviceName: service.name,\n        serviceCategory: doctorRate.serviceCategory,\n        serviceDate: patientService.scheduledDate,\n        rateType: doctorRate.rateType,\n        rateAmount: doctorRate.rateAmount,\n        servicePrice,\n        earnedAmount,\n        status: \"pending\",\n        notes: `Automatic calculation for ${service.name}`,\n      });\n\n      console.log(\n        `✓ Created doctor earning for doctor ${patientService.doctorId} amount ₹${earnedAmount}`,\n      );\n    } catch (error) {\n      console.error(\"Error calculating doctor earning:\", error);\n    }\n  }\n\n  // Calculate and create doctor earning for OPD consultation from patient_visits\n  private async calculateOpdEarning(patientVisit: PatientVisit): Promise<void> {\n    try {\n      if (\n        !patientVisit.doctorId ||\n        !patientVisit.consultationFee ||\n        patientVisit.consultationFee === 0\n      ) {\n        console.log(\n          `Skipping OPD earning - no doctor or zero fee for visit ${patientVisit.visitId}`,\n        );\n        return;\n      }\n\n      console.log(\n        `Starting OPD earnings calculation for doctor ${patientVisit.doctorId}, visit ${patientVisit.visitId}`,\n      );\n\n      // Check if earning already exists for this visit to prevent duplicates\n      const existingEarning = db\n        .select()\n        .from(schema.doctorEarnings)\n        .where(\n          eq(\n            schema.doctorEarnings.notes,\n            `OPD consultation - Visit ${patientVisit.visitId}`,\n          ),\n        )\n        .get();\n\n      if (existingEarning) {\n        console.log(\n          `Earning already exists for visit ${patientVisit.visitId}, skipping creation`,\n        );\n        return;\n      }\n\n      // Find doctor OPD consultation rate\n      const opdRate = db\n        .select()\n        .from(schema.doctorServiceRates)\n        .where(\n          and(\n            eq(schema.doctorServiceRates.doctorId, patientVisit.doctorId),\n            eq(schema.doctorServiceRates.serviceCategory, \"opd\"),\n            eq(schema.doctorServiceRates.isActive, true),\n          ),\n        )\n        .get();\n\n      if (!opdRate) {\n        console.log(\n          `No OPD consultation rate found for doctor ${patientVisit.doctorId}`,\n        );\n        return;\n      }\n\n      console.log(\n        `Found OPD rate: ${opdRate.rateType} = ${opdRate.rateAmount}`,\n      );\n\n      // Calculate earning amount based on rate type\n      let earnedAmount = 0;\n      const consultationFee = patientVisit.consultationFee;\n\n      if (opdRate.rateType === \"percentage\") {\n        earnedAmount = (consultationFee * opdRate.rateAmount) / 100;\n      } else if (opdRate.rateType === \"per_instance\") {\n        earnedAmount = opdRate.rateAmount;\n      }\n\n      console.log(\n        `Calculated OPD earning: ₹${earnedAmount} (${opdRate.rateType} of ₹${consultationFee})`,\n      );\n\n      // Create doctor earning record\n      await this.createDoctorEarning({\n        doctorId: patientVisit.doctorId,\n        patientId: patientVisit.patientId,\n        serviceId: \"opd-consultation\",\n        patientServiceId: null,\n        serviceName: \"OPD Consultation\",\n        serviceCategory: \"opd\",\n        serviceDate: patientVisit.scheduledDate || patientVisit.visitDate,\n        rateType: opdRate.rateType,\n        rateAmount: opdRate.rateAmount,\n        servicePrice: consultationFee,\n        earnedAmount,\n        status: \"pending\",\n        notes: `OPD consultation - Visit ${patientVisit.visitId}`,\n      });\n\n      console.log(\n        `✓ Created OPD earning for doctor ${patientVisit.doctorId} amount ₹${earnedAmount}`,\n      );\n    } catch (error) {\n      console.error(\"Error calculating OPD earning:\", error);\n    }\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 10);\n  }\n\n  async verifyPassword(\n    password: string,\n    hashedPassword: string,\n  ): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const hashedPassword = await this.hashPassword(userData.password);\n\n    // Convert roles array to JSON string for storage\n    const rolesJson = JSON.stringify(userData.roles);\n\n    // Set primary role to the first role in the array\n    const primaryRole = Array.isArray(userData.roles)\n      ? userData.roles[0]\n      : userData.roles;\n\n    const user = db\n      .insert(schema.users)\n      .values({\n        ...userData,\n        password: hashedPassword,\n        roles: rolesJson,\n        primaryRole: primaryRole, // Always use the calculated primaryRole\n      })\n      .returning()\n      .get();\n\n    // Add parsed roles array for convenience\n    const userWithRoles = {\n      ...user,\n      rolesArray: JSON.parse(user.roles),\n    };\n\n    // Activity logging is handled in the route handler for more detailed information\n    return userWithRoles;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const user = db\n      .select()\n      .from(schema.users)\n      .where(eq(schema.users.username, username))\n      .get();\n    if (!user) return undefined;\n\n    // Parse the roles JSON string into an array\n    return {\n      ...user,\n      rolesArray: JSON.parse(user.roles),\n    };\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const user = db\n      .select()\n      .from(schema.users)\n      .where(eq(schema.users.id, id))\n      .get();\n    if (!user) return undefined;\n\n    // Parse the roles JSON string into an array\n    return {\n      ...user,\n      rolesArray: JSON.parse(user.roles),\n    };\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const users = db\n      .select()\n      .from(schema.users)\n      .where(eq(schema.users.isActive, true))\n      .all();\n    // Parse the roles JSON string into an array for each user\n    return users.map((user) => ({\n      ...user,\n      rolesArray: JSON.parse(user.roles),\n    }));\n  }\n\n  async updateUser(\n    id: string,\n    userData: Partial<InsertUser>,\n  ): Promise<User | undefined> {\n    let updateData: any = { ...userData };\n\n    if (userData.password) {\n      updateData.password = await this.hashPassword(userData.password);\n    }\n\n    // Convert roles array to JSON string if provided\n    if (userData.roles) {\n      updateData.roles = JSON.stringify(userData.roles);\n    }\n\n    updateData.updatedAt = new Date().toISOString();\n\n    const user = db\n      .update(schema.users)\n      .set(updateData)\n      .where(eq(schema.users.id, id))\n      .returning()\n      .get();\n\n    if (user) {\n      const userWithRoles = {\n        ...user,\n        rolesArray: JSON.parse(user.roles),\n      };\n\n      this.logActivity(\n        \"system\",\n        \"user_updated\",\n        \"User updated\",\n        `Updated user: ${user.username} (${user.fullName})`,\n        user.id,\n        \"user\",\n        {\n          username: user.username,\n          roles: userWithRoles.rolesArray,\n          primaryRole: user.primaryRole,\n        },\n      );\n\n      return userWithRoles;\n    }\n\n    return undefined;\n  }\n\n  async deleteUser(id: string): Promise<User | undefined> {\n    try {\n      // Soft delete: mark user as inactive and append timestamp to username\n      const userToDelete = db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, id))\n        .get();\n\n      if (!userToDelete) {\n        return undefined;\n      }\n\n      // Log activity BEFORE deleting (while user still exists)\n      await this.logActivity(\n        \"system\",\n        \"user_deleted\",\n        \"User Deactivated\",\n        `${userToDelete.fullName} (${userToDelete.username}) was deactivated`,\n        userToDelete.id,\n        \"user\",\n        {\n          username: userToDelete.username,\n          fullName: userToDelete.fullName,\n          roles: JSON.parse(userToDelete.roles),\n        },\n      );\n\n      // Append timestamp to username to free it up for reuse\n      const timestamp = Date.now();\n      const newUsername = `${userToDelete.username}_deleted_${timestamp}`;\n\n      const deleted = db\n        .update(schema.users)\n        .set({\n          username: newUsername,\n          isActive: false,\n          updatedAt: new Date().toISOString(),\n        })\n        .where(eq(schema.users.id, id))\n        .returning()\n        .get();\n\n      return deleted;\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      throw error;\n    }\n  }\n\n  async createDoctor(doctor: InsertDoctor, userId?: string): Promise<Doctor> {\n    const created = db.insert(schema.doctors).values(doctor).returning().get();\n\n    // Log activity for doctor creation\n    if (userId) {\n      this.logActivity(\n        userId,\n        \"doctor_created\",\n        \"Doctor Added\",\n        `${created.name} - ${created.specialization}`,\n        created.id,\n        \"doctor\",\n        {\n          doctorName: created.name,\n          specialization: created.specialization,\n          consultationFee: created.consultationFee,\n        },\n      );\n    }\n\n    return created;\n  }\n\n  async getDoctors(): Promise<Doctor[]> {\n    return db\n      .select()\n      .from(schema.doctors)\n      .where(eq(schema.doctors.isActive, true))\n      .all();\n  }\n\n  async getDoctorById(id: string): Promise<Doctor | undefined> {\n    return db\n      .select()\n      .from(schema.doctors)\n      .where(eq(schema.doctors.id, id))\n      .get();\n  }\n\n  async updateDoctor(\n    id: string,\n    doctor: Partial<InsertDoctor>,\n  ): Promise<Doctor | undefined> {\n    const updated = db\n      .update(schema.doctors)\n      .set({ ...doctor, updatedAt: new Date().toISOString() })\n      .where(eq(schema.doctors.id, id))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async deleteDoctor(id: string, userId?: string): Promise<Doctor | undefined> {\n    try {\n      // Soft delete by setting isActive to false instead of hard delete\n      const deleted = db\n        .update(schema.doctors)\n        .set({\n          isActive: false,\n          updatedAt: new Date().toISOString(),\n        })\n        .where(eq(schema.doctors.id, id))\n        .returning()\n        .get();\n\n      // Activity logging is handled in the route handler to avoid duplicates\n      return deleted;\n    } catch (error) {\n      console.error(\"Error deleting doctor:\", error);\n      throw error;\n    }\n  }\n\n  async permanentlyDeleteDoctor(\n    id: string,\n    userId?: string,\n  ): Promise<Doctor | undefined> {\n    try {\n      // First, get the doctor to be deleted for returning and logging\n      const doctorToDelete = db\n        .select()\n        .from(schema.doctors)\n        .where(eq(schema.doctors.id, id))\n        .get();\n\n      if (!doctorToDelete) {\n        return undefined;\n      }\n\n      // Use transaction to handle foreign key constraints\n      const result = db.transaction((tx) => {\n        try {\n          // First, set all references to this doctor to null\n          tx.update(schema.patientVisits)\n            .set({ doctorId: null })\n            .where(eq(schema.patientVisits.doctorId, id))\n            .run();\n\n          tx.update(schema.pathologyOrders)\n            .set({ doctorId: null })\n            .where(eq(schema.pathologyOrders.doctorId, id))\n            .run();\n\n          tx.update(schema.patientServices)\n            .set({ doctorId: null })\n            .where(eq(schema.patientServices.doctorId, id))\n            .run();\n\n          tx.update(schema.admissions)\n            .set({ doctorId: null })\n            .where(eq(schema.admissions.doctorId, id))\n            .run();\n\n          // Now delete the doctor record\n          tx.delete(schema.doctors).where(eq(schema.doctors.id, id)).run();\n\n          return doctorToDelete;\n        } catch (transactionError) {\n          console.error(\n            \"Transaction error during permanent delete:\",\n            transactionError,\n          );\n          throw transactionError;\n        }\n      });\n\n      // Activity logging is handled in the route handler to avoid duplicates\n      return result;\n    } catch (error) {\n      console.error(\"Error permanently deleting doctor:\", error);\n      throw error;\n    }\n  }\n\n  async getDeletedDoctors(): Promise<Doctor[]> {\n    return db\n      .select()\n      .from(schema.doctors)\n      .where(eq(schema.doctors.isActive, false))\n      .all();\n  }\n\n  async restoreDoctor(\n    id: string,\n    userId?: string,\n  ): Promise<Doctor | undefined> {\n    try {\n      const restored = db\n        .update(schema.doctors)\n        .set({\n          isActive: true,\n          updatedAt: new Date().toISOString(),\n        })\n        .where(eq(schema.doctors.id, id))\n        .returning()\n        .get();\n\n      // Log activity for doctor restoration\n      if (restored && userId) {\n        this.logActivity(\n          userId,\n          \"doctor_restored\",\n          \"Doctor Restored\",\n          `${restored.name} - ${restored.specialization}`,\n          restored.id,\n          \"doctor\",\n          {\n            doctorName: restored.name,\n            specialization: restored.specialization,\n          },\n        );\n      }\n\n      return restored;\n    } catch (error) {\n      console.error(\"Error restoring doctor:\", error);\n      throw error;\n    }\n  }\n\n  async permanentlyDeleteDoctor(id: string): Promise<Doctor | undefined> {\n    try {\n      // First, get the doctor to be deleted for returning\n      const doctorToDelete = db\n        .select()\n        .from(schema.doctors)\n        .where(eq(schema.doctors.id, id))\n        .get();\n\n      if (!doctorToDelete) {\n        return undefined;\n      }\n\n      // Use transaction to handle foreign key constraints\n      return db.transaction((tx) => {\n        try {\n          // First, set all references to this doctor to null\n\n          // Update patient_visits to set doctorId to null\n          tx.update(schema.patientVisits)\n            .set({ doctorId: null })\n            .where(eq(schema.patientVisits.doctorId, id))\n            .run();\n\n          // Update pathology_orders to set doctorId to null\n          tx.update(schema.pathologyOrders)\n            .set({ doctorId: null })\n            .where(eq(schema.pathologyOrders.doctorId, id))\n            .run();\n\n          // Update patient_services to set doctorId to null\n          tx.update(schema.patientServices)\n            .set({ doctorId: null })\n            .where(eq(schema.patientServices.doctorId, id))\n            .run();\n\n          // Update admissions to set doctorId to null\n          tx.update(schema.admissions)\n            .set({ doctorId: null })\n            .where(eq(schema.admissions.doctorId, id))\n            .run();\n\n          // Now delete the doctor record\n          tx.delete(schema.doctors).where(eq(schema.doctors.id, id)).run();\n\n          return doctorToDelete;\n        } catch (transactionError) {\n          console.error(\n            \"Transaction error during permanent delete:\",\n            transactionError,\n          );\n          throw transactionError;\n        }\n      });\n    } catch (error) {\n      console.error(\"Error permanently deleting doctor:\", error);\n      throw error;\n    }\n  }\n\n  async getDailyPatientCount(): Promise<number> {\n    try {\n      const count = db.select().from(schema.patients).all().length;\n      return count;\n    } catch (error) {\n      console.error(\"Error getting daily patient count:\", error);\n      return 0;\n    }\n  }\n\n  async createPatient(\n    patientData: InsertPatient,\n    userId?: string,\n  ): Promise<Patient> {\n    // Generate patient ID\n    const today = new Date();\n    const year = today.getFullYear();\n    const patientCount = await this.getDailyPatientCount();\n    const patientId = `PAT-${year}-${String(patientCount + 1).padStart(3, \"0\")}`;\n\n    // Don't set createdAt or updatedAt - let the database default handle it in UTC\n    const patient = db\n      .insert(schema.patients)\n      .values({\n        ...patientData,\n        patientId,\n        // Explicitly omit timestamp fields to use database defaults\n        createdAt: undefined,\n        updatedAt: undefined,\n      })\n      .returning()\n      .get();\n\n    // Log activity\n    if (userId) {\n      this.logActivity(\n        userId,\n        \"patient_registered\",\n        \"New Patient Registered\",\n        `${patient.name} - ${patient.patientId}`,\n        patient.id,\n        \"patient\",\n        {\n          patientId: patient.patientId,\n          age: patient.age,\n          gender: patient.gender,\n        },\n      );\n    }\n\n    return patient;\n  }\n\n  async getPatients(): Promise<Patient[]> {\n    return db\n      .select()\n      .from(schema.patients)\n      .where(eq(schema.patients.isActive, true))\n      .orderBy(desc(schema.patients.createdAt))\n      .all();\n  }\n\n  async getPatientById(id: string): Promise<Patient | undefined> {\n    return db\n      .select()\n      .from(schema.patients)\n      .where(eq(schema.patients.id, id))\n      .get();\n  }\n\n  async searchPatients(query: string): Promise<Patient[]> {\n    return db\n      .select()\n      .from(schema.patients)\n      .where(\n        and(\n          eq(schema.patients.isActive, true),\n          like(schema.patients.name, `%${query}%`),\n        ),\n      )\n      .limit(10)\n      .all();\n  }\n\n  async updatePatient(\n    id: string,\n    patient: Partial<InsertPatient>,\n  ): Promise<Patient | undefined> {\n    const updated = db\n      .update(schema.patients)\n      .set({ ...patient, updatedAt: new Date().toISOString() })\n      .where(eq(schema.patients.id, id))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async createPatientVisit(visit: InsertPatientVisit): Promise<PatientVisit> {\n    const visitId = this.generateVisitId();\n    const created = db\n      .insert(schema.patientVisits)\n      .values({\n        ...visit,\n        visitId,\n      })\n      .returning()\n      .get();\n    return created;\n  }\n\n  async getPatientVisits(patientId?: string): Promise<PatientVisit[]> {\n    if (patientId) {\n      return db\n        .select()\n        .from(schema.patientVisits)\n        .where(eq(schema.patientVisits.patientId, patientId))\n        .orderBy(desc(schema.patientVisits.createdAt))\n        .all();\n    }\n    return db\n      .select()\n      .from(schema.patientVisits)\n      .orderBy(desc(schema.patientVisits.createdAt))\n      .all();\n  }\n\n  async getPatientVisitById(id: string): Promise<PatientVisit | undefined> {\n    return db\n      .select()\n      .from(schema.patientVisits)\n      .where(eq(schema.patientVisits.id, id))\n      .get();\n  }\n\n  // OPD-specific methods\n  async createOpdVisit(data: InsertPatientVisit): Promise<PatientVisit> {\n    try {\n      // Generate unique visit ID using total count instead of daily count to avoid duplicates\n      const totalVisitCount = await db\n        .select({ count: sql`COUNT(*)` })\n        .from(schema.patientVisits);\n\n      const visitCount = totalVisitCount[0]?.count || 0;\n      const orderNumber = String(visitCount + 1).padStart(4, \"0\");\n      const today = new Date().toISOString().slice(2, 10).replace(/-/g, \"\");\n      const visitId = `VIS-${today}-${orderNumber}`;\n\n      // Store the data as-is without any timezone conversion\n      const result = await db\n        .insert(schema.patientVisits)\n        .values({\n          ...data,\n          id: this.generateId(),\n          visitId: visitId,\n          visitType: \"opd\",\n          visitDate: data.scheduledDate || data.visitDate,\n          status: \"scheduled\",\n          consultationFee: data.consultationFee || 0,\n          // Database defaults will handle createdAt/updatedAt in UTC\n        })\n        .returning()\n        .get();\n\n      // Calculate doctor earning for this OPD visit\n      if (\n        result.doctorId &&\n        result.consultationFee &&\n        result.consultationFee > 0\n      ) {\n        await this.calculateOpdEarning(result);\n      }\n\n      return result;\n    } catch (error) {\n      console.error(\"Error creating OPD visit:\", error);\n      throw error;\n    }\n  }\n\n  async getOpdVisits(filters?: {\n    doctorId?: string;\n    patientId?: string;\n    scheduledDate?: string;\n    status?: string;\n    fromDate?: string;\n    toDate?: string;\n  }): Promise<any[]> {\n    const whereConditions: any[] = [eq(schema.patientVisits.visitType, \"opd\")];\n\n    if (filters?.doctorId && filters.doctorId !== \"all\") {\n      whereConditions.push(eq(schema.patientVisits.doctorId, filters.doctorId));\n    }\n\n    if (filters?.patientId) {\n      whereConditions.push(\n        eq(schema.patientVisits.patientId, filters.patientId),\n      );\n    }\n\n    if (filters?.scheduledDate) {\n      whereConditions.push(\n        eq(schema.patientVisits.scheduledDate, filters.scheduledDate),\n      );\n    }\n\n    if (filters?.status && filters.status !== \"all\") {\n      whereConditions.push(eq(schema.patientVisits.status, filters.status));\n    }\n\n    if (filters?.fromDate) {\n      whereConditions.push(\n        gte(schema.patientVisits.scheduledDate, filters.fromDate),\n      );\n    }\n\n    if (filters?.toDate) {\n      whereConditions.push(\n        lte(schema.patientVisits.scheduledDate, filters.toDate),\n      );\n    }\n\n    // Join with patients and doctors to get their details\n    const results = db\n      .select({\n        id: schema.patientVisits.id,\n        visitId: schema.patientVisits.visitId,\n        patientId: schema.patientVisits.patientId,\n        doctorId: schema.patientVisits.doctorId,\n        visitType: schema.patientVisits.visitType,\n        visitDate: schema.patientVisits.visitDate,\n        scheduledDate: schema.patientVisits.scheduledDate,\n        scheduledTime: schema.patientVisits.scheduledTime,\n        symptoms: schema.patientVisits.symptoms,\n        diagnosis: schema.patientVisits.diagnosis,\n        prescription: schema.patientVisits.prescription,\n        status: schema.patientVisits.status,\n        consultationFee: schema.patientVisits.consultationFee,\n        createdAt: schema.patientVisits.createdAt,\n        // Patient details\n        patientName: schema.patients.name,\n        patientAge: schema.patients.age,\n        patientGender: schema.patients.gender,\n        patientPhone: schema.patients.phone,\n        patientPatientId: schema.patients.patientId,\n        // Doctor details\n        doctorName: schema.doctors.name,\n        doctorSpecialization: schema.doctors.specialization,\n        doctorConsultationFee: schema.doctors.consultationFee,\n      })\n      .from(schema.patientVisits)\n      .leftJoin(\n        schema.patients,\n        eq(schema.patientVisits.patientId, schema.patients.id),\n      )\n      .leftJoin(\n        schema.doctors,\n        eq(schema.patientVisits.doctorId, schema.doctors.id),\n      )\n      .where(and(...whereConditions))\n      .orderBy(\n        desc(schema.patientVisits.scheduledDate),\n        desc(schema.patientVisits.scheduledTime),\n      )\n      .all();\n\n    // Ensure consultationFee is properly set - use stored fee or fallback to doctor's default\n    return results.map((visit) => ({\n      ...visit,\n      consultationFee:\n        visit.consultationFee || visit.doctorConsultationFee || 0,\n    }));\n  }\n\n  async updateOpdVisitStatus(\n    id: string,\n    status: string,\n  ): Promise<PatientVisit | undefined> {\n    const updated = db\n      .update(schema.patientVisits)\n      .set({\n        status,\n        updatedAt: sql`(datetime('now'))`,\n      })\n      .where(\n        and(\n          eq(schema.patientVisits.id, id),\n          eq(schema.patientVisits.visitType, \"opd\"),\n        ),\n      )\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async createService(\n    service: InsertService,\n    userId?: string,\n  ): Promise<Service> {\n    const created = db\n      .insert(schema.services)\n      .values(service)\n      .returning()\n      .get();\n\n    if (userId) {\n      this.logActivity(\n        userId,\n        \"service_created\",\n        \"Service created\",\n        `${service.name} - ${service.category}`,\n        created.id,\n        \"service\",\n        {\n          serviceName: service.name,\n          category: service.category,\n          price: service.price,\n        },\n      );\n    }\n\n    return created;\n  }\n\n  async getServices(): Promise<Service[]> {\n    return db\n      .select()\n      .from(schema.services)\n      .where(eq(schema.services.isActive, true))\n      .orderBy(schema.services.name)\n      .all();\n  }\n\n  async getServiceById(id: string): Promise<Service | undefined> {\n    return db\n      .select()\n      .from(schema.services)\n      .where(eq(schema.services.id, id))\n      .get();\n  }\n\n  async searchServices(query: string): Promise<Service[]> {\n    return db\n      .select()\n      .from(schema.services)\n      .where(\n        and(\n          eq(schema.services.isActive, true),\n          like(schema.services.name, `%${query}%`),\n        ),\n      )\n      .limit(20)\n      .all();\n  }\n\n  async updateService(\n    id: string,\n    service: InsertService,\n    userId?: string,\n  ): Promise<Service | undefined> {\n    const updated = db\n      .update(schema.services)\n      .set(service)\n      .where(eq(schema.services.id, id))\n      .returning()\n      .get();\n\n    if (userId && updated) {\n      this.logActivity(\n        userId,\n        \"service_updated\",\n        \"Service updated\",\n        `${updated.name} - ${updated.category}`,\n        updated.id,\n        \"service\",\n        { serviceName: updated.name, category: updated.category },\n      );\n    }\n\n    return updated;\n  }\n\n  async deleteService(id: string, userId?: string): Promise<boolean> {\n    const service = db\n      .select()\n      .from(schema.services)\n      .where(eq(schema.services.id, id))\n      .get();\n    const result = db\n      .delete(schema.services)\n      .where(eq(schema.services.id, id))\n      .run();\n\n    if (userId && service && result.changes > 0) {\n      this.logActivity(\n        userId,\n        \"service_deleted\",\n        \"Service deleted\",\n        `${service.name} - ${service.category}`,\n        id,\n        \"service\",\n        { serviceName: service.name, category: service.category },\n      );\n    }\n\n    return result.changes > 0;\n  }\n\n  async createBill(\n    billData: InsertBill,\n    itemsData: InsertBillItem[],\n    userId?: string,\n  ): Promise<Bill> {\n    const billNumber = this.generateBillNumber();\n\n    return db.transaction((tx) => {\n      const created = tx\n        .insert(schema.bills)\n        .values({\n          ...billData,\n          billNumber,\n        })\n        .returning()\n        .get();\n\n      const billItems = itemsData.map((item) => ({\n        ...item,\n        billId: created.id,\n      }));\n\n      tx.insert(schema.billItems).values(billItems);\n\n      // Log activity\n      if (userId) {\n        const patient = tx\n          .select()\n          .from(schema.patients)\n          .where(eq(schema.patients.id, billData.patientId))\n          .get();\n        this.logActivity(\n          userId,\n          \"bill_created\",\n          \"New bill generated\",\n          `${billNumber} for ${patient?.name || \"Unknown Patient\"}`,\n          created.id,\n          \"bill\",\n          { amount: billData.totalAmount, patientName: patient?.name },\n        );\n      }\n\n      return created;\n    });\n  }\n\n  async getBills(): Promise<Bill[]> {\n    return db\n      .select()\n      .from(schema.bills)\n      .orderBy(desc(schema.bills.createdAt))\n      .all();\n  }\n\n  async getBillById(id: string): Promise<Bill | undefined> {\n    return db.select().from(schema.bills).where(eq(schema.bills.id, id)).get();\n  }\n\n  async getBillItems(billId: string): Promise<BillItem[]> {\n    return db\n      .select()\n      .from(schema.billItems)\n      .where(eq(schema.billItems.billId, billId))\n      .all();\n  }\n\n  async getBillsWithPatients(): Promise<any[]> {\n    return db\n      .select({\n        bill: schema.bills,\n        patient: schema.patients,\n      })\n      .from(schema.bills)\n      .leftJoin(schema.patients, eq(schema.bills.patientId, schema.patients.id))\n      .orderBy(desc(schema.bills.createdAt))\n      .all();\n  }\n\n  async getBillsWithFilters(filters: BillFilters): Promise<any[]> {\n    // Build WHERE conditions based on filters\n    const whereConditions: any[] = [];\n\n    if (filters.patientId) {\n      whereConditions.push(eq(schema.bills.patientId, filters.patientId));\n    }\n\n    if (filters.paymentStatus) {\n      whereConditions.push(\n        eq(schema.bills.paymentStatus, filters.paymentStatus),\n      );\n    }\n\n    // Date filtering - use billDate for filtering by date range\n    if (filters.fromDate) {\n      whereConditions.push(\n        sql`DATE(${schema.bills.billDate}) >= DATE(${filters.fromDate})`,\n      );\n    }\n\n    if (filters.toDate) {\n      whereConditions.push(\n        sql`DATE(${schema.bills.billDate}) <= DATE(${filters.toDate})`,\n      );\n    }\n\n    // Build the query with all conditions\n    const query = db\n      .select({\n        id: schema.bills.id,\n        billNumber: schema.bills.billNumber,\n        patientId: schema.bills.patientId,\n        visitId: schema.bills.visitId,\n        subtotal: schema.bills.subtotal,\n        taxAmount: schema.bills.taxAmount,\n        discountAmount: schema.bills.discountAmount,\n        totalAmount: schema.bills.totalAmount,\n        paymentMethod: schema.bills.paymentMethod,\n        paymentStatus: schema.bills.paymentStatus,\n        paidAmount: schema.bills.paidAmount,\n        createdBy: schema.bills.createdBy,\n        billDate: schema.bills.billDate,\n        dueDate: schema.bills.dueDate,\n        notes: schema.bills.notes,\n        createdAt: schema.bills.createdAt,\n        updatedAt: schema.bills.updatedAt,\n        // Include patient data\n        patient: {\n          id: schema.patients.id,\n          name: schema.patients.name,\n          age: schema.patients.age,\n          gender: schema.patients.gender,\n          phone: schema.patients.phone,\n        },\n      })\n      .from(schema.bills)\n      .leftJoin(schema.patients, eq(schema.bills.patientId, schema.patients.id))\n      .where(whereConditions.length > 0 ? and(...whereConditions) : sql`1=1`)\n      .orderBy(desc(schema.bills.billDate), desc(schema.bills.createdAt));\n\n    return query.all();\n  }\n\n  async createPathologyOrder(\n    orderData: InsertPathologyOrder,\n    tests: InsertPathologyTest[],\n    userId?: string,\n  ): Promise<PathologyOrder> {\n    const generatedOrderId = this.generateOrderId();\n    const totalPrice = tests.reduce((total, test) => total + test.price, 0);\n    const orderedDate =\n      orderData.orderedDate || new Date().toISOString().split(\"T\")[0];\n\n    // Generate proper receipt number for pathology\n    const count = await this.getDailyReceiptCount(\"pathology\", orderedDate);\n    const dateObj = new Date(orderedDate);\n    const yymmdd = dateObj\n      .toISOString()\n      .slice(2, 10)\n      .replace(/-/g, \"\")\n      .slice(0, 6);\n    const receiptNumber = `${yymmdd}-PAT-${count.toString().padStart(4, \"0\")}`;\n\n    return db.transaction((tx) => {\n      // Insert the order first\n      const created = tx\n        .insert(schema.pathologyOrders)\n        .values({\n          ...orderData,\n          orderId: generatedOrderId,\n          totalPrice,\n          receiptNumber,\n        })\n        .returning()\n        .get();\n\n      // Insert all tests for this order\n      tests.forEach((test) => {\n        tx.insert(schema.pathologyTests)\n          .values({\n            testName: test.testName,\n            testCategory: test.testCategory,\n            price: test.price,\n            orderId: created.id, // Use the actual database ID, not the generated order ID\n            status: \"ordered\",\n          })\n          .run();\n      });\n\n      // Log activity\n      if (userId) {\n        const patient = tx\n          .select()\n          .from(schema.patients)\n          .where(eq(schema.patients.id, orderData.patientId))\n          .get();\n        this.logActivity(\n          userId,\n          \"lab_test_ordered\",\n          \"Lab test ordered\",\n          `${generatedOrderId} for ${patient?.name || \"Unknown Patient\"}`,\n          created.id,\n          \"pathology_order\",\n          { testCount: tests.length, patientName: patient?.name },\n        );\n      }\n\n      return created;\n    });\n  }\n\n  async getPathologyOrders(fromDate?: string, toDate?: string): Promise<any[]> {\n    try {\n      let query = db\n        .select({\n          order: schema.pathologyOrders,\n          patient: schema.patients,\n          doctor: schema.doctors,\n        })\n        .from(schema.pathologyOrders)\n        .leftJoin(\n          schema.patients,\n          eq(schema.pathologyOrders.patientId, schema.patients.id),\n        )\n        .leftJoin(\n          schema.doctors,\n          eq(schema.pathologyOrders.doctorId, schema.doctors.id),\n        );\n\n      // Apply date filters if provided\n      if (fromDate && toDate) {\n        query = query.where(\n          and(\n            gte(schema.pathologyOrders.orderedDate, fromDate),\n            lte(schema.pathologyOrders.orderedDate, toDate),\n          ),\n        );\n      } else if (fromDate) {\n        query = query.where(gte(schema.pathologyOrders.orderedDate, fromDate));\n      } else if (toDate) {\n        query = query.where(lte(schema.pathologyOrders.orderedDate, toDate));\n      }\n\n      return query.orderBy(desc(schema.pathologyOrders.createdAt)).all();\n    } catch (error) {\n      console.error(\"Error in getPathologyOrders:\", error);\n      throw error;\n    }\n  }\n\n  async getPathologyOrderById(id: string): Promise<any> {\n    const order = db\n      .select()\n      .from(schema.pathologyOrders)\n      .where(eq(schema.pathologyOrders.id, id))\n      .get();\n\n    if (!order) return null;\n\n    const tests = db\n      .select()\n      .from(schema.pathologyTests)\n      .where(eq(schema.pathologyTests.orderId, id))\n      .all();\n\n    // Get patient info\n    const patient = order.patientId\n      ? db\n          .select()\n          .from(schema.patients)\n          .where(eq(schema.patients.id, order.patientId))\n          .get()\n      : null;\n\n    // Get doctor info if applicable\n    const doctor = order.doctorId\n      ? db\n          .select()\n          .from(schema.doctors)\n          .where(eq(schema.doctors.id, order.doctorId))\n          .get()\n      : null;\n\n    return {\n      order: {\n        ...order,\n        tests, // Include tests in the order object for receipt generation\n      },\n      tests,\n      patient,\n      doctor,\n    };\n  }\n\n  async updatePathologyOrderStatus(\n    orderId: string,\n    status: string,\n  ): Promise<PathologyOrder | undefined> {\n    const updated = db\n      .update(schema.pathologyOrders)\n      .set({ status, updatedAt: new Date().toISOString() })\n      .where(eq(schema.pathologyOrders.id, orderId))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async getPathologyOrdersByPatient(patientId: string): Promise<any[]> {\n    const orders = db\n      .select()\n      .from(schema.pathologyOrders)\n      .where(eq(schema.pathologyOrders.patientId, patientId))\n      .orderBy(desc(schema.pathologyOrders.createdAt))\n      .all();\n\n    // For each order, get its associated tests\n    const ordersWithTests = orders.map((order) => {\n      const tests = db\n        .select()\n        .from(schema.pathologyTests)\n        .where(eq(schema.pathologyTests.orderId, order.id))\n        .all();\n\n      return {\n        order,\n        tests,\n      };\n    });\n\n    return ordersWithTests;\n  }\n\n  async updatePathologyTestStatus(\n    testId: string,\n    status: string,\n    results?: string,\n    userId?: string,\n  ): Promise<PathologyTest | undefined> {\n    const updated = db\n      .update(schema.pathologyTests)\n      .set({\n        status,\n        results,\n        updatedAt: new Date().toISOString(),\n      })\n      .where(eq(schema.pathologyTests.id, testId))\n      .returning()\n      .get();\n\n    // Log activity when test is completed\n    if (status === \"completed\" && userId) {\n      const test = db\n        .select()\n        .from(schema.pathologyTests)\n        .where(eq(schema.pathologyTests.id, testId))\n        .get();\n      const order = db\n        .select()\n        .from(schema.pathologyOrders)\n        .where(eq(schema.pathologyOrders.id, test?.orderId || \"\"))\n        .get();\n      const patient = db\n        .select()\n        .from(schema.patients)\n        .where(eq(schema.patients.id, order?.patientId || \"\"))\n        .get();\n\n      this.logActivity(\n        userId,\n        \"lab_test_completed\",\n        \"Lab test completed\",\n        `${test?.testName} for ${patient?.name || \"Unknown Patient\"}`,\n        testId,\n        \"pathology_test\",\n        { testName: test?.testName, patientName: patient?.name },\n      );\n    }\n\n    return updated;\n  }\n\n  // Get doctor earning by patient service ID\n  async getDoctorEarningByPatientServiceId(\n    patientServiceId: string,\n  ): Promise<DoctorEarning | undefined> {\n    return db\n      .select()\n      .from(schema.doctorEarnings)\n      .where(eq(schema.doctorEarnings.patientServiceId, patientServiceId))\n      .get();\n  }\n\n  async createPatientServicesBatch(\n    servicesData: InsertPatientService[],\n    userId?: string,\n  ): Promise<PatientService[]> {\n    try {\n      // Import smart costing here to avoid circular dependencies\n      const { SmartCostingEngine } = await import(\"./smart-costing\");\n\n      // Generate a single order ID for all services in this batch\n      const orderId = this.generateServiceOrderId();\n\n      return db.transaction((tx) => {\n        const createdServices: PatientService[] = [];\n        const earningsToProcess: Array<{\n          patientService: PatientService;\n          service: Service;\n        }> = [];\n\n        for (const serviceData of servicesData) {\n          console.log(\"=== BATCH SERVICE CREATION DEBUG ===\");\n          console.log(\"Service Name:\", serviceData.serviceName);\n          console.log(\"Doctor ID from request:\", serviceData.doctorId);\n          console.log(\"Doctor ID type:\", typeof serviceData.doctorId);\n          console.log(\"Service Type:\", serviceData.serviceType);\n\n          // Ensure doctor ID is properly preserved for all service types\n          const finalServiceData = {\n            ...serviceData,\n            orderId: orderId,\n            // Always preserve the doctor ID exactly as sent from frontend\n            doctorId: serviceData.doctorId,\n          };\n\n          console.log(\"Final service data before DB insert:\", {\n            doctorId: finalServiceData.doctorId,\n            doctorIdType: typeof finalServiceData.doctorId,\n            serviceName: finalServiceData.serviceName,\n            serviceType: finalServiceData.serviceType,\n          });\n\n          const created = tx\n            .insert(schema.patientServices)\n            .values(finalServiceData)\n            .returning()\n            .get();\n\n          console.log(\"Created service in DB:\", {\n            id: created.id,\n            doctorId: created.doctorId,\n            doctorIdType: typeof created.doctorId,\n            serviceName: created.serviceName,\n            serviceType: created.serviceType,\n          });\n\n          createdServices.push(created);\n\n          // Log activity for OPD appointments\n          if (userId && serviceData.serviceType === \"opd\") {\n            const patient = tx\n              .select()\n              .from(schema.patients)\n              .where(eq(schema.patients.id, serviceData.patientId))\n              .get();\n            this.logActivity(\n              userId,\n              \"opd_scheduled\",\n              \"OPD appointment scheduled\",\n              `${serviceData.serviceName} for ${patient?.name || \"Unknown Patient\"}`,\n              created.id,\n              \"patient_service\",\n              {\n                serviceName: serviceData.serviceName,\n                patientName: patient?.name,\n                scheduledDate: serviceData.scheduledDate,\n              },\n            );\n          }\n\n          // Calculate doctor earnings if doctor is assigned and service exists\n          if (serviceData.doctorId && serviceData.serviceId) {\n            // Get service details for earnings calculation\n            let serviceForEarnings = tx\n              .select()\n              .from(schema.services)\n              .where(eq(schema.services.id, serviceData.serviceId))\n              .get();\n\n            // If service not found by ID, try fallback match by name and category\n            if (\n              !serviceForEarnings &&\n              serviceData.serviceName &&\n              serviceData.serviceType\n            ) {\n              console.log(\n                `Batch: Service not found by ID ${serviceData.serviceId}, trying fallback by name: ${serviceData.serviceName}, type: ${serviceData.serviceType}`,\n              );\n              serviceForEarnings = tx\n                .select()\n                .from(schema.services)\n                .where(\n                  and(\n                    eq(schema.services.name, serviceData.serviceName),\n                    eq(schema.services.category, serviceData.serviceType),\n                  ),\n                )\n                .get();\n\n              if (serviceForEarnings) {\n                console.log(\n                  `✓ Batch fallback service match found: ${serviceForEarnings.id} - ${serviceForEarnings.name}`,\n                );\n              } else {\n                console.log(\n                  `Batch: No service match found for name: ${serviceData.serviceName}, type: ${serviceData.serviceType}`,\n                );\n              }\n            }\n\n            console.log(\n              `Batch patient service created with doctor ${serviceData.doctorId}, service exists: ${!!serviceForEarnings}`,\n            );\n            if (serviceForEarnings) {\n              console.log(\n                `Queueing earnings calculation for doctor ${serviceData.doctorId} and service ${serviceForEarnings.id}`,\n              );\n              // Queue for processing after transaction\n              earningsToProcess.push({\n                patientService: created,\n                service: serviceForEarnings,\n              });\n            } else {\n              console.log(\n                `⚠️ No service found for serviceId: ${serviceData.serviceId} in batch, cannot calculate earnings`,\n              );\n            }\n          }\n        }\n\n        // Process earnings calculations after transaction completes\n        setImmediate(async () => {\n          for (const { patientService, service } of earningsToProcess) {\n            try {\n              console.log(\n                `Processing queued earnings calculation for service ${patientService.id}`,\n              );\n              await this.calculateDoctorEarning(patientService, service);\n            } catch (error) {\n              console.error(\n                `❌ Error calculating earnings for service ${patientService.id}:`,\n                error,\n              );\n            }\n          }\n        });\n\n        return createdServices;\n      });\n    } catch (error) {\n      console.error(\"Error creating patient services batch:\", error);\n      throw error;\n    }\n  }\n\n  async createPatientService(\n    serviceData: InsertPatientService,\n    userId?: string,\n  ): Promise<PatientService> {\n    try {\n      // Import smart costing here to avoid circular dependencies\n      const { SmartCostingEngine } = await import(\"./smart-costing\");\n\n      // Get service details for billing calculation\n      let service = null;\n      let calculatedAmount = serviceData.price || 0;\n      let billingType = serviceData.billingType || \"per_instance\";\n      let billingQuantity = serviceData.billingQuantity || 1;\n\n      if (\n        serviceData.serviceId &&\n        serviceData.serviceId !== `SRV-${Date.now()}`\n      ) {\n        service = db\n          .select()\n          .from(schema.services)\n          .where(eq(schema.services.id, serviceData.serviceId))\n          .get();\n\n        // If service not found by ID, try fallback match by name and category\n        if (!service && serviceData.serviceName && serviceData.serviceType) {\n          console.log(\n            `Service not found by ID ${serviceData.serviceId}, trying fallback by name: ${serviceData.serviceName}, type: ${serviceData.serviceType}`,\n          );\n          service = db\n            .select()\n            .from(schema.services)\n            .where(\n              and(\n                eq(schema.services.name, serviceData.serviceName),\n                eq(schema.services.category, serviceData.serviceType),\n              ),\n            )\n            .get();\n\n          if (service) {\n            console.log(\n              `✓ Fallback service match found: ${service.id} - ${service.name}`,\n            );\n          } else {\n            console.log(\n              `No service match found for name: ${serviceData.serviceName}, type: ${serviceData.serviceType}`,\n            );\n          }\n        }\n\n        if (service) {\n          // Calculate billing using smart costing\n          const customParams = serviceData.billingParameters\n            ? JSON.parse(serviceData.billingParameters)\n            : {};\n\n          const billingResult = SmartCostingEngine.calculateBilling({\n            service: {\n              id: service.id,\n              name: service.name,\n              price: service.price,\n              billingType: service.billingType as any,\n              billingParameters: service.billingParameters || undefined,\n            },\n            quantity: serviceData.billingQuantity || 1,\n            customParameters: customParams,\n          });\n\n          calculatedAmount = billingResult.totalAmount;\n          billingType = service.billingType || \"per_instance\";\n          billingQuantity = billingResult.billingQuantity;\n        }\n      }\n\n      const created = db\n        .insert(schema.patientServices)\n        .values({\n          ...serviceData,\n          serviceId: serviceData.serviceId || `SRV-${Date.now()}`,\n          receiptNumber: serviceData.receiptNumber || null,\n          orderId: serviceData.orderId || null,\n          billingType,\n          billingQuantity,\n          calculatedAmount,\n          // Preserve doctorId exactly as received\n          doctorId: serviceData.doctorId,\n        })\n        .returning()\n        .get();\n\n      // Log activity for OPD appointments\n      if (userId && serviceData.serviceType === \"opd\") {\n        const patient = db\n          .select()\n          .from(schema.patients)\n          .where(eq(schema.patients.id, serviceData.patientId))\n          .get();\n        this.logActivity(\n          userId,\n          \"opd_scheduled\",\n          \"OPD appointment scheduled\",\n          `${serviceData.serviceName} for ${patient?.name || \"Unknown Patient\"}`,\n          created.id,\n          \"patient_service\",\n          {\n            serviceName: serviceData.serviceName,\n            patientName: patient?.name,\n            scheduledDate: serviceData.scheduledDate,\n          },\n        );\n      }\n\n      // Calculate doctor earnings if doctor is assigned and service has rates\n      if (serviceData.doctorId) {\n        console.log(\n          `Patient service created with doctor ${serviceData.doctorId}, service exists: ${!!service}`,\n        );\n        if (service) {\n          console.log(\n            `Triggering earnings calculation for doctor ${serviceData.doctorId} and service ${service.id}`,\n          );\n          // Calculate earnings asynchronously to avoid blocking\n          setImmediate(async () => {\n            try {\n              await this.calculateDoctorEarning(created, service);\n            } catch (error) {\n              console.error(\n                `Error in async earnings calculation for doctor ${serviceData.doctorId}:`,\n                error,\n              );\n            }\n          });\n        } else {\n          console.log(\n            `No service found for serviceId: ${serviceData.serviceId}, cannot calculate earnings`,\n          );\n        }\n      }\n\n      return created;\n    } catch (error) {\n      console.error(\"Error creating patient service:\", error);\n      throw error;\n    }\n  }\n\n  async getPatientServices(patientId?: string): Promise<PatientService[]> {\n    if (patientId) {\n      // Use Drizzle ORM to join with doctors table\n      const results = db\n        .select({\n          // Select all fields from patient_services\n          ...schema.patientServices,\n          // Select doctor name if available\n          doctorName: schema.doctors.name,\n          doctorSpecialization: schema.doctors.specialization,\n        })\n        .from(schema.patientServices)\n        .leftJoin(\n          schema.doctors,\n          eq(schema.patientServices.doctorId, schema.doctors.id),\n        )\n        .where(\n          and(\n            eq(schema.patientServices.patientId, patientId),\n            isNotNull(schema.patientServices.doctorId), // Only include services with a doctor assigned\n          ),\n        )\n        .orderBy(\n          desc(schema.patientServices.scheduledDate),\n          desc(schema.patientServices.createdAt),\n        )\n        .all();\n\n      console.log(\n        \"Retrieved services with doctor info:\",\n        results.map((s) => ({\n          id: s.id,\n          serviceName: s.serviceName,\n          doctorId: s.doctorId,\n          doctorName: s.doctorName,\n          serviceType: s.serviceType,\n        })),\n      );\n\n      // Manually cast the results to PatientService type, including doctorName and doctorSpecialization\n      // This is a bit of a workaround because Drizzle's type inference might not perfectly handle the selected fields from the join.\n      return results as unknown as PatientService[];\n    } else {\n      // If no patientId is provided, fetch all active services without doctor join\n      return db\n        .select()\n        .from(schema.patientServices)\n        .orderBy(desc(schema.patientServices.createdAt))\n        .all();\n    }\n  }\n\n  async getPatientServicesWithFilters(\n    filters: PatientServiceFilters,\n  ): Promise<PatientService[]> {\n    try {\n      console.log(\n        \"Storage: getPatientServicesWithFilters called with filters:\",\n        filters,\n      );\n\n      // Build WHERE conditions based on filters\n      const whereConditions: any[] = [];\n\n      if (filters.patientId) {\n        whereConditions.push(\n          eq(schema.patientServices.patientId, filters.patientId),\n        );\n      }\n\n      if (filters.serviceType) {\n        whereConditions.push(\n          eq(schema.patientServices.serviceType, filters.serviceType),\n        );\n      }\n\n      if (filters.serviceTypes && filters.serviceTypes.length > 0) {\n        whereConditions.push(\n          inArray(schema.patientServices.serviceType, filters.serviceTypes),\n        );\n      }\n\n      if (filters.fromDate) {\n        whereConditions.push(\n          gte(schema.patientServices.scheduledDate, filters.fromDate),\n        );\n      }\n\n      if (filters.toDate) {\n        whereConditions.push(\n          lte(schema.patientServices.scheduledDate, filters.toDate),\n        );\n      }\n\n      if (filters.doctorId) {\n        whereConditions.push(\n          eq(schema.patientServices.doctorId, filters.doctorId),\n        );\n      }\n\n      if (filters.serviceName) {\n        whereConditions.push(\n          eq(schema.patientServices.serviceName, filters.serviceName),\n        );\n      }\n\n      if (filters.status) {\n        whereConditions.push(eq(schema.patientServices.status, filters.status));\n      }\n\n      console.log(\"Storage: Built where conditions:\", whereConditions.length);\n\n      // Execute query with joins to get patient and doctor details\n      const result = db\n        .select({\n          // Patient service fields\n          id: schema.patientServices.id,\n          serviceId: schema.patientServices.serviceId,\n          patientId: schema.patientServices.patientId,\n          visitId: schema.patientServices.visitId,\n          doctorId: schema.patientServices.doctorId,\n          serviceType: schema.patientServices.serviceType,\n          serviceName: schema.patientServices.serviceName,\n          orderId: schema.patientServices.orderId,\n          status: schema.patientServices.status,\n          scheduledDate: schema.patientServices.scheduledDate,\n          scheduledTime: schema.patientServices.scheduledTime,\n          completedDate: schema.patientServices.completedDate,\n          notes: schema.patientServices.notes,\n          price: schema.patientServices.price,\n          billingType: schema.patientServices.billingType,\n          billingQuantity: schema.patientServices.billingQuantity,\n          billingParameters: schema.patientServices.billingParameters,\n          calculatedAmount: schema.patientServices.calculatedAmount,\n          receiptNumber: schema.patientServices.receiptNumber,\n          createdAt: schema.patientServices.createdAt,\n          updatedAt: schema.patientServices.updatedAt,\n          // Patient details\n          patientName: schema.patients.name,\n          patientPhone: schema.patients.phone,\n          patientAge: schema.patients.age,\n          patientGender: schema.patients.gender,\n          // Doctor details - properly join and return doctor name\n          doctorName: schema.doctors.name,\n          doctorSpecialization: schema.doctors.specialization,\n        })\n        .from(schema.patientServices)\n        .innerJoin(\n          schema.patients,\n          eq(schema.patientServices.patientId, schema.patients.id),\n        )\n        .leftJoin(\n          schema.doctors,\n          eq(schema.patientServices.doctorId, schema.doctors.id),\n        )\n        .where(whereConditions.length > 0 ? and(...whereConditions) : sql`1=1`)\n        .orderBy(\n          desc(schema.patientServices.scheduledDate),\n          desc(schema.patientServices.createdAt),\n        )\n        .all();\n\n      // Log a sample of results to debug doctor name resolution\n      const sampleResults = result.slice(0, 3).map((service) => ({\n        serviceName: service.serviceName,\n        doctorId: service.doctorId,\n        doctorName: service.doctorName,\n        serviceType: service.serviceType,\n      }));\n      console.log(\"Sample patient services with doctor info:\", sampleResults);\n\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching patient services with filters:\", error);\n      throw error;\n    }\n  }\n\n  async getPatientServiceById(id: string): Promise<PatientService | undefined> {\n    return db\n      .select()\n      .from(schema.patientServices)\n      .where(eq(schema.patientServices.id, id))\n      .get();\n  }\n\n  async updatePatientService(\n    id: string,\n    service: Partial<InsertPatientService>,\n  ): Promise<PatientService | undefined> {\n    const updated = db\n      .update(schema.patientServices)\n      .set({ ...service, updatedAt: new Date().toISOString() })\n      .where(eq(schema.patientServices.id, id))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async createAdmission(admission: InsertAdmission): Promise<Admission> {\n    const admissionId = this.generateAdmissionId();\n    // Use the provided admission date, or current system time if not provided\n    const now = new Date();\n    let admissionDate: string;\n    let eventDate: string;\n\n    if (admission.admissionDate) {\n      // Use the provided admission date\n      admissionDate = admission.admissionDate;\n      // Extract just the date part for receipt generation\n      if (admission.admissionDate.includes(\"T\")) {\n        // datetime-local format: \"YYYY-MM-DDTHH:MM\"\n        eventDate = admission.admissionDate.split(\"T\")[0];\n      } else {\n        eventDate = admission.admissionDate;\n      }\n    } else {\n      // Fallback to current system datetime\n      admissionDate = now.toISOString();\n      eventDate =\n        now.getFullYear() +\n        \"-\" +\n        String(now.getMonth() + 1).padStart(2, \"0\") +\n        \"-\" +\n        String(now.getDate()).padStart(2, \"0\");\n    }\n\n    return db.transaction((tx) => {\n      // CRITICAL VALIDATION: Check if room is already occupied\n      if (admission.currentRoomNumber && admission.currentWardType) {\n        const existingAdmission = tx\n          .select()\n          .from(schema.admissions)\n          .where(\n            and(\n              eq(\n                schema.admissions.currentRoomNumber,\n                admission.currentRoomNumber,\n              ),\n              eq(schema.admissions.currentWardType, admission.currentWardType),\n              eq(schema.admissions.status, \"admitted\"),\n            ),\n          )\n          .get();\n\n        if (existingAdmission) {\n          throw new Error(\n            `Room ${admission.currentRoomNumber} in ${admission.currentWardType} is already occupied by another patient. Please select a different room.`,\n          );\n        }\n      }\n\n      // Generate receipt number for admission\n      const admissionCount = this.getDailyReceiptCountSync(\n        \"admission\",\n        eventDate,\n      );\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj\n        .toISOString()\n        .slice(2, 10)\n        .replace(/-/g, \"\")\n        .slice(0, 6);\n      const receiptNumber = `${yymmdd}-ADM-${admissionCount.toString().padStart(4, \"0\")}`;\n\n      // Create the admission episode\n      const created = tx\n        .insert(schema.admissions)\n        .values({\n          ...admission,\n          admissionId,\n          admissionDate,\n          // Map the wardType to current fields\n          currentWardType: admission.currentWardType,\n          currentRoomNumber: admission.currentRoomNumber,\n        })\n        .returning()\n        .get();\n\n      // Create the initial admission event with receipt number\n      tx.insert(schema.admissionEvents)\n        .values({\n          admissionId: created.id,\n          eventType: \"admit\",\n          eventTime: now.toISOString(),\n          roomNumber: admission.currentRoomNumber,\n          wardType: admission.currentWardType,\n          notes: `Patient admitted to ${admission.currentWardType} - Room ${admission.currentRoomNumber}`,\n          receiptNumber: receiptNumber,\n        })\n        .run();\n\n      // Increment occupied beds for the room type\n      if (admission.currentWardType) {\n        const roomType = tx\n          .select()\n          .from(schema.roomTypes)\n          .where(eq(schema.roomTypes.name, admission.currentWardType))\n          .get();\n\n        if (roomType) {\n          tx.update(schema.roomTypes)\n            .set({\n              occupiedBeds: (roomType.occupiedBeds || 0) + 1,\n              updatedAt: new Date().toISOString(),\n            })\n            .where(eq(schema.roomTypes.id, roomType.id))\n            .run();\n        }\n      }\n\n      return created;\n    });\n  }\n\n  async getAdmissions(\n    patientId?: string,\n    fromDate?: string,\n    toDate?: string,\n  ): Promise<any[]> {\n    try {\n      let conditions: any[] = [];\n\n      if (patientId) {\n        conditions.push(eq(schema.admissions.patientId, patientId));\n      }\n\n      if (fromDate) {\n        conditions.push(gte(schema.admissions.admissionDate, fromDate));\n      }\n\n      if (toDate) {\n        conditions.push(lte(schema.admissions.admissionDate, toDate));\n      }\n\n      let query = db\n        .select({\n          admission: schema.admissions,\n          patient: schema.patients,\n          doctor: schema.doctors,\n        })\n        .from(schema.admissions)\n        .leftJoin(\n          schema.patients,\n          eq(schema.admissions.patientId, schema.patients.id),\n        )\n        .leftJoin(\n          schema.doctors,\n          eq(schema.admissions.doctorId, schema.doctors.id),\n        );\n\n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n\n      const results = query\n        .orderBy(desc(schema.admissions.admissionDate))\n        .all();\n\n      return results.map((row) => ({\n        ...row.admission,\n        patient: row.patient,\n        doctor: row.doctor,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching admissions:\", error);\n      throw error;\n    }\n  }\n\n  async getAdmissionById(id: string): Promise<Admission | undefined> {\n    return db\n      .select()\n      .from(schema.admissions)\n      .where(eq(schema.admissions.id, id))\n      .get();\n  }\n\n  async updateAdmission(\n    id: string,\n    admission: Partial<InsertAdmission>,\n  ): Promise<Admission | undefined> {\n    // Get the current admission to check for status changes\n    const currentAdmission = db\n      .select()\n      .from(schema.admissions)\n      .where(eq(schema.admissions.id, id))\n      .get();\n\n    const updated = db\n      .update(schema.admissions)\n      .set({ ...admission, updatedAt: new Date().toISOString() })\n      .where(eq(schema.admissions.id, id))\n      .returning()\n      .get();\n\n    // Handle bed count changes when status changes\n    if (\n      currentAdmission &&\n      admission.status === \"discharged\" &&\n      currentAdmission.status === \"admitted\"\n    ) {\n      // Patient is being discharged - decrement occupied beds\n      if (currentAdmission.currentWardType) {\n        const roomType = db\n          .select()\n          .from(schema.roomTypes)\n          .where(eq(schema.roomTypes.name, currentAdmission.currentWardType))\n          .get();\n\n        if (roomType && roomType.occupiedBeds > 0) {\n          db.update(schema.roomTypes)\n            .set({\n              occupiedBeds: roomType.occupiedBeds - 1,\n              updatedAt: new Date().toISOString(),\n            })\n            .where(eq(schema.roomTypes.id, roomType.id))\n            .run();\n        }\n      }\n    }\n\n    // Update last_payment_date if a payment is made\n    if (admission.status === \"paid\" && updated) {\n      updated.lastPaymentDate = new Date().toISOString();\n      await db\n        .update(schema.admissions)\n        .set({ lastPaymentDate: updated.lastPaymentDate })\n        .where(eq(schema.admissions.id, id))\n        .run();\n    }\n\n    return updated;\n  }\n\n  // Patient Payment Methods\n  async createPatientPayment(\n    paymentData: InsertPatientPayment,\n    userId: string,\n  ): Promise<PatientPayment> {\n    const paymentId = this.generatePaymentId();\n\n    const created = db\n      .insert(schema.patientPayments)\n      .values({\n        ...paymentData,\n        paymentId,\n        processedBy: userId,\n      })\n      .returning()\n      .get();\n\n    // Log activity\n    const patient = db\n      .select()\n      .from(schema.patients)\n      .where(eq(schema.patients.id, paymentData.patientId))\n      .get();\n    this.logActivity(\n      userId,\n      \"payment_added\",\n      \"Payment Accepted\",\n      `₹${paymentData.amount} payment for ${patient?.name || \"Unknown Patient\"}`,\n      created.id,\n      \"patient_payment\",\n      {\n        amount: paymentData.amount,\n        paymentMethod: paymentData.paymentMethod,\n        patientName: patient?.name,\n      },\n    );\n\n    return created;\n  }\n\n  async getPatientPayments(patientId: string): Promise<PatientPayment[]> {\n    return db\n      .select()\n      .from(schema.patientPayments)\n      .where(eq(schema.patientPayments.patientId, patientId))\n      .orderBy(desc(schema.patientPayments.paymentDate))\n      .all();\n  }\n\n  async getPatientPaymentById(id: string): Promise<PatientPayment | undefined> {\n    return db\n      .select()\n      .from(schema.patientPayments)\n      .where(eq(schema.patientPayments.id, id))\n      .get();\n  }\n\n  // Patient Discount Methods\n  async createPatientDiscount(\n    discountData: InsertPatientDiscount,\n    userId: string,\n  ): Promise<PatientDiscount> {\n    const discountId = this.generateDiscountId();\n\n    const created = db\n      .insert(schema.patientDiscounts)\n      .values({\n        ...discountData,\n        discountId,\n        approvedBy: userId,\n      })\n      .returning()\n      .get();\n\n    // Log activity\n    const patient = db\n      .select()\n      .from(schema.patients)\n      .where(eq(schema.patients.id, discountData.patientId))\n      .get();\n    this.logActivity(\n      userId,\n      \"discount_added\",\n      \"Discount added\",\n      `₹${discountData.amount} discount for ${patient?.name || \"Unknown Patient\"}`,\n      created.id,\n      \"patient_discount\",\n      {\n        amount: discountData.amount,\n        discountType: discountData.discountType,\n        reason: discountData,\n        patientName: patient?.name,\n      },\n    );\n\n    return created;\n  }\n\n  async getPatientDiscounts(patientId: string): Promise<PatientDiscount[]> {\n    return db\n      .select()\n      .from(schema.patientDiscounts)\n      .where(eq(schema.patientDiscounts.patientId, patientId))\n      .orderBy(desc(schema.patientDiscounts.discountDate))\n      .all();\n  }\n\n  async getPatientDiscountById(\n    id: string,\n  ): Promise<PatientDiscount | undefined> {\n    return db\n      .select()\n      .from(schema.patientDiscounts)\n      .where(eq(schema.patientDiscounts.id, id))\n      .get();\n  }\n\n  // Calculate patient financial summary\n  async getPatientFinancialSummary(patientId: string): Promise<{\n    totalCharges: number;\n    totalPaid: number;\n    totalDiscounts: number;\n    balance: number;\n  }> {\n    try {\n      console.log(`Generating financial summary for patient: ${patientId}`);\n\n      // Calculate total charges from different sources\n      let totalCharges = 0;\n      let totalPaid = 0;\n      let totalDiscounts = 0;\n\n      // 1. OPD Consultation charges from patient_visits table\n      const opdVisits = db\n        .select({\n          consultationFee: schema.patientVisits.consultationFee,\n        })\n        .from(schema.patientVisits)\n        .where(\n          and(\n            eq(schema.patientVisits.patientId, patientId),\n            eq(schema.patientVisits.visitType, \"opd\"),\n          ),\n        )\n        .all();\n\n      opdVisits.forEach((visit) => {\n        const fee = visit.consultationFee || 0;\n        totalCharges += fee;\n      });\n\n      // 2. OPD Services charges from patient_services table\n      const opdServices = db\n        .select({\n          amount: schema.patientServices.calculatedAmount,\n          price: schema.patientServices.price,\n        })\n        .from(schema.patientServices)\n        .where(\n          and(\n            eq(schema.patientServices.patientId, patientId),\n            eq(schema.patientServices.serviceType, \"opd\"),\n          ),\n        )\n        .all();\n\n      opdServices.forEach((service) => {\n        const charge = service.amount || service.price || 0;\n        totalCharges += charge;\n      });\n\n      // 3. Pathology orders charges\n      const pathologyOrders = db\n        .select({\n          totalPrice: schema.pathologyOrders.totalPrice,\n        })\n        .from(schema.pathologyOrders)\n        .where(eq(schema.pathologyOrders.patientId, patientId))\n        .all();\n\n      pathologyOrders.forEach((order) => {\n        totalCharges += order.totalPrice || 0;\n      });\n\n      // 4. Other patient services charges (with daily calculation for admission services)\n      const otherServices = db\n        .select({\n          id: schema.patientServices.id,\n          serviceType: schema.patientServices.serviceType,\n          serviceName: schema.patientServices.serviceName,\n          amount: schema.patientServices.calculatedAmount,\n          price: schema.patientServices.price,\n          scheduledDate: schema.patientServices.scheduledDate,\n          createdAt: schema.patientServices.createdAt,\n        })\n        .from(schema.patientServices)\n        .where(\n          and(\n            eq(schema.patientServices.patientId, patientId),\n            ne(schema.patientServices.serviceType, \"opd\"),\n          ),\n        )\n        .all();\n\n      otherServices.forEach((service) => {\n        let charge = service.amount || service.price || 0;\n\n        // For admission services, calculate based on stay duration\n        if (service.serviceType === \"admission\") {\n          // Get admissions for this patient\n          const patientAdmissions = db\n            .select()\n            .from(schema.admissions)\n            .where(eq(schema.admissions.patientId, patientId))\n            .all();\n\n          if (patientAdmissions.length > 0) {\n            // Find relevant admission\n            let relevantAdmission = patientAdmissions[0];\n\n            const matchingAdmission = patientAdmissions.find((admission) => {\n              const admissionDate = new Date(\n                admission.admissionDate,\n              ).toDateString();\n              const serviceDate = new Date(\n                service.scheduledDate || service.createdAt,\n              ).toDateString();\n              return admissionDate === serviceDate;\n            });\n\n            if (matchingAdmission) {\n              relevantAdmission = matchingAdmission;\n            }\n\n            // Use the calculateStayDays function that was imported at the top\n            const endDate =\n              relevantAdmission.dischargeDate || new Date().toISOString();\n            const stayDuration = calculateStayDays(\n              relevantAdmission.admissionDate,\n              endDate,\n            );\n\n            if (stayDuration > 0) {\n              if (service.serviceName.toLowerCase().includes(\"bed charges\")) {\n                // Bed charges: charge for each completed 24-hour period\n                charge = (service.price || 0) * stayDuration;\n              } else if (\n                service.serviceName.toLowerCase().includes(\"doctor charges\") ||\n                service.serviceName.toLowerCase().includes(\"nursing charges\") ||\n                service.serviceName.toLowerCase().includes(\"rmo charges\")\n              ) {\n                // Other admission services: charge for each calendar day\n                charge = (service.price || 0) * stayDuration;\n              }\n            }\n          }\n        }\n\n        totalCharges += charge;\n      });\n\n      // 5. Get all payments for this patient\n      const payments = db\n        .select({\n          amount: schema.patientPayments.amount,\n        })\n        .from(schema.patientPayments)\n        .where(eq(schema.patientPayments.patientId, patientId))\n        .all();\n\n      payments.forEach((payment) => {\n        totalPaid += payment.amount || 0;\n      });\n\n      // 6. Include initial deposits and additional payments from admissions\n      const admissionDepositsAndPayments = db\n        .select({\n          initialDeposit: schema.admissions.initialDeposit,\n          additionalPayments: schema.admissions.additionalPayments,\n        })\n        .from(schema.admissions)\n        .where(eq(schema.admissions.patientId, patientId))\n        .all();\n\n      admissionDepositsAndPayments.forEach((admission) => {\n        totalPaid += admission.initialDeposit || 0;\n        totalPaid += admission.additionalPayments || 0;\n      });\n\n      // 7. Get all discounts for this patient\n      const discounts = db\n        .select({\n          amount: schema.patientDiscounts.amount,\n        })\n        .from(schema.patientDiscounts)\n        .where(eq(schema.patientDiscounts.patientId, patientId))\n        .all();\n\n      discounts.forEach((discount) => {\n        totalDiscounts += discount.amount || 0;\n      });\n\n      const balance = totalCharges - totalPaid - totalDiscounts;\n\n      console.log(\n        `Financial summary - Total charges: ${totalCharges}, Total paid: ${totalPaid}, Total discounts: ${totalDiscounts}, Balance: ${balance}`,\n      );\n\n      return {\n        totalCharges,\n        totalPaid,\n        totalDiscounts,\n        balance,\n      };\n    } catch (error) {\n      console.error(\"Error generating financial summary:\", error);\n      return {\n        totalCharges: 0,\n        totalPaid: 0,\n        totalDiscounts: 0,\n        balance: 0,\n      };\n    }\n  }\n\n  async logAction(log: InsertAuditLog): Promise<void> {\n    db.insert(schema.auditLog).values(log);\n  }\n\n  async getDashboardStats(): Promise<any> {\n    try {\n      // Use Indian timezone (UTC+5:30) for consistent date calculation\n      const now = new Date();\n      const indianTime = new Date(now.getTime() + 5.5 * 60 * 60 * 1000);\n      const today =\n        indianTime.getFullYear() +\n        \"-\" +\n        String(indianTime.getMonth() + 1).padStart(2, \"0\") +\n        \"-\" +\n        String(indianTime.getDate()).padStart(2, \"0\");\n\n      console.log(`Dashboard stats - Using today date: ${today}`);\n\n      // Get today's OPD visits - those scheduled for today from patient_visits table\n      const todayOpdVisits = db\n        .select()\n        .from(schema.patientVisits)\n        .where(\n          and(\n            eq(schema.patientVisits.visitType, \"opd\"),\n            eq(schema.patientVisits.scheduledDate, today),\n          ),\n        )\n        .all();\n\n      console.log(`Today OPD visits count: ${todayOpdVisits.length}`);\n      if (todayOpdVisits.length > 0) {\n        console.log(\n          `Sample OPD visits:`,\n          todayOpdVisits.slice(0, 3).map((v) => ({\n            id: v.id,\n            scheduledDate: v.scheduledDate,\n            visitType: v.visitType,\n            patientId: v.patientId,\n            doctorId: v.doctorId,\n          })),\n        );\n      }\n\n      const opdPatients = todayOpdVisits.length;\n      console.log(`Dashboard OPD count for today: ${opdPatients}`);\n\n      // Get inpatients count (currently admitted)\n      const inpatients = db\n        .select()\n        .from(schema.admissions)\n        .where(eq(schema.admissions.status, \"admitted\"))\n        .all().length;\n\n      // Get lab tests count for today\n      const labTests = db\n        .select()\n        .from(schema.pathologyOrders)\n        .where(eq(schema.pathologyOrders.orderedDate, today))\n        .all().length;\n\n      // Get diagnostics count (diagnostic services scheduled today)\n      const diagnosticServices = db\n        .select()\n        .from(schema.patientServices)\n        .where(\n          and(\n            eq(schema.patientServices.scheduledDate, today),\n            sql`(\n              ${schema.patientServices.serviceType} = 'xray' OR\n              ${schema.patientServices.serviceType} = 'ecg' OR\n              ${schema.patientServices.serviceType} = 'ultrasound' OR\n              ${schema.patientServices.serviceType} = 'diagnostic' OR\n              LOWER(${schema.patientServices.serviceName}) LIKE '%ecg%' OR\n              LOWER(${schema.patientServices.serviceName}) LIKE '%usg%' OR\n              LOWER(${schema.patientServices.serviceName}) LIKE '%x-ray%' OR\n              LOWER(${schema.patientServices.serviceName}) LIKE '%xray%' OR\n              LOWER(${schema.patientServices.serviceName}) LIKE '%ultrasound%' OR\n              LOWER(${schema.patientServices.serviceName}) LIKE '%endoscopy%'\n            )`,\n          ),\n        )\n        .all();\n      const diagnostics = diagnosticServices.length;\n\n      return {\n        opdPatients,\n        inpatients,\n        labTests,\n        diagnostics,\n      };\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      return {\n        opdPatients: 0,\n        inpatients: 0,\n        labTests: 0,\n        diagnostics: 0,\n      };\n    }\n  }\n\n  // Room Type Management\n  async getAllRoomTypes(): Promise<any[]> {\n    return db\n      .select()\n      .from(schema.roomTypes)\n      .orderBy(schema.roomTypes.name)\n      .all();\n  }\n\n  async createRoomType(data: any): Promise<any> {\n    return db.insert(schema.roomTypes).values(data).returning().get();\n  }\n\n  async updateRoomType(id: string, data: any): Promise<any> {\n    return db\n      .update(schema.roomTypes)\n      .set({ ...data, updatedAt: new Date().toISOString() })\n      .where(eq(schema.roomTypes.id, id))\n      .returning()\n      .get();\n  }\n\n  async deleteRoomType(id: string): Promise<void> {\n    await db.delete(schema.roomTypes).where(eq(schema.roomTypes.id, id)).run();\n  }\n\n  // Room Management\n  async getAllRooms(): Promise<any[]> {\n    return db\n      .select()\n      .from(schema.rooms)\n      .orderBy(schema.rooms.roomNumber)\n      .all();\n  }\n\n  async createRoom(data: any): Promise<any> {\n    return db.insert(schema.rooms).values(data).returning().get();\n  }\n\n  async updateRoom(id: string, data: any): Promise<any> {\n    return db\n      .update(schema.rooms)\n      .set({ ...data, updatedAt: new Date().toISOString() })\n      .where(eq(schema.rooms.id, id))\n      .returning()\n      .get();\n  }\n\n  async deleteRoom(id: string): Promise<void> {\n    await db.delete(schema.rooms).where(eq(schema.rooms.id, id)).run();\n  }\n\n  async getRoomsByType(roomTypeId: string): Promise<any[]> {\n    return db\n      .select()\n      .from(schema.rooms)\n      .where(eq(schema.rooms.roomTypeId, roomTypeId))\n      .all();\n  }\n\n  async updateRoomOccupancy(roomId: string, isOccupied: boolean): Promise<any> {\n    return db\n      .update(schema.rooms)\n      .set({ isOccupied, updatedAt: new Date().toISOString() })\n      .where(eq(schema.rooms.id, roomId))\n      .returning()\n      .get();\n  }\n\n  // Admission Events\n  async createAdmissionEvent(\n    event: InsertAdmissionEvent,\n  ): Promise<AdmissionEvent> {\n    const created = db\n      .insert(schema.admissionEvents)\n      .values(event)\n      .returning()\n      .get();\n    return created;\n  }\n\n  async getAdmissionEvents(admissionId: string): Promise<AdmissionEvent[]> {\n    return db\n      .select()\n      .from(schema.admissionEvents)\n      .where(eq(schema.admissionEvents.admissionId, admissionId))\n      .orderBy(schema.admissionEvents.eventTime)\n      .all();\n  }\n\n  async transferRoom(\n    admissionId: string,\n    roomData: { roomNumber: string; wardType: string },\n    userId: string,\n  ): Promise<Admission | undefined> {\n    return db.transaction((tx) => {\n      const eventTime = new Date().toISOString();\n      const eventDate = eventTime.split(\"T\")[0];\n\n      // Generate receipt number for room transfer\n      const transferCount = this.getDailyReceiptCountSync(\n        \"room_transfer\",\n        eventDate,\n      );\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj\n        .toISOString()\n        .slice(2, 10)\n        .replace(/-/g, \"\")\n        .slice(0, 6);\n      const receiptNumber = `${yymmdd}-RMC-${transferCount.toString().padStart(4, \"0\")}`;\n\n      // Update the admission's current room\n      const updated = tx\n        .update(schema.admissions)\n        .set({\n          currentRoomNumber: roomData.roomNumber,\n          currentWardType: roomData.wardType,\n          updatedAt: eventTime,\n        })\n        .where(eq(schema.admissions.id, admissionId))\n        .returning()\n        .get();\n\n      // Create room change event with receipt number\n      tx.insert(schema.admissionEvents)\n        .values({\n          admissionId: admissionId,\n          eventType: \"room_change\",\n          eventTime: eventTime,\n          roomNumber: roomData.roomNumber,\n          wardType: roomData.wardType,\n          notes: `Room transferred to ${roomData.wardType} - Room ${roomData.roomNumber}`,\n          createdBy: userId,\n          receiptNumber: receiptNumber,\n        })\n        .run();\n\n      return updated;\n    });\n  }\n\n  async dischargePatient(\n    admissionId: string,\n    userId: string,\n    dischargeDateTime?: string,\n  ): Promise<Admission | undefined> {\n    return db.transaction((tx) => {\n      try {\n        // Validate and parse discharge date/time\n        let parsedDischargeDateTime: string;\n        if (\n          !dischargeDateTime ||\n          typeof dischargeDateTime !== \"string\" ||\n          dischargeDateTime.trim() === \"\"\n        ) {\n          console.log(`No discharge datetime provided, using current time`);\n          parsedDischargeDateTime = new Date().toISOString();\n        } else {\n          try {\n            parsedDischargeDateTime = new Date(dischargeDateTime).toISOString();\n          } catch (e) {\n            console.log(\n              `Failed to parse discharge datetime: ${dischargeDateTime}, using current time`,\n            );\n            parsedDischargeDateTime = new Date().toISOString();\n          }\n        }\n\n        const admission = tx\n          .select()\n          .from(schema.admissions)\n          .where(eq(schema.admissions.id, admissionId))\n          .get();\n\n        if (!admission) {\n          throw new Error(\"Admission not found\");\n        }\n\n        if (admission.status === \"discharged\") {\n          throw new Error(\"Patient is already discharged\");\n        }\n\n        // Calculate total cost based on stay duration and daily cost\n        const admissionDate = new Date(admission.admissionDate);\n        const stayDays = calculateStayDays(\n          admissionDate,\n          parsedDischargeDateTime,\n        );\n        const totalCost =\n          stayDays * admission.dailyCost +\n          (admission.additionalPayments || 0) -\n          (admission.totalDiscount || 0);\n\n        // Update the admission with discharge information\n        const updatedAdmission = tx\n          .update(schema.admissions)\n          .set({\n            status: \"discharged\",\n            dischargeDate: parsedDischargeDateTime,\n            totalCost,\n            updatedAt: new Date().toISOString(),\n          })\n          .where(eq(schema.admissions.id, admissionId))\n          .returning()\n          .get();\n\n        // Create discharge event with receipt number\n        const eventDate = parsedDischargeDateTime.split(\"T\")[0];\n        const dischargeCount = this.getDailyReceiptCountSync(\n          \"discharge\",\n          eventDate,\n        );\n        const dateObj = new Date(eventDate);\n        const yymmdd = dateObj\n          .toISOString()\n          .slice(2, 10)\n          .replace(/-/g, \"\")\n          .slice(0, 6);\n        const dischargeReceiptNumber = `${yymmdd}-DIS-${dischargeCount.toString().padStart(4, \"0\")}`;\n\n        // Create discharge event with proper receipt number\n        const dischargeEvent = tx\n          .insert(schema.admissionEvents)\n          .values({\n            admissionId: admission.id,\n            eventType: \"discharge\",\n            eventTime: parsedDischargeDateTime,\n            notes: \"Patient discharged\",\n            receiptNumber: dischargeReceiptNumber,\n            createdBy: userId || null, // Allow null if userId is undefined\n          })\n          .returning()\n          .get();\n\n        // Decrement occupied beds\n        if (admission.currentWardType) {\n          const roomType = tx\n            .select()\n            .from(schema.roomTypes)\n            .where(eq(schema.roomTypes.name, admission.currentWardType))\n            .get();\n\n          if (roomType && roomType.occupiedBeds > 0) {\n            tx.update(schema.roomTypes)\n              .set({\n                occupiedBeds: roomType.occupiedBeds - 1,\n                updatedAt: new Date().toISOString(),\n              })\n              .where(eq(schema.roomTypes.id, roomType.id))\n              .run();\n          }\n        }\n\n        // Log discharge activity (do this after transaction to avoid issues)\n        setImmediate(() => {\n          const patient = db\n            .select()\n            .from(schema.patients)\n            .where(eq(schema.patients.id, admission.patientId))\n            .get();\n          if (patient) {\n            this.logActivity(\n              userId,\n              \"patient_discharged\",\n              \"Patient Discharged\",\n              `${patient.name} - ${admission.admissionId}`,\n              admissionId,\n              \"admission\",\n              {\n                admissionId: admission.admissionId,\n                patientName: patient.name,\n              },\n            );\n          }\n        });\n\n        return updatedAdmission;\n      } catch (transactionError) {\n        console.error(\n          \"Transaction error during discharge patient:\",\n          transactionError,\n        );\n        throw transactionError; // Re-throw to rollback the transaction\n      }\n    });\n  }\n\n  async getHospitalSettings(): Promise<any> {\n    console.log(\"=== getHospitalSettings Storage Function ===\");\n    const settings = db.select().from(schema.hospitalSettings).get();\n    console.log(\"Raw settings from database:\", settings);\n\n    if (settings) {\n      return settings;\n    }\n\n    // Create default settings if none exist\n    const defaultSettings = {\n      id: \"default\",\n      name: \"Health Care Hospital and Diagnostic Center\",\n      address:\n        \"In front of Maheshwari Garden, Binjhiya, Jabalpur Road, Mandla, Madhya Pradesh - 482001\",\n      phone: \"8889762101, 9826325958\",\n      email: \"hospital@healthcare.in\",\n      registrationNumber: \"NH/3613/JUL-2021\",\n      logoPath: null,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    // Insert default settings and return them\n    db.insert(schema.hospitalSettings).values(defaultSettings).run();\n    console.log(\"Created default hospital settings:\", defaultSettings);\n    console.log(\"=== End Storage Function (defaults created) ===\");\n    return defaultSettings;\n  }\n\n  async saveHospitalSettings(settings: any): Promise<any> {\n    try {\n      // Use Drizzle ORM to update hospital settings\n      const updated = db\n        .insert(schema.hospitalSettings)\n        .values({\n          id: \"default\",\n          name: settings.name,\n          address: settings.address,\n          phone: settings.phone,\n          email: settings.email,\n          registrationNumber: settings.registrationNumber || null,\n          logoPath: settings.logoPath || null,\n          updatedAt: new Date().toISOString(),\n        })\n        .onConflictDoUpdate({\n          target: schema.hospitalSettings.id,\n          set: {\n            name: settings.name,\n            address: settings.address,\n            phone: settings.phone,\n            email: settings.email,\n            registrationNumber: settings.registrationNumber || null,\n            logoPath: settings.logoPath || null,\n            updatedAt: new Date().toISOString(),\n          },\n        })\n        .returning()\n        .get();\n\n      return updated;\n    } catch (error) {\n      console.error(\"Error saving hospital settings:\", error);\n      throw error;\n    }\n  }\n\n  async saveLogo(logoData: string): Promise<string> {\n    try {\n      // Extract base64 data and file type\n      const matches = logoData.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\n      if (!matches) {\n        throw new Error(\"Invalid image data format\");\n      }\n\n      const mimeType = matches[1];\n      const base64Data = matches[2];\n      const extension = mimeType.split(\"/\")[1];\n\n      // Create filename and path\n      const filename = `hospital-logo-${Date.now()}.${extension}`;\n      const logoPath = `/uploads/${filename}`;\n\n      // For simplicity, we'll store the base64 data directly in the database\n      // In a production system, you'd save to filesystem or cloud storage\n      return logoData; // Return the original data URL for now\n    } catch (error) {\n      console.error(\"Error saving logo:\", error);\n      throw error;\n    }\n  }\n\n  // System settings\n  async getSystemSettings(): Promise<any> {\n    try {\n      let settings = db.select().from(schema.systemSettings).get();\n\n      // Create default settings if none exist\n      if (!settings) {\n        settings = {\n          id: this.generateId(),\n          emailNotifications: false,\n          smsNotifications: false,\n          autoBackup: true,\n          auditLogging: true,\n          backupFrequency: \"daily\",\n          backupTime: \"02:00\",\n          lastBackupDate: null,\n          backupRetentionDays: 30,\n          timezone: \"UTC\",\n          timezoneOffset: \"+00:00\",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n\n        db.insert(schema.systemSettings).values(settings).run();\n      }\n\n      return settings;\n    } catch (error) {\n      console.error(\"Error fetching system settings:\", error);\n      throw error;\n    }\n  }\n\n  async saveSystemSettings(settings: any): Promise<any> {\n    try {\n      const existingSettings = db.select().from(schema.systemSettings).get();\n\n      if (existingSettings) {\n        // Update existing settings\n        const updated = db\n          .update(schema.systemSettings)\n          .set({\n            ...settings,\n            updatedAt: new Date().toISOString(),\n          })\n          .where(eq(schema.systemSettings.id, existingSettings.id))\n          .returning()\n          .get();\n        return updated;\n      } else {\n        // Create new settings\n        const newSettings = {\n          ...settings,\n          id: this.generateId(),\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n\n        const created = db\n          .insert(schema.systemSettings)\n          .values(newSettings)\n          .returning()\n          .get();\n        return created;\n      }\n    } catch (error) {\n      console.error(\"Error saving system settings:\", error);\n      throw error;\n    }\n  }\n\n  // Backup functionality\n  private generateBackupId(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.backupLogs).all().length + 1;\n    return `BACKUP-${year}-${count.toString().padStart(3, \"0\")}`;\n  }\n\n  async createBackup(backupType: string = \"auto\"): Promise<any> {\n    const backupId = this.generateBackupId();\n    const startTime = new Date().toISOString();\n\n    try {\n      // Log backup start\n      const backupLog = {\n        backupId,\n        status: \"running\",\n        backupType,\n        startTime,\n        createdAt: startTime,\n      };\n\n      db.insert(schema.backupLogs).values(backupLog).run();\n\n      // Create backup directory if it doesn't exist\n      const backupDir = path.join(process.cwd(), \"backups\");\n      if (!fs.existsSync(backupDir)) {\n        fs.mkdirSync(backupDir, { recursive: true });\n      }\n\n      // Generate backup filename with timestamp\n      const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n      const backupPath = path.join(\n        backupDir,\n        `hospital-backup-${timestamp}.sql`,\n      );\n\n      // Export database to SQL dump\n      const tables = [\n        \"users\",\n        \"doctors\",\n        \"patients\",\n        \"patient_visits\",\n        \"services\",\n        \"bills\",\n        \"bill_items\",\n        \"pathology_orders\",\n        \"pathology_tests\",\n        \"patient_services\",\n        \"admissions\",\n        \"admission_events\",\n        \"hospital_settings\",\n        \"system_settings\",\n        \"room_types\",\n        \"rooms\",\n      ];\n\n      let sqlDump = \"-- Hospital Management System Database Backup\\n\";\n      sqlDump += `-- Created: ${new Date().toISOString()}\\n`;\n      sqlDump += `-- Backup ID: ${backupId}\\n\\n`;\n\n      let totalRecords = 0;\n\n      for (const tableName of tables) {\n        try {\n          const rows = db.$client.prepare(`SELECT * FROM ${tableName}`).all();\n          totalRecords += rows.length;\n\n          if (rows.length > 0) {\n            sqlDump += `-- Table: ${tableName}\\n`;\n            sqlDump += `DELETE FROM ${tableName};\\n`;\n\n            for (const row of rows) {\n              const columns = Object.keys(row).join(\", \");\n              const values = Object.values(row)\n                .map((v) =>\n                  v === null\n                    ? \"NULL\"\n                    : typeof v === \"string\"\n                      ? `'${v.replace(/'/g, \"''\")}'`\n                      : v,\n                )\n                .join(\", \");\n\n              sqlDump += `INSERT INTO ${tableName} (${columns}) VALUES (${values});\\n`;\n            }\n            sqlDump += \"\\n\";\n          }\n        } catch (tableError) {\n          console.warn(\n            `Warning: Could not backup table ${tableName}:`,\n            tableError,\n          );\n        }\n      }\n\n      // Write backup file\n      fs.writeFileSync(backupPath, sqlDump, \"utf8\");\n      const fileStats = fs.statSync(backupPath);\n      const endTime = new Date().toISOString();\n\n      console.log(\n        `Backup file created: ${backupPath} (${fileStats.size} bytes)`,\n      );\n\n      // Update backup log with success\n      db.update(schema.backupLogs)\n        .set({\n          status: \"completed\",\n          filePath: backupPath,\n          fileSize: fileStats.size,\n          endTime,\n          tableCount: tables.length,\n          recordCount: totalRecords,\n        })\n        .where(eq(schema.backupLogs.backupId, backupId))\n        .run();\n\n      console.log(`Backup log updated for ${backupId} with status: completed`);\n\n      // Update system settings with last backup date\n      const systemSettings = await this.getSystemSettings();\n      if (systemSettings) {\n        await this.saveSystemSettings({\n          ...systemSettings,\n          lastBackupDate: new Date().toISOString().split(\"T\")[0],\n        });\n      }\n\n      return {\n        backupId,\n        filePath: backupPath,\n        fileSize: fileStats.size,\n        recordCount: totalRecords,\n        status: \"completed\",\n      };\n    } catch (error) {\n      console.error(\"Backup creation error:\", error);\n\n      // Update backup log with failure\n      db.update(schema.backupLogs)\n        .set({\n          status: \"failed\",\n          endTime: new Date().toISOString(),\n          errorMessage:\n            error instanceof Error ? error.message : \"Unknown error\",\n        })\n        .where(eq(schema.backupLogs.backupId, backupId))\n        .run();\n\n      throw error;\n    }\n  }\n\n  async getBackupLogs(): Promise<any[]> {\n    try {\n      return db\n        .select()\n        .from(schema.backupLogs)\n        .orderBy(desc(schema.backupLogs.createdAt))\n        .limit(50)\n        .all();\n    } catch (error) {\n      console.error(\"Error fetching backup logs:\", error);\n      return [];\n    }\n  }\n\n  async getBackupHistory(): Promise<any[]> {\n    try {\n      const history = db\n        .select()\n        .from(schema.backupLogs)\n        .where(\n          and(\n            eq(schema.backupLogs.status, \"completed\"),\n            ne(schema.backupLogs.backupType, \"restore\"),\n          ),\n        )\n        .orderBy(desc(schema.backupLogs.createdAt))\n        .limit(20)\n        .all();\n\n      console.log(\n        \"Backup history query result:\",\n        history.length,\n        \"backups found\",\n      );\n      console.log(\n        \"Backup types in history:\",\n        history.map((h) => `${h.backupType} - ${h.backupId}`),\n      );\n\n      return history;\n    } catch (error) {\n      console.error(\"Error fetching backup history:\", error);\n      return [];\n    }\n  }\n\n  async cleanOldBackups(): Promise<void> {\n    try {\n      const systemSettings = await this.getSystemSettings();\n      const retentionDays = systemSettings?.backupRetentionDays || 30;\n\n      // Calculate cutoff date\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n      const cutoffIso = cutoffDate.toISOString();\n\n      // Find old backup files\n      const oldBackups = db\n        .select()\n        .from(schema.backupLogs)\n        .where(sql`${schema.backupLogs.createdAt} < ${cutoffIso}`)\n        .all();\n\n      // Delete files and log entries\n      for (const backup of oldBackups) {\n        try {\n          if (backup.filePath && fs.existsSync(backup.filePath)) {\n            fs.unlinkSync(backup.filePath);\n          }\n\n          db.delete(schema.backupLogs)\n            .where(eq(schema.backupLogs.id, backup.id))\n            .run();\n        } catch (deleteError) {\n          console.warn(\n            `Failed to delete backup ${backup.backupId}:`,\n            deleteError,\n          );\n        }\n      }\n\n      console.log(`Cleaned up ${oldBackups.length} old backup(s)`);\n    } catch (error) {\n      console.error(\"Error cleaning old backups:\", error);\n    }\n  }\n\n  async restoreBackup(backupFilePath: string): Promise<any> {\n    const startTime = new Date().toISOString();\n\n    try {\n      // Validate backup file exists\n      if (!fs.existsSync(backupFilePath)) {\n        throw new Error(\"Backup file not found\");\n      }\n\n      // Read backup file content\n      const backupContent = fs.readFileSync(backupFilePath, \"utf8\");\n\n      if (!backupContent || backupContent.trim().length === 0) {\n        throw new Error(\"Backup file is empty or corrupted\");\n      }\n\n      // Create a restore log entry\n      const restoreId = this.generateBackupId().replace(\"BACKUP\", \"RESTORE\");\n      const restoreLog = {\n        backupId: restoreId,\n        status: \"running\",\n        backupType: \"restore\",\n        filePath: backupFilePath,\n        startTime,\n        createdAt: startTime,\n      };\n\n      db.insert(schema.backupLogs).values(restoreLog).run();\n\n      // Execute statements directly using the SQLite client\n      const statements = backupContent\n        .split(\";\")\n        .map((stmt) => stmt.trim())\n        .filter((stmt) => stmt);\n\n      let executedStatements = 0;\n\n      for (const statement of statements) {\n        try {\n          db.$client.exec(statement + \";\");\n          executedStatements++;\n        } catch (stmtError) {\n          console.warn(\n            `Warning: Failed to execute statement: ${statement.substring(0, 100)}...`,\n            stmtError,\n          );\n          // Optionally, you might want to stop the restore process here or log the error more severely.\n          // For now, we continue and update the log with partial success/failure info.\n        }\n      }\n\n      // Update restore log with success or partial success\n      const finalStatus =\n        executedStatements === statements.length\n          ? \"completed\"\n          : \"partially_completed\";\n      db.update(schema.backupLogs)\n        .set({\n          status: finalStatus,\n          endTime: new Date().toISOString(),\n          recordCount: executedStatements,\n          errorMessage:\n            executedStatements < statements.length\n              ? \"Some statements failed during restore.\"\n              : null,\n        })\n        .where(eq(schema.backupLogs.backupId, restoreId))\n        .run();\n\n      return {\n        restoreId,\n        executedStatements,\n        status: finalStatus,\n      };\n    } catch (error) {\n      console.error(\"Backup restore error:\", error);\n\n      // Attempt to update restore log with failure if the restoreId was generated\n      try {\n        const restoreId = this.generateBackupId().replace(\"BACKUP\", \"RESTORE\"); // Re-generate or retrieve if available\n        // Check if a log entry with this ID exists to avoid errors if it wasn't created\n        const existingLog = db\n          .select()\n          .from(schema.backupLogs)\n          .where(eq(schema.backupLogs.backupId, restoreId))\n          .get();\n        if (existingLog) {\n          db.update(schema.backupLogs)\n            .set({\n              status: \"failed\",\n              endTime: new Date().toISOString(),\n              errorMessage:\n                error instanceof Error\n                  ? error.message\n                  : \"Unknown error during restore\",\n            })\n            .where(eq(schema.backupLogs.backupId, restoreId))\n            .run();\n        } else {\n          // If log entry wasn't created, create a new failed one\n          const failedLog = {\n            backupId: restoreId,\n            status: \"failed\",\n            backupType: \"restore\",\n            filePath: backupFilePath, // Store path for context\n            startTime,\n            endTime: new Date().toISOString(),\n            errorMessage:\n              error instanceof Error\n                ? error.message\n                : \"Unknown error during restore\",\n            createdAt: startTime,\n          };\n          db.insert(schema.backupLogs).values(failedLog).run();\n        }\n      } catch (logError) {\n        console.error(\"Failed to update restore log:\", logError);\n      }\n\n      throw error;\n    }\n  }\n\n  async getAvailableBackups(): Promise<any[]> {\n    try {\n      const backupDir = path.join(process.cwd(), \"backups\");\n\n      if (!fs.existsSync(backupDir)) {\n        return [];\n      }\n\n      const files = fs\n        .readdirSync(backupDir)\n        .filter((file) => file.endsWith(\".sql\"))\n        .map((file) => {\n          const filePath = path.join(backupDir, file);\n          const stats = fs.statSync(filePath);\n\n          // Get backup log info if available by matching file path\n          const backupLog = db\n            .select()\n            .from(schema.backupLogs)\n            .where(\n              and(\n                like(schema.backupLogs.filePath, `%${file}`),\n                eq(schema.backupLogs.status, \"completed\"),\n                ne(schema.backupLogs.backupType, \"restore\"),\n              ),\n            )\n            .get();\n\n          return {\n            fileName: file,\n            filePath,\n            fileSize: stats.size,\n            createdAt: backupLog?.createdAt || stats.birthtime.toISOString(),\n            modifiedAt: stats.mtime.toISOString(),\n            backupLog: backupLog || null,\n          };\n        })\n        .sort(\n          (a, b) =>\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),\n        );\n\n      console.log(\n        `Found ${files.length} backup files, ${files.filter((f) => f.backupLog).length} with logs`,\n      );\n      return files;\n    } catch (error) {\n      console.error(\"Error getting available backups:\", error);\n      return [];\n    }\n  }\n\n  // Pathology category management\n  async createPathologyCategory(\n    category: InsertPathologyCategory,\n  ): Promise<PathologyCategory> {\n    const created = db\n      .insert(schema.pathologyCategories)\n      .values(category)\n      .returning()\n      .get();\n    return created;\n  }\n\n  async getPathologyCategories(): Promise<PathologyCategory[]> {\n    return db\n      .select()\n      .from(schema.pathologyCategories)\n      .where(eq(schema.pathologyCategories.isActive, true))\n      .orderBy(asc(schema.pathologyCategories.name))\n      .all();\n  }\n\n  async getPathologyCategoryById(\n    id: string,\n  ): Promise<PathologyCategory | undefined> {\n    return db\n      .select()\n      .from(schema.pathologyCategories)\n      .where(eq(schema.pathologyCategories.id, id))\n      .get();\n  }\n\n  async updatePathologyCategory(\n    id: string,\n    category: Partial<InsertPathologyCategory>,\n  ): Promise<PathologyCategory | undefined> {\n    const updated = db\n      .update(schema.pathologyCategories)\n      .set({ ...category, updatedAt: sql`datetime('now')` })\n      .where(eq(schema.pathologyCategories.id, id))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async deletePathologyCategory(id: string): Promise<boolean> {\n    try {\n      // Check if category has any tests first\n      const testsCount = db\n        .select()\n        .from(schema.dynamicPathologyTests)\n        .where(eq(schema.dynamicPathologyTests.categoryId, id))\n        .all().length;\n\n      if (testsCount > 0) {\n        return false; // Cannot delete category with tests\n      }\n\n      const result = db\n        .delete(schema.pathologyCategories)\n        .where(eq(schema.pathologyCategories.id, id))\n        .run();\n      return result.changes > 0;\n    } catch (error) {\n      console.error(\"Error deleting pathology category:\", error);\n      return false;\n    }\n  }\n\n  // Dynamic pathology test management\n  async createDynamicPathologyTest(\n    test: InsertDynamicPathologyTest,\n  ): Promise<DynamicPathologyTest> {\n    const created = db\n      .insert(schema.dynamicPathologyTests)\n      .values(test)\n      .returning()\n      .get();\n    return created;\n  }\n\n  async getDynamicPathologyTests(): Promise<DynamicPathologyTest[]> {\n    return db\n      .select()\n      .from(schema.dynamicPathologyTests)\n      .where(eq(schema.dynamicPathologyTests.isActive, true))\n      .orderBy(asc(schema.dynamicPathologyTests.testName))\n      .all();\n  }\n\n  async getDynamicPathologyTestsByCategory(\n    categoryId: string,\n  ): Promise<DynamicPathologyTest[]> {\n    return db\n      .select()\n      .from(schema.dynamicPathologyTests)\n      .where(\n        and(\n          eq(schema.dynamicPathologyTests.categoryId, categoryId),\n          eq(schema.dynamicPathologyTests.isActive, true),\n        ),\n      )\n      .orderBy(asc(schema.dynamicPathologyTests.testName))\n      .all();\n  }\n\n  async getDynamicPathologyTestById(\n    id: string,\n  ): Promise<DynamicPathologyTest | undefined> {\n    return db\n      .select()\n      .from(schema.dynamicPathologyTests)\n      .where(eq(schema.dynamicPathologyTests.id, id))\n      .get();\n  }\n\n  async updateDynamicPathologyTest(\n    id: string,\n    test: Partial<InsertDynamicPathologyTest>,\n  ): Promise<DynamicPathologyTest | undefined> {\n    const updated = db\n      .update(schema.dynamicPathologyTests)\n      .set({ ...test, updatedAt: sql`datetime('now')` })\n      .where(eq(schema.dynamicPathologyTests.id, id))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async deleteDynamicPathologyTest(id: string): Promise<boolean> {\n    try {\n      const result = db\n        .delete(schema.dynamicPathologyTests)\n        .where(eq(schema.dynamicPathologyTests.id, id))\n        .run();\n      return result.changes > 0;\n    } catch (error) {\n      console.error(\"Error deleting dynamic pathology test:\", error);\n      return false;\n    }\n  }\n\n  async bulkCreateDynamicPathologyTests(\n    tests: InsertDynamicPathologyTest[],\n  ): Promise<DynamicPathologyTest[]> {\n    const createdTests: DynamicPathologyTest[] = [];\n\n    const transaction = db.transaction(() => {\n      for (const test of tests) {\n        const created = db\n          .insert(schema.dynamicPathologyTests)\n          .values(test)\n          .returning()\n          .get();\n        createdTests.push(created);\n      }\n    });\n\n    transaction();\n    return createdTests;\n  }\n\n  async logActivity(\n    userId: string,\n    activityType: string,\n    title: string,\n    description: string,\n    entityId?: string,\n    entityType?: string,\n    metadata?: any,\n  ): Promise<void> {\n    try {\n      let validUserId = userId;\n\n      // If userId is \"system\", try to use root user ID, or skip if not found\n      if (userId === \"system\") {\n        const rootUser = db\n          .select({ id: schema.users.id })\n          .from(schema.users)\n          .where(eq(schema.users.username, \"root\"))\n          .get();\n\n        if (rootUser) {\n          validUserId = rootUser.id;\n        } else {\n          console.warn(\n            \"Skipping activity log - root user not found for system activity\",\n          );\n          return;\n        }\n      } else {\n        // Check if user exists before logging activity\n        const userExists = db\n          .select({ id: schema.users.id })\n          .from(schema.users)\n          .where(eq(schema.users.id, userId))\n          .get();\n\n        if (!userExists) {\n          console.warn(`Skipping activity log - user ${userId} not found`);\n          return;\n        }\n      }\n\n      db.insert(schema.activities)\n        .values({\n          userId: validUserId,\n          activityType,\n          title,\n          description,\n          entityId,\n          entityType,\n          metadata: metadata ? JSON.stringify(metadata) : null,\n        })\n        .run();\n    } catch (error) {\n      console.error(\"Failed to log activity:\", error);\n    }\n  }\n\n  async getRecentActivities(limit: number = 10): Promise<any[]> {\n    try {\n      const activities = db.$client\n        .prepare(\n          `\n        SELECT\n          a.id,\n          a.activity_type as activityType,\n          a.title,\n          a.description,\n          a.entity_id as entityId,\n          a.entity_type as entityType,\n          a.metadata,\n          a.created_at as createdAt,\n          CASE \n            WHEN a.user_id = 'system' THEN 'System'\n            ELSE COALESCE(u.full_name, 'Deleted User')\n          END as userName\n        FROM activities a\n        LEFT JOIN users u ON a.user_id = u.id\n        ORDER BY a.created_at DESC\n        LIMIT ?\n      `,\n        )\n        .all(limit);\n\n      return (activities as any[]).map((activity) => ({\n        ...activity,\n        metadata: activity.metadata ? JSON.parse(activity.metadata) : null,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching recent activities:\", error);\n      return [];\n    }\n  }\n\n  async createActivity(activity: InsertActivity): Promise<Activity> {\n    const created = db\n      .insert(schema.activities)\n      .values(activity)\n      .returning()\n      .get();\n    return created;\n  }\n\n  async getDailyReceiptCount(\n    serviceType: string,\n    date: string,\n  ): Promise<number> {\n    try {\n      let count = 0;\n\n      switch (serviceType) {\n        case \"pathology\":\n          count = db\n            .select()\n            .from(schema.pathologyOrders)\n            .where(eq(schema.pathologyOrders.orderedDate, date))\n            .all().length;\n          break;\n        case \"admission\":\n          count = db\n            .select()\n            .from(schema.admissionEvents)\n            .where(\n              and(\n                eq(schema.admissionEvents.eventType, \"admit\"),\n                like(schema.admissionEvents.eventTime, `${date}%`),\n              ),\n            )\n            .all().length;\n          break;\n        case \"room_transfer\":\n          count = db\n            .select()\n            .from(schema.admissionEvents)\n            .where(\n              and(\n                eq(schema.admissionEvents.eventType, \"room_change\"),\n                like(schema.admissionEvents.eventTime, `${date}%`),\n              ),\n            )\n            .all().length;\n          break;\n        case \"discharge\":\n          count = db\n            .select()\n            .from(schema.admissionEvents)\n            .where(\n              and(\n                eq(schema.admissionEvents.eventType, \"discharge\"),\n                like(schema.admissionEvents.eventTime, `${date}%`),\n              ),\n            )\n            .all().length;\n          break;\n        case \"opd\":\n          count = db\n            .select()\n            .from(schema.patientServices)\n            .where(\n              and(\n                eq(schema.patientServices.serviceType, \"opd\"),\n                eq(schema.patientServices.scheduledDate, date),\n              ),\n            )\n            .all().length;\n          break;\n        default:\n          count = 0;\n      }\n\n      return count + 1;\n    } catch (error) {\n      console.error(\"Error getting daily receipt count:\", error);\n      return 1;\n    }\n  }\n\n  getDailyReceiptCountSync(serviceType: string, date: string): number {\n    try {\n      let count = 0;\n\n      switch (serviceType) {\n        case \"pathology\":\n          count =\n            db.$client\n              .prepare(\n                `\n            SELECT COUNT(*) as count FROM pathology_orders\n            WHERE ordered_date = ?\n          `,\n              )\n              .get(date)?.count || 0;\n          break;\n        case \"admission\":\n          count =\n            db.$client\n              .prepare(\n                `\n            SELECT COUNT(*) as count FROM admission_events\n            WHERE event_type = 'admit' AND event_time LIKE ?\n          `,\n              )\n              .get(`${date}%`)?.count || 0;\n          break;\n        case \"room_transfer\":\n          count =\n            db.$client\n              .prepare(\n                `\n            SELECT COUNT(*) as count FROM admission_events\n            WHERE event_type = 'room_change' AND event_time LIKE ?\n          `,\n              )\n              .get(`${date}%`)?.count || 0;\n          break;\n        case \"discharge\":\n          count =\n            db.$client\n              .prepare(\n                `\n            SELECT COUNT(*) as count FROM admission_events\n            WHERE event_type = 'discharge' AND event_time LIKE ?\n          `,\n              )\n              .get(`${date}%`)?.count || 0;\n          break;\n        case \"opd\":\n          count =\n            db.$client\n              .prepare(\n                `\n            SELECT COUNT(*) as count FROM patient_services\n            WHERE service_type = 'opd' AND scheduled_date = ?\n          `,\n              )\n              .get(date)?.count || 0;\n          break;\n        default:\n          count = 0;\n      }\n\n      return count + 1;\n    } catch (error) {\n      console.error(\"Error getting daily receipt count sync:\", error);\n      return 1;\n    }\n  }\n\n  // Schedule Event Management\n  async getAllScheduleEvents(): Promise<ScheduleEvent[]> {\n    return db\n      .select()\n      .from(schema.scheduleEvents)\n      .orderBy(schema.scheduleEvents.startTime)\n      .all();\n  }\n\n  async createScheduleEvent(\n    event: InsertScheduleEvent,\n  ): Promise<ScheduleEvent> {\n    return db.insert(schema.scheduleEvents).values(event).returning().get();\n  }\n\n  async updateScheduleEvent(\n    id: string,\n    event: Partial<InsertScheduleEvent>,\n  ): Promise<ScheduleEvent | undefined> {\n    return db\n      .update(schema.scheduleEvents)\n      .set({ ...event, updatedAt: new Date().toISOString() })\n      .where(eq(schema.scheduleEvents.id, id))\n      .returning()\n      .get();\n  }\n\n  async deleteScheduleEvent(id: string): Promise<void> {\n    await db\n      .delete(schema.scheduleEvents)\n      .where(eq(schema.scheduleEvents.id, id))\n      .run();\n  }\n\n  async getScheduleEventsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise<ScheduleEvent[]> {\n    return db\n      .select()\n      .from(schema.scheduleEvents)\n      .where(\n        and(\n          sql`${schema.scheduleEvents.startTime} >= ${startDate}`,\n          sql`${schema.scheduleEvents.startTime} <= ${endDate}`,\n        ),\n      )\n      .orderBy(schema.scheduleEvents.startTime)\n      .all();\n  }\n\n  async getScheduleEventsByDoctor(doctorId: string): Promise<ScheduleEvent[]> {\n    return db\n      .select()\n      .from(schema.scheduleEvents)\n      .where(eq(schema.scheduleEvents.doctorId, doctorId))\n      .orderBy(schema.scheduleEvents.startTime)\n      .all();\n  }\n\n  // Inpatient Management Detail Methods (IST-based calculations)\n  async getBedOccupancyDetails(): Promise<any[]> {\n    try {\n      // Get room types with occupancy details\n      const roomTypes = db\n        .select()\n        .from(schema.roomTypes)\n        .where(eq(schema.roomTypes.isActive, true))\n        .all();\n\n      const bedOccupancyData = roomTypes.map((roomType) => {\n        // Get rooms for this room type\n        const rooms = db\n          .select()\n          .from(schema.rooms)\n          .where(\n            and(\n              eq(schema.rooms.roomTypeId, roomType.id),\n              eq(schema.rooms.isActive, true),\n            ),\n          )\n          .all();\n\n        // Get current admissions for rooms of this type\n        const currentAdmissions = db\n          .select({\n            admission: schema.admissions,\n            patient: schema.patients,\n          })\n          .from(schema.admissions)\n          .leftJoin(\n            schema.patients,\n            eq(schema.admissions.patientId, schema.patients.id),\n          )\n          .where(\n            and(\n              eq(schema.admissions.status, \"admitted\"),\n              eq(schema.admissions.currentWardType, roomType.name),\n            ),\n          )\n          .all();\n\n        // Map rooms with occupancy info\n        const roomsWithOccupancy = rooms.map((room) => {\n          const occupyingAdmission = currentAdmissions.find(\n            (admission) =>\n              admission.admission.currentRoomNumber === room.roomNumber,\n          );\n\n          return {\n            ...room,\n            isOccupied: !!occupyingAdmission,\n            occupyingPatient: occupyingAdmission\n              ? {\n                  name: occupyingAdmission.patient?.name || \"Unknown\",\n                  patientId: occupyingAdmission.patient?.patientId || \"Unknown\",\n                }\n              : null,\n          };\n        });\n\n        // Calculate actual occupied beds from rooms that are occupied\n        const actualOccupiedBeds = roomsWithOccupancy.filter(\n          (room) => room.isOccupied,\n        ).length;\n\n        // Calculate total beds from all active rooms for this room type\n        const totalBeds = rooms.reduce(\n          (sum, room) => sum + (room.capacity || 1),\n          0,\n        );\n\n        return {\n          ...roomType,\n          rooms: roomsWithOccupancy,\n          occupiedBeds: actualOccupiedBeds,\n          totalBeds: totalBeds,\n          // Keep these for backwards compatibility\n          actualOccupiedBeds: actualOccupiedBeds,\n        };\n      });\n\n      return bedOccupancyData;\n    } catch (error) {\n      console.error(\"Error getting bed occupancy details:\", error);\n      return [];\n    }\n  }\n\n  async getCurrentlyAdmittedPatients(): Promise<any[]> {\n    try {\n      const currentAdmissions = db\n        .select({\n          admission: schema.admissions,\n          patient: schema.patients,\n          doctor: schema.doctors,\n        })\n        .from(schema.admissions)\n        .leftJoin(\n          schema.patients,\n          eq(schema.admissions.patientId, schema.patients.id),\n        )\n        .leftJoin(\n          schema.doctors,\n          eq(schema.admissions.doctorId, schema.doctors.id),\n        )\n        .where(eq(schema.admissions.status, \"admitted\"))\n        .orderBy(desc(schema.admissions.admissionDate))\n        .all();\n\n      return currentAdmissions.map((admission) => ({\n        ...admission.admission,\n        patient: admission.patient,\n        doctor: admission.doctor,\n      }));\n    } catch (error) {\n      console.error(\"Error getting currently admitted patients:\", error);\n      return [];\n    }\n  }\n\n  async getTodayAdmissions(): Promise<any[]> {\n    try {\n      // Use local system time for date calculation\n      const now = new Date();\n      const today =\n        now.getFullYear() +\n        \"-\" +\n        String(now.getMonth() + 1).padStart(2, \"0\") +\n        \"-\" +\n        String(now.getDate()).padStart(2, \"0\");\n\n      // Create start and end of today for range comparison\n      // Use SQL date function to extract just the date part for comparison\n      const todayAdmissions = db\n        .select({\n          admission: schema.admissions,\n          patient: schema.patients,\n          doctor: schema.doctors,\n        })\n        .from(schema.admissions)\n        .leftJoin(\n          schema.patients,\n          eq(schema.admissions.patientId, schema.patients.id),\n        )\n        .leftJoin(\n          schema.doctors,\n          eq(schema.admissions.doctorId, schema.doctors.id),\n        )\n        .where(sql`DATE(${schema.admissions.admissionDate}) = ${today}`)\n        .orderBy(desc(schema.admissions.createdAt))\n        .all();\n\n      return todayAdmissions.map((admission) => ({\n        ...admission.admission,\n        patient: admission.patient,\n        doctor: admission.doctor,\n      }));\n    } catch (error) {\n      console.error(\"Error getting today's admissions:\", error);\n      return [];\n    }\n  }\n\n  async getTodayDischarges(): Promise<any[]> {\n    try {\n      // Use local system time for date calculation\n      const now = new Date();\n      const today =\n        now.getFullYear() +\n        \"-\" +\n        String(now.getMonth() + 1).padStart(2, \"0\") +\n        \"-\" +\n        String(now.getDate()).padStart(2, \"0\");\n\n      // Use SQL date function to extract just the date part for comparison\n      const todayDischarges = db\n        .select({\n          admission: schema.admissions,\n          patient: schema.patients,\n          doctor: schema.doctors,\n        })\n        .from(schema.admissions)\n        .leftJoin(\n          schema.patients,\n          eq(schema.admissions.patientId, schema.patients.id),\n        )\n        .leftJoin(\n          schema.doctors,\n          eq(schema.admissions.doctorId, schema.doctors.id),\n        )\n        .where(\n          and(\n            eq(schema.admissions.status, \"discharged\"),\n            isNotNull(schema.admissions.dischargeDate),\n            sql`DATE(${schema.admissions.dischargeDate}) = ${today}`,\n          ),\n        )\n        .orderBy(desc(schema.admissions.updatedAt))\n        .all();\n\n      return todayDischarges.map((admission) => ({\n        ...admission.admission,\n        patient: admission.patient,\n        doctor: admission.doctor,\n      }));\n    } catch (error) {\n      console.error(\"Error getting today's discharges:\", error);\n      return [];\n    }\n  }\n\n  // Service Category Management\n  async getServiceCategories(): Promise<ServiceCategory[]> {\n    return await db\n      .select()\n      .from(schema.serviceCategories)\n      .where(eq(schema.serviceCategories.isActive, true))\n      .orderBy(schema.serviceCategories.name);\n  }\n\n  async createServiceCategory(\n    category: InsertServiceCategory,\n  ): Promise<ServiceCategory> {\n    const [serviceCategory] = await db\n      .insert(schema.serviceCategories)\n      .values(category)\n      .returning();\n    return serviceCategory;\n  }\n\n  async updateServiceCategory(\n    id: string,\n    category: Partial<InsertServiceCategory>,\n  ): Promise<ServiceCategory | undefined> {\n    const [updated] = await db\n      .update(schema.serviceCategories)\n      .set({ ...category, updatedAt: new Date().toISOString() })\n      .where(eq(schema.serviceCategories.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteServiceCategory(id: string): Promise<boolean> {\n    // Check if category has services\n    const servicesInCategory = await db\n      .select()\n      .from(schema.services)\n      .where(eq(schema.services.category, id))\n      .limit(1);\n\n    if (servicesInCategory.length > 0) {\n      throw new Error(\"Cannot delete category that has services\");\n    }\n\n    const [deleted] = await db\n      .update(schema.serviceCategories)\n      .set({ isActive: false, updatedAt: new Date().toISOString() })\n      .where(eq(schema.serviceCategories.id, id))\n      .returning();\n    return !!deleted;\n  }\n\n  // Comprehensive Bill Generation\n  async generateComprehensiveBill(patientId: string): Promise<{\n    patient: any;\n    billItems: Array<{\n      type: \"service\" | \"pathology\" | \"admission\" | \"payment\" | \"discount\";\n      id: string;\n      date: string;\n      description: string;\n      amount: number;\n      category: string;\n      quantity?: number;\n      details: any;\n    }>;\n    summary: {\n      totalCharges: number;\n      totalPayments: number;\n      totalDiscounts: number;\n      remainingBalance: number;\n      lastPaymentDate?: string;\n      lastDiscountDate?: string;\n    };\n  }> {\n    try {\n      // Get patient details\n      const patient = await this.getPatientById(patientId);\n      if (!patient) {\n        throw new Error(\"Patient not found\");\n      }\n\n      const billItems: Array<{\n        type: \"service\" | \"pathology\" | \"admission\" | \"payment\" | \"discount\";\n        id: string;\n        date: string;\n        description: string;\n        amount: number;\n        category: string;\n        details: any;\n      }> = [];\n\n      // 1. OPD Visits (consultation fees from patient_visits table)\n      const opdVisits = db\n        .select({\n          id: schema.patientVisits.id,\n          visitId: schema.patientVisits.visitId,\n          patientId: schema.patientVisits.patientId,\n          doctorId: schema.patientVisits.doctorId,\n          visitType: schema.patientVisits.visitType,\n          scheduledDate: schema.patientVisits.scheduledDate,\n          scheduledTime: schema.patientVisits.scheduledTime,\n          consultationFee: schema.patientVisits.consultationFee,\n          symptoms: schema.patientVisits.symptoms,\n          diagnosis: schema.patientVisits.diagnosis,\n          createdAt: schema.patientVisits.createdAt,\n          // Doctor info\n          doctorName: schema.doctors.name,\n          doctorSpecialization: schema.doctors.specialization,\n          doctorConsultationFee: schema.doctors.consultationFee,\n        })\n        .from(schema.patientVisits)\n        .leftJoin(\n          schema.doctors,\n          eq(schema.patientVisits.doctorId, schema.doctors.id),\n        )\n        .where(\n          and(\n            eq(schema.patientVisits.patientId, patientId),\n            eq(schema.patientVisits.visitType, \"opd\"),\n          ),\n        )\n        .orderBy(desc(schema.patientVisits.scheduledDate))\n        .all();\n\n      // 2. Patient Services (all types except pathology which is handled separately)\n      const patientServices = db\n        .select({\n          id: schema.patientServices.id,\n          serviceId: schema.patientServices.serviceId,\n          patientId: schema.patientServices.patientId,\n          doctorId: schema.patientServices.doctorId,\n          serviceType: schema.patientServices.serviceType,\n          serviceName: schema.patientServices.serviceName,\n          scheduledDate: schema.patientServices.scheduledDate,\n          scheduledTime: schema.patientServices.scheduledTime,\n          price: schema.patientServices.price,\n          calculatedAmount: schema.patientServices.calculatedAmount,\n          billingQuantity: schema.patientServices.billingQuantity,\n          billingType: schema.patientServices.billingType,\n          notes: schema.patientServices.notes,\n          createdAt: schema.patientServices.createdAt,\n          // Doctor info\n          doctorName: schema.doctors.name,\n          doctorSpecialization: schema.doctors.specialization,\n        })\n        .from(schema.patientServices)\n        .leftJoin(\n          schema.doctors,\n          eq(schema.patientServices.doctorId, schema.doctors.id),\n        )\n        .where(eq(schema.patientServices.patientId, patientId))\n        .orderBy(desc(schema.patientServices.scheduledDate))\n        .all();\n\n      // 3. Get admissions data for calculating admission service durations\n      const admissions = db\n        .select()\n        .from(schema.admissions)\n        .where(eq(schema.admissions.patientId, patientId))\n        .orderBy(desc(schema.admissions.admissionDate))\n        .all();\n\n      // Get admission doctors for context\n      const admissionDoctorIds = admissions\n        .map((a) => a.doctorId)\n        .filter(Boolean) as string[];\n      const admissionDoctors = new Map<string, string>();\n      if (admissionDoctorIds.length > 0) {\n        const doctors = db\n          .select()\n          .from(schema.doctors)\n          .where(inArray(schema.doctors.id, admissionDoctorIds))\n          .all();\n        doctors.forEach((doctor) => {\n          admissionDoctors.set(doctor.id, doctor.name);\n        });\n      }\n\n      // Add OPD visits as bill items\n      opdVisits.forEach((visit) => {\n        const amount =\n          visit.consultationFee || visit.doctorConsultationFee || 0;\n        if (amount > 0) {\n          // Handle doctor name to avoid duplicate \"Dr.\" prefix\n          const doctorName = visit.doctorName || \"Unknown Doctor\";\n          const formattedDoctorName = doctorName.startsWith(\"Dr.\")\n            ? doctorName\n            : `Dr. ${doctorName}`;\n\n          billItems.push({\n            type: \"service\",\n            id: visit.id,\n            date: visit.scheduledDate || visit.createdAt,\n            description: `OPD Consultation - ${formattedDoctorName}${visit.symptoms ? ` (${visit.symptoms})` : \"\"}`,\n            amount: amount,\n            category: \"OPD Consultation\",\n            details: {\n              visitId: visit.visitId,\n              doctorName: visit.doctorName,\n              doctorSpecialization: visit.doctorSpecialization,\n              scheduledTime: visit.scheduledTime,\n              symptoms: visit.symptoms,\n              diagnosis: visit.diagnosis,\n              consultationFee: visit.consultationFee,\n              quantity: 1,\n              billingQuantity: 1,\n            },\n          });\n        }\n      });\n\n      // Add patient services with daily calculation for admission services\n      patientServices.forEach((ps) => {\n        let serviceAmount =\n          (ps.calculatedAmount as number) || (ps.price as number) || 0;\n        let serviceQuantity = ps.billingQuantity || 1;\n\n        // For admission services, calculate based on patient's stay duration\n        if (ps.serviceType === \"admission\") {\n          // Find the admission for this patient to get stay duration\n          const patientAdmissions = admissions.filter(\n            (admission) => admission.patientId === patientId,\n          );\n\n          if (patientAdmissions.length > 0) {\n            // Use the most recent admission or find matching admission by date\n            let relevantAdmission = patientAdmissions[0];\n\n            // Try to find admission that matches the service date\n            const matchingAdmission = patientAdmissions.find((admission) => {\n              const admissionDate = new Date(\n                admission.admissionDate,\n              ).toDateString();\n              const serviceDate = new Date(\n                ps.scheduledDate || ps.createdAt,\n              ).toDateString();\n              return admissionDate === serviceDate;\n            });\n\n            if (matchingAdmission) {\n              relevantAdmission = matchingAdmission;\n            }\n\n            // Calculate stay duration using the calculateStayDays function\n            const endDate =\n              relevantAdmission.dischargeDate || new Date().toISOString();\n            const stayDuration = calculateStayDays(\n              relevantAdmission.admissionDate,\n              endDate,\n            );\n\n            if (stayDuration > 0) {\n              if (ps.serviceName.toLowerCase().includes(\"bed charges\")) {\n                // Bed charges: charge for each completed 24-hour period\n                serviceQuantity = stayDuration;\n                serviceAmount = (ps.price || 0) * serviceQuantity;\n              } else if (\n                ps.serviceName.toLowerCase().includes(\"doctor charges\") ||\n                ps.serviceName.toLowerCase().includes(\"nursing charges\") ||\n                ps.serviceName.toLowerCase().includes(\"rmo charges\")\n              ) {\n                // Other admission services: charge for each calendar day\n                serviceQuantity = stayDuration;\n                serviceAmount = (ps.price || 0) * serviceQuantity;\n              }\n            }\n          }\n        }\n\n        if (serviceAmount > 0) {\n          billItems.push({\n            type: \"service\",\n            id: ps.id,\n            date: ps.scheduledDate || ps.createdAt,\n            description: ps.serviceName,\n            amount: serviceAmount,\n            category: \"service\",\n            details: {\n              serviceId: ps.serviceId,\n              serviceName: ps.serviceName,\n              serviceType: ps.serviceType,\n              billingType: ps.billingType,\n              billingQuantity: ps.billingQuantity,\n              unitPrice: ps.price,\n              calculatedAmount: serviceAmount,\n              notes: ps.notes,\n              quantity: serviceQuantity,\n            },\n          });\n        }\n      });\n\n      // 3. Pathology Orders\n      const pathologyOrders = db\n        .select({\n          order: schema.pathologyOrders,\n          doctor: schema.doctors,\n        })\n        .from(schema.pathologyOrders)\n        .leftJoin(\n          schema.doctors,\n          eq(schema.pathologyOrders.doctorId, schema.doctors.id),\n        )\n        .where(eq(schema.pathologyOrders.patientId, patientId))\n        .all();\n\n      pathologyOrders.forEach((po) => {\n        if (po.order.totalPrice > 0) {\n          // Get tests for this order\n          const tests = db\n            .select()\n            .from(schema.pathologyTests)\n            .where(eq(schema.pathologyTests.orderId, po.order.id))\n            .all();\n\n          billItems.push({\n            type: \"pathology\",\n            id: po.order.id,\n            date: po.order.orderedDate,\n            description: `Pathology Tests - Order ${po.order.orderId}`,\n            amount: po.order.totalPrice,\n            category: \"pathology\",\n            details: {\n              doctor:\n                po.doctor?.name ||\n                (po.order.doctorId ? \"Unknown Doctor\" : \"No Doctor Assigned\"),\n              receiptNumber: po.order.receiptNumber,\n              status: po.order.status,\n              testsCount: tests.length,\n              quantity: 1, // Always 1 for pathology orders (one order)\n              tests: tests.map((t) => ({\n                name: t.testName,\n                category: t.testCategory,\n                price: t.price,\n              })),\n            },\n          });\n        }\n      });\n\n      // 4. Admissions and associated events\n      patientAdmissions.forEach((admission) => {\n        // Discharge entries removed from comprehensive bill as they have no monetary value\n        // (bed charges and other admission services are now handled by patient services)\n      });\n\n      // 5. Patient Payments\n      const payments = db\n        .select()\n        .from(schema.patientPayments)\n        .where(eq(schema.patientPayments.patientId, patientId))\n        .all();\n\n      payments.forEach((payment) => {\n        billItems.push({\n          type: \"payment\",\n          id: payment.id,\n          date: payment.paymentDate,\n          description: `Payment - ${payment.paymentMethod.toUpperCase()}`,\n          amount: -payment.amount, // Negative for payments\n          category: \"payment\",\n          details: {\n            paymentId: payment.paymentId,\n            paymentMethod: payment.paymentMethod,\n            receiptNumber: payment.receiptNumber,\n            reason: payment.reason,\n            quantity: 1,\n          },\n        });\n      });\n\n      // Add admission payments (initial deposits and additional payments)\n      patientAdmissions.forEach((admission) => {\n        if (admission.initialDeposit && admission.initialDeposit > 0) {\n          billItems.push({\n            type: \"payment\",\n            id: `${admission.id}-initial-deposit`,\n            date: admission.admissionDate,\n            description: `Initial Deposit - ${admission.admissionId}`,\n            amount: -admission.initialDeposit, // Negative for payments\n            category: \"payment\",\n            details: {\n              admissionId: admission.admissionId,\n              paymentMethod: \"cash\",\n              reason: \"Initial admission deposit\",\n              quantity: 1,\n            },\n          });\n        }\n\n        if (admission.additionalPayments && admission.additionalPayments > 0) {\n          billItems.push({\n            type: \"payment\",\n            id: `${admission.id}-additional-payments`,\n            date: admission.lastPaymentDate || admission.updatedAt,\n            description: `Additional Payments - ${admission.admissionId}`,\n            amount: -admission.additionalPayments, // Negative for payments\n            category: \"payment\",\n            details: {\n              admissionId: admission.admissionId,\n              paymentMethod: \"cash\",\n              reason: \"Additional admission payments\",\n              quantity: 1,\n            },\n          });\n        }\n      });\n\n      // 6. Patient Discounts\n      const discounts = db\n        .select()\n        .from(schema.patientDiscounts)\n        .where(eq(schema.patientDiscounts.patientId, patientId))\n        .all();\n\n      discounts.forEach((discount) => {\n        billItems.push({\n          type: \"discount\",\n          id: discount.id,\n          date: discount.discountDate,\n          description: `Discount - ${discount.discountType.replace(\"_\", \" \").toUpperCase()}`,\n          amount: -discount.amount, // Negative for discounts\n          category: \"discount\",\n          details: {\n            discountId: discount.discountId,\n            discountType: discount.discountType,\n            reason: discount.reason,\n            quantity: 1,\n          },\n        });\n      });\n\n      // Add admission discounts for backwards compatibility\n      patientAdmissions.forEach((admission) => {\n        if (admission.totalDiscount && admission.totalDiscount > 0) {\n          billItems.push({\n            type: \"discount\",\n            id: `${admission.id}-discount`,\n            date: admission.lastDiscountDate || admission.updatedAt,\n            description: `Admission Discount - ${admission.admissionId}`,\n            amount: -admission.totalDiscount, // Negative for discounts\n            category: \"discount\",\n            details: {\n              admissionId: admission.admissionId,\n              discountType: \"admission\",\n              reason: admission.lastDiscountReason || \"Admission discount\",\n              quantity: 1,\n            },\n          });\n        }\n      });\n\n      // Sort all items by date (oldest first)\n      billItems.sort(\n        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),\n      );\n\n      // Calculate summary\n      const totalCharges = billItems\n        .filter((item) => item.amount > 0)\n        .reduce((sum, item) => sum + item.amount, 0);\n\n      const totalPayments = Math.abs(\n        billItems\n          .filter((item) => item.type === \"payment\")\n          .reduce((sum, item) => sum + item.amount, 0),\n      );\n\n      const totalDiscounts = Math.abs(\n        billItems\n          .filter((item) => item.type === \"discount\")\n          .reduce((sum, item) => sum + item.amount, 0),\n      );\n\n      const remainingBalance = totalCharges - totalPaid - totalDiscounts;\n\n      const lastPayment = billItems.find((item) => item.type === \"payment\");\n      const lastDiscount = billItems.find((item) => item.type === \"discount\");\n\n      return {\n        patient,\n        billItems,\n        summary: {\n          totalCharges,\n          totalPayments,\n          totalDiscounts,\n          remainingBalance,\n          lastPaymentDate: lastPayment?.date,\n          lastDiscountDate: lastDiscount?.date,\n        },\n      };\n    } catch (error) {\n      console.error(\"Error generating comprehensive bill:\", error);\n      throw error;\n    }\n  }\n\n  // Doctor Service Rate Management\n  async createDoctorServiceRate(\n    rate: InsertDoctorServiceRate,\n  ): Promise<DoctorServiceRate> {\n    const created = db\n      .insert(schema.doctorServiceRates)\n      .values(rate)\n      .returning()\n      .get();\n    return created;\n  }\n\n  async getDoctorServiceRates(doctorId?: string): Promise<DoctorServiceRate[]> {\n    const query = db.select().from(schema.doctorServiceRates);\n    if (doctorId) {\n      return query\n        .where(eq(schema.doctorServiceRates.doctorId, doctorId))\n        .all();\n    }\n    return query.all();\n  }\n\n  async getDoctorServiceRateById(\n    id: string,\n  ): Promise<DoctorServiceRate | undefined> {\n    return db\n      .select()\n      .from(schema.doctorServiceRates)\n      .where(eq(schema.doctorServiceRates.id, id))\n      .get();\n  }\n\n  async updateDoctorServiceRate(\n    id: string,\n    rate: Partial<InsertDoctorServiceRate>,\n  ): Promise<DoctorServiceRate | undefined> {\n    const updated = db\n      .update(schema.doctorServiceRates)\n      .set({ ...rate, updatedAt: new Date().toISOString() })\n      .where(eq(schema.doctorServiceRates.id, id))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async deleteDoctorServiceRate(id: string): Promise<boolean> {\n    const deleted = db\n      .delete(schema.doctorServiceRates)\n      .where(eq(schema.doctorServiceRates.id, id))\n      .returning()\n      .get();\n    return !!deleted;\n  }\n\n  async getDoctorPendingEarnings(doctorId: string): Promise<DoctorEarning[]> {\n    return db\n      .select()\n      .from(schema.doctorEarnings)\n      .where(\n        and(\n          eq(schema.doctorEarnings.doctorId, doctorId),\n          eq(schema.doctorEarnings.status, \"pending\"),\n        ),\n      )\n      .orderBy(desc(schema.doctorEarnings.serviceDate))\n      .all();\n  }\n\n  // Recalculate doctor earnings for services that have doctors assigned but no earnings\n  async recalculateDoctorEarnings(\n    doctorId?: string,\n  ): Promise<{ processed: number; created: number }> {\n    console.log(\n      `Starting recalculation of doctor earnings${doctorId ? ` for doctor ${doctorId}` : \" for all doctors\"}`,\n    );\n\n    let processed = 0;\n    let created = 0;\n\n    try {\n      // Get all patient services that have a doctor assigned\n      let patientServicesQuery = db\n        .select()\n        .from(schema.patientServices)\n        .where(isNotNull(schema.patientServices.doctorId));\n\n      if (doctorId) {\n        patientServicesQuery = patientServicesQuery.where(\n          eq(schema.patientServices.doctorId, doctorId),\n        );\n      }\n\n      const patientServices = patientServicesQuery.all();\n      console.log(\n        `Found ${patientServices.length} patient services to process`,\n      );\n\n      for (const patientService of patientServices) {\n        processed++;\n\n        // Check if earning already exists for this patient service\n        const existingEarning = db\n          .select()\n          .from(schema.doctorEarnings)\n          .where(eq(schema.doctorEarnings.patientServiceId, patientService.id))\n          .get();\n\n        if (existingEarning) {\n          console.log(\n            `Earning already exists for patient service ${patientService.id}`,\n          );\n          continue;\n        }\n\n        // Get service details\n        const service = db\n          .select()\n          .from(schema.services)\n          .where(eq(schema.services.id, patientService.serviceId))\n          .get();\n\n        if (!service) {\n          console.log(\n            `Service not found for patient service ${patientService.id}`,\n          );\n          continue;\n        }\n\n        // Find doctor service rate - check by service ID or by service name for flexible matching\n        let doctorRate = db\n          .select()\n          .from(schema.doctorServiceRates)\n          .where(\n            and(\n              eq(schema.doctorServiceRates.doctorId, patientService.doctorId!),\n              eq(schema.doctorServiceRates.serviceId, service.id),\n              eq(schema.doctorServiceRates.isActive, true),\n            ),\n          )\n          .get();\n\n        // If no rate found by service ID, try matching by service name (for flexible matching)\n        if (!doctorRate) {\n          doctorRate = db\n            .select()\n            .from(schema.doctorServiceRates)\n            .where(\n              and(\n                eq(\n                  schema.doctorServiceRates.doctorId,\n                  patientService.doctorId!,\n                ),\n                eq(schema.doctorServiceRates.serviceName, service.name),\n                eq(schema.doctorServiceRates.isActive, true),\n              ),\n            )\n            .get();\n        }\n\n        if (!doctorRate) {\n          console.log(\n            `No salary rate found for doctor ${patientService.doctorId} and service ${service.id} (${service.name})`,\n          );\n          continue;\n        }\n\n        // Calculate earning amount based on rate type\n        let earnedAmount = 0;\n        const servicePrice =\n          patientService.calculatedAmount ||\n          patientService.price ||\n          service.price;\n\n        if (doctorRate.rateType === \"percentage\") {\n          earnedAmount = (servicePrice * doctorRate.rateAmount) / 100;\n        } else if (doctorRate.rateType === \"amount\") {\n          earnedAmount = doctorRate.rateAmount;\n        } else if (doctorRate.rateType === \"fixed_daily\") {\n          earnedAmount = doctorRate.rateAmount;\n        }\n\n        // Create doctor earning record using storage interface method\n        try {\n          await this.createDoctorEarning({\n            doctorId: patientService.doctorId!,\n            patientId: patientService.patientId,\n            serviceId: service.id,\n            patientServiceId: patientService.id,\n            serviceName: service.name,\n            serviceCategory: doctorRate.serviceCategory,\n            serviceDate: patientService.scheduledDate,\n            rateType: doctorRate.rateType,\n            rateAmount: doctorRate.rateAmount,\n            servicePrice,\n            earnedAmount,\n            status: \"pending\",\n            notes: `Recalculation for ${service.name}`,\n          });\n\n          created++;\n          console.log(\n            `Created earning for doctor ${patientService.doctorId}: ₹${earnedAmount}`,\n          );\n        } catch (error) {\n          console.error(\n            `Error creating earning for patient service ${patientService.id}:`,\n            error,\n          );\n        }\n      }\n\n      console.log(\n        `Recalculation complete: processed ${processed} services, created ${created} new earnings`,\n      );\n      return { processed, created };\n    } catch (error) {\n      console.error(\"Error recalculating doctor earnings:\", error);\n      throw error;\n    }\n  }\n\n  // Get doctor earnings by doctor ID and optional status filter\n  async getDoctorEarnings(\n    doctorId?: string,\n    status?: string,\n  ): Promise<DoctorEarning[]> {\n    try {\n      console.log(\n        `Fetching doctor earnings - doctorId: ${doctorId}, status: ${status}`,\n      );\n\n      const whereConditions: any[] = [];\n\n      if (doctorId) {\n        whereConditions.push(eq(schema.doctorEarnings.doctorId, doctorId));\n      }\n\n      if (status && status !== \"all\") {\n        whereConditions.push(eq(schema.doctorEarnings.status, status));\n      }\n\n      const query =\n        whereConditions.length > 0\n          ? db\n              .select()\n              .from(schema.doctorEarnings)\n              .where(and(...whereConditions))\n          : db.select().from(schema.doctorEarnings);\n\n      const earnings = query\n        .orderBy(desc(schema.doctorEarnings.serviceDate))\n        .all();\n\n      console.log(`Found ${earnings.length} earnings for doctor ${doctorId}`);\n      return earnings;\n    } catch (error) {\n      console.error(\"Error fetching doctor earnings:\", error);\n      return [];\n    }\n  }\n\n  // Create a new doctor earning record\n  async createDoctorEarning(\n    earning: InsertDoctorEarning,\n  ): Promise<DoctorEarning> {\n    try {\n      const earningId = this.generateEarningId();\n\n      const created = db\n        .insert(schema.doctorEarnings)\n        .values({\n          ...earning,\n          earningId,\n        })\n        .returning()\n        .get();\n\n      console.log(\n        `Created doctor earning: ${earningId} for amount ${created.earnedAmount}`,\n      );\n      return created;\n    } catch (error) {\n      console.error(\"Error creating doctor earning:\", error);\n      throw error;\n    }\n  }\n\n  // Get a specific doctor earning by ID\n  async getDoctorEarningById(id: string): Promise<DoctorEarning | undefined> {\n    try {\n      return db\n        .select()\n        .from(schema.doctorEarnings)\n        .where(eq(schema.doctorEarnings.id, id))\n        .get();\n    } catch (error) {\n      console.error(\"Error fetching doctor earning by ID:\", error);\n      throw error;\n    }\n  }\n\n  // Update the status of a doctor earning record\n  async updateDoctorEarningStatus(\n    id: string,\n    status: string,\n  ): Promise<DoctorEarning | undefined> {\n    try {\n      const updated = db\n        .update(schema.doctorEarnings)\n        .set({\n          status: status as any,\n          updatedAt: new Date().toISOString(),\n        })\n        .where(eq(schema.doctorEarnings.id, id))\n        .returning()\n        .get();\n\n      console.log(`Updated doctor earning ${id} status to ${status}`);\n      return updated;\n    } catch (error) {\n      console.error(\"Error updating doctor earning status:\", error);\n      throw error;\n    }\n  }\n\n  // New function for bulk pending bills\n  async getAllPatientsPendingBills(): Promise<any[]> {\n    try {\n      console.log(\"Fetching all patients with pending bills...\");\n\n      // Get all active patients\n      const allPatients = db\n        .select()\n        .from(schema.patients)\n        .where(eq(schema.patients.isActive, true))\n        .all();\n\n      console.log(`Found ${allPatients.length} active patients`);\n\n      // For each patient, use the same calculation as getPatientFinancialSummary\n      const patientsWithPending = [];\n\n      for (const patient of allPatients) {\n        try {\n          // Use the existing financial summary method for consistency\n          const summary = await this.getPatientFinancialSummary(patient.id);\n\n          // Only include patients with positive balance\n          if (summary.balance > 0) {\n            patientsWithPending.push({\n              ...patient,\n              pendingAmount: summary.balance,\n            });\n          }\n        } catch (error) {\n          console.error(\n            `Error calculating pending bills for patient ${patient.id}:`,\n            error,\n          );\n          // Skip this patient if there's an error\n          continue;\n        }\n      }\n\n      console.log(\n        `Found ${patientsWithPending.length} patients with pending bills`,\n      );\n      return patientsWithPending;\n    } catch (error) {\n      console.error(\"Error fetching patients with pending bills:\", error);\n      return [];\n    }\n  }\n}\n\nexport const storage = new SqliteStorage();\n","size_bytes":195794},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/opd-list.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Calendar, \n  Clock, \n  Search, \n  User, \n  Stethoscope,\n  Phone,\n  MapPin,\n  Filter\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { PatientService, Patient, Doctor } from \"@shared/schema\";\n\nexport default function OpdList() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedDoctor, setSelectedDoctor] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n\n  // Fetch all OPD visits\n  const { data: opdServices = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/opd-visits\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/opd-visits\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch OPD visits\");\n      return response.json();\n    },\n  });\n\n  // Fetch doctors for filtering\n  const { data: doctors = [] } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Group OPD visits by doctor\n  const opdServicesByDoctor = useMemo(() => {\n    const filtered = opdServices.filter(visit => {\n      // Data already includes patient and doctor info from the join\n      const matchesSearch = searchQuery === \"\" || \n        visit.patientName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        visit.patientPatientId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        visit.patientPhone?.includes(searchQuery);\n      \n      const matchesDoctor = selectedDoctor === \"all\" || visit.doctorId === selectedDoctor;\n      const matchesStatus = selectedStatus === \"all\" || visit.status === selectedStatus;\n      const matchesDate = selectedDate === \"\" || visit.scheduledDate === selectedDate;\n\n      return matchesSearch && matchesDoctor && matchesStatus && matchesDate;\n    });\n\n    const grouped = filtered.reduce((groups, visit) => {\n      const doctorId = visit.doctorId || \"unassigned\";\n      if (!groups[doctorId]) {\n        groups[doctorId] = [];\n      }\n      groups[doctorId].push(visit);\n      return groups;\n    }, {} as Record<string, any[]>);\n\n    // Sort visits within each doctor group by scheduled date and time\n    Object.values(grouped).forEach((visits) => {\n      (visits as any[]).sort((a: any, b: any) => {\n        const dateCompare = new Date(`${a.scheduledDate}T${a.scheduledTime || '00:00'}`).getTime() - \n                           new Date(`${b.scheduledDate}T${b.scheduledTime || '00:00'}`).getTime();\n        return dateCompare;\n      });\n    });\n\n    return grouped;\n  }, [opdServices, searchQuery, selectedDoctor, selectedStatus, selectedDate]);\n\n  const getDoctorName = (doctorId: string, visit?: any) => {\n    if (doctorId === \"unassigned\") return \"Unassigned\";\n    // Use joined data if available, fallback to doctors array\n    if (visit?.doctorName) return visit.doctorName;\n    const doctor = doctors.find(d => d.id === doctorId);\n    return doctor ? doctor.name : \"Unknown Doctor\";\n  };\n\n  const getDoctorSpecialization = (doctorId: string, visit?: any) => {\n    if (doctorId === \"unassigned\") return \"No specialization\";\n    // Use joined data if available, fallback to doctors array\n    if (visit?.doctorSpecialization) return visit.doctorSpecialization;\n    const doctor = doctors.find(d => d.id === doctorId);\n    return doctor?.specialization || \"Unknown\";\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"default\";\n      case \"in-progress\": return \"secondary\";\n      case \"completed\": return \"default\";\n      case \"cancelled\": return \"destructive\";\n      default: return \"outline\";\n    }\n  };\n\n  const totalOpdCount = opdServices.length;\n  // Use Indian timezone (UTC+5:30) for consistent date calculation\n  const now = new Date();\n  const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n  const today = indianTime.getFullYear() + '-' + \n    String(indianTime.getMonth() + 1).padStart(2, '0') + '-' + \n    String(indianTime.getDate()).padStart(2, '0');\n  const todayOpdCount = opdServices.filter(visit => \n    visit.scheduledDate === today\n  ).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <p>Loading OPD appointments...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">OPD Appointments</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and view all OPD consultations by doctor\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <Calendar className=\"w-4 h-4 mr-1\" />\n            Today: {todayOpdCount}\n          </Badge>\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <User className=\"w-4 h-4 mr-1\" />\n            Total: {totalOpdCount}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name, ID, or phone...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-opd-patients\"\n              />\n            </div>\n            \n            <Select value={selectedDoctor} onValueChange={setSelectedDoctor}>\n              <SelectTrigger data-testid=\"filter-doctor\">\n                <SelectValue placeholder=\"Filter by doctor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Doctors</SelectItem>\n                {doctors.map(doctor => (\n                  <SelectItem key={doctor.id} value={doctor.id}>\n                    {doctor.name}\n                  </SelectItem>\n                ))}\n                <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"filter-status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              data-testid=\"filter-date\"\n            />\n\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedDoctor(\"all\");\n                setSelectedStatus(\"all\");\n                setSelectedDate(\"\");\n              }}\n              data-testid=\"clear-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Clear\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* OPD Services by Doctor */}\n      {Object.keys(opdServicesByDoctor).length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Stethoscope className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No OPD appointments found matching your criteria.</p>\n            <Link href=\"/patients\">\n              <Button className=\"mt-4\">Schedule New OPD</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(opdServicesByDoctor).map(([doctorId, services]) => (\n            <Card key={doctorId}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Stethoscope className=\"w-5 h-5\" />\n                  {getDoctorName(doctorId)}\n                  <Badge variant=\"outline\">{(services as any[]).length} patients</Badge>\n                </CardTitle>\n                <CardDescription>\n                  {getDoctorSpecialization(doctorId)}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {(services as any[]).map((visit: any) => {\n                    return (\n                      <div\n                        key={visit.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <User className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">\n                                {visit.patientName || \"Unknown Patient\"}\n                              </span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {visit.patientPatientId || \"N/A\"}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {visit.scheduledDate ? new Date(visit.scheduledDate).toLocaleDateString('en-US', {\n                                  month: 'short',\n                                  day: 'numeric',\n                                  year: 'numeric'\n                                }) : 'N/A'}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                {visit.scheduledTime || 'N/A'}\n                              </div>\n                              {visit.patientPhone && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {visit.patientPhone}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-3\">\n                          <Badge \n                            variant={getStatusBadgeVariant(visit.status)}\n                            data-testid={`status-${visit.id}`}\n                          >\n                            {visit.status.charAt(0).toUpperCase() + visit.status.slice(1)}\n                          </Badge>\n                          \n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">\n                              ₹{visit.consultationFee ?? visit.doctorConsultationFee ?? 0}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Consultation Fee\n                            </div>\n                          </div>\n                          \n                          <Link href={`/patients/${visit.patientId}`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`view-patient-${visit.id}`}>\n                              View\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13073},"client/src/components/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Bed, Microscope, Stethoscope } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface StatsCardsProps {\n  stats: {\n    opdPatients: number;\n    inpatients: number;\n    labTests: number;\n    diagnostics: number;\n  };\n}\n\nexport default function StatsCards({ stats }: StatsCardsProps) {\n  const statsData = [\n    {\n      title: \"OPD Patients\",\n      value: stats.opdPatients.toString(),\n      change: \"Today\",\n      changeType: \"neutral\" as const,\n      icon: Users,\n      bgColor: \"bg-medical-blue/10\",\n      iconColor: \"text-medical-blue\",\n      testId: \"stat-opd\",\n      clickable: true,\n      linkTo: \"/opd-list\"\n    },\n    {\n      title: \"In-patients\",\n      value: stats.inpatients.toString(),\n      change: \"Currently admitted\",\n      changeType: \"neutral\" as const,\n      icon: Bed,\n      bgColor: \"bg-healthcare-green/10\",\n      iconColor: \"text-healthcare-green\",\n      testId: \"stat-inpatients\",\n      clickable: true,\n      linkTo: \"/admissions\"\n    },\n    {\n      title: \"Lab Tests\",\n      value: stats.labTests.toString(),\n      change: \"Today\",\n      changeType: \"positive\" as const,\n      icon: Microscope,\n      bgColor: \"bg-purple-500/10\",\n      iconColor: \"text-purple-500\",\n      testId: \"stat-labs\",\n      clickable: true,\n      linkTo: \"/lab-tests\"\n    },\n    {\n      title: \"Diagnostics\",\n      value: stats.diagnostics.toString(),\n      change: \"Completed\",\n      changeType: \"positive\" as const,\n      icon: Stethoscope,\n      bgColor: \"bg-orange-500/10\",\n      iconColor: \"text-orange-500\",\n      testId: \"stat-diagnostics\",\n      clickable: true,\n      linkTo: \"/diagnostics\"\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n      {statsData.map((stat) => {\n        const CardWrapper = (stat as any).clickable ? \n          ({ children, ...props }: any) => (\n            <Link href={(stat as any).linkTo}>\n              <Card {...props} className={`shadow-sm cursor-pointer hover:shadow-md transition-shadow ${props.className || ''}`}>\n                {children}\n              </Card>\n            </Link>\n          ) : \n          ({ children, ...props }: any) => <Card {...props}>{children}</Card>;\n\n        return (\n          <CardWrapper key={stat.title} data-testid={stat.testId}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-text-muted text-sm font-medium\">{stat.title}</p>\n                  <p className=\"text-2xl font-bold text-text-dark mt-1\" data-testid={`${stat.testId}-value`}>\n                    {stat.value}\n                  </p>\n                  <p className={`text-sm font-medium mt-2 ${\n                    stat.changeType === \"positive\" ? \"text-healthcare-green\" :\n                    \"text-medical-blue\"\n                  }`}>\n                    {stat.change}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                  <stat.icon className={`w-6 h-6 ${stat.iconColor}`} />\n                </div>\n              </div>\n            </CardContent>\n          </CardWrapper>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3322},"client/src/pages/patient-detail.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  User,\n  Calendar,\n  Phone,\n  Mail,\n  MapPin,\n  Stethoscope,\n  TestTube,\n  X,\n  Heart,\n  Bed,\n  FileText,\n  ClipboardList,\n  Plus,\n  Eye,\n  Clock,\n  Minus,\n  Edit,\n  Settings,\n  Printer,\n  Search,\n  DollarSign,\n  Loader2, // Import Loader2 for loading spinners\n  CreditCard, // Import CreditCard for payment button\n  Percent, // Import Percent for discount button\n  Zap, // Import Zap for smart billing button\n} from \"lucide-react\";\nimport {\n  insertPatientServiceSchema,\n  insertAdmissionSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ReceiptTemplate } from \"@/components/receipt-template\";\n// Removed SmartBillingDialog import as it's no longer used\nimport { parseTimestamp, calcStayDays } from \"@/lib/time\";\nimport type {\n  Patient,\n  PatientService,\n  Admission,\n  AdmissionEvent,\n  Doctor,\n} from \"@shared/schema\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ComprehensiveBillTemplate } from \"@/components/comprehensive-bill-template\"; // Import ComprehensiveBillTemplate\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useTimezone } from \"@/hooks/use-timezone\";\n\n// Define Service interface with quantity\ninterface Service {\n  id: string;\n  name: string;\n  category: string;\n  price: number;\n  description?: string;\n  isActive?: boolean;\n  billingType?: string;\n  billingParameters?: string;\n  quantity?: number; // Added quantity property\n}\n\nexport default function PatientDetail() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const patientId = params.id;\n  const { formatDateTime, formatDate, formatTime } = useTimezone();\n\n  // State for dialogs and selections\n  const [isServiceDialogOpen, setIsServiceDialogOpen] = useState(false);\n  const [selectedServiceType, setSelectedServiceType] = useState(\"opd\");\n  const [selectedServiceCategory, setSelectedServiceCategory] =\n    useState<string>(\"\");\n  const [selectedServiceSearchQuery, setSelectedServiceSearchQuery] =\n    useState(\"\"); // Renamed from serviceSearchQuery to avoid conflict\n  const [selectedServiceCategorySearchQuery, setSelectedServiceCategorySearchQuery] =\n    useState(\"\"); // Added for filtering services by category name\n  const [selectedCatalogService, setSelectedCatalogService] =\n    useState<any>(null);\n  const [billingPreview, setBillingPreview] = useState<any>(null);\n  const [isAdmissionDialogOpen, setIsAdmissionDialogOpen] = useState(false);\n  const [isDischargeDialogOpen, setIsDischargeDialogOpen] = useState(false);\n  const [isRoomUpdateDialogOpen, setIsRoomUpdateDialogOpen] = useState(false);\n  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [selectedAdmissionForPayment, setSelectedAdmissionForPayment] =\n    useState(\"\");\n  const [isDiscountDialogOpen, setIsDiscountDialogOpen] = useState(false);\n  const [discountAmount, setDiscountAmount] = useState(\"\");\n  const [discountReason, setDiscountReason] = useState(\"\");\n  const [dischargeDateTime, setDischargeDateTime] = useState(\"\");\n  const [selectedServices, setSelectedServices] = useState<Service[]>([]);\n\n  // For Comprehensive Bill\n  const [isComprehensiveBillOpen, setIsComprehensiveBillOpen] = useState(false);\n  const [comprehensiveBillData, setComprehensiveBillData] = useState<any>(null);\n  const [isLoadingBill, setIsLoadingBill] = useState(false);\n  const [isOpdVisitDialogOpen, setIsOpdVisitDialogOpen] = useState(false);\n\n  // Check user roles for billing staff restrictions\n  const currentUserRoles = user?.roles || [user?.role]; // Backward compatibility\n  const isBillingStaff = currentUserRoles.includes('billing_staff') && !currentUserRoles.includes('admin') && !currentUserRoles.includes('super_user');\n\n  // Fetch hospital settings for receipts and other uses with proper error handling\n  const {\n    data: hospitalSettings,\n    isLoading: isHospitalSettingsLoading,\n    error: hospitalSettingsError,\n  } = useQuery({\n    queryKey: [\"/api/settings/hospital\"],\n    queryFn: async () => {\n      console.log(\"Fetching hospital settings...\");\n      const response = await fetch(\"/api/settings/hospital\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        console.error(\n          \"Failed to fetch hospital settings:\",\n          response.status,\n          response.statusText,\n        );\n        throw new Error(\"Failed to fetch hospital settings\");\n      }\n      const data = await response.json();\n      console.log(\"Fetched hospital settings data:\", data);\n      return data;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 3,\n    refetchOnMount: true,\n    refetchOnWindowFocus: false,\n  });\n\n  // Create hospital info object from settings - exactly like receipts\n  const hospitalInfo = React.useMemo(() => {\n    console.log(\"=== Hospital Info Creation ===\");\n    console.log(\"Hospital settings in patient detail:\", hospitalSettings);\n    console.log(\"Hospital settings loading:\", isHospitalSettingsLoading);\n    console.log(\"Hospital settings error:\", hospitalSettingsError);\n\n    // Always create hospital info object, preferring saved settings over defaults\n    const info = {\n      name:\n        hospitalSettings?.name || \"Health Care Hospital and Diagnostic Center\",\n      address:\n        hospitalSettings?.address ||\n        \"In front of Maheshwari Garden, Binjhiya, Jabalpur Road, Mandla, Madhya Pradesh - 482001\",\n      phone: hospitalSettings?.phone || \"8889762101, 9826325958\",\n      email: hospitalSettings?.email || \"hospital@healthcare.in\",\n      registrationNumber:\n        hospitalSettings?.registrationNumber || \"NH/3613/JUL-2021\",\n      logo: hospitalSettings?.logoPath || undefined,\n    };\n\n    console.log(\n      \"Final hospital info constructed for comprehensive bill:\",\n      info,\n    );\n    console.log(\"=== End Hospital Info Creation ===\");\n    return info;\n  }, [hospitalSettings, isHospitalSettingsLoading, hospitalSettingsError]);\n\n  // Helper function to determine service type for receipt numbering\n  const getServiceType = (eventType: string, event: any) => {\n    switch (eventType) {\n      case \"service\":\n        // Check if it's OPD service\n        if (\n          event.serviceType === \"opd\" ||\n          event.serviceName === \"OPD Consultation\"\n        ) {\n          return \"opd\";\n        }\n        // Check specific service categories\n        const category = event.category?.toLowerCase();\n        if (\n          category === \"discharge\" ||\n          event.description?.toLowerCase().includes(\"discharge\")\n        ) {\n          return \"discharge\";\n        }\n        if (\n          category === \"room_transfer\" ||\n          event.description?.toLowerCase().includes(\"transfer\")\n        ) {\n          return \"room_transfer\";\n        }\n        return \"service\";\n      case \"pathology\":\n        return \"pathology\";\n      case \"admission\":\n        return \"admission\";\n      case \"payment\":\n        return \"payment\";\n      case \"discount\":\n        return \"discount\";\n      case \"opd_visit\": // Handle OPD visits\n        return \"opd\";\n      default:\n        return eventType;\n    }\n  };\n\n  // Helper function for API requests\n  const apiRequest = async (url: string, options: any) => {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        ...options.headers,\n      },\n      body: options.body ? JSON.stringify(options.body) : undefined,\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n\n    return response.json();\n  };\n\n  // Helper function to get daily count for receipt numbering from API\n  const getDailyCountFromAPI = async (\n    eventType: string,\n    eventDate: string,\n    currentEvent: any,\n  ): Promise<number> => {\n    try {\n      const serviceType = getServiceType(eventType, currentEvent);\n      const response = await fetch(\n        `/api/receipts/daily-count/${serviceType}/${eventDate}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n        },\n      );\n\n      if (!response.ok) {\n        console.error(\"Failed to get daily count from API\");\n        return 1;\n      }\n\n      const data = await response.json();\n      return data.count;\n    } catch (error) {\n      console.error(\"Error fetching daily count:\", error);\n      return 1;\n    }\n  };\n\n  const generateReceiptData = (event: any, eventType: string) => {\n    // Helper function to get doctor name from doctor ID\n    const getDoctorName = () => {\n      // First try to get doctor name from event directly\n      if (event.doctorName && event.doctorName.trim() !== \"\") {\n        return event.doctorName;\n      }\n\n      // Try to get from nested doctor object\n      if (event.doctor?.name) {\n        return event.doctor.name;\n      }\n\n      // Try to resolve doctor ID from the doctors array\n      if (event.doctorId && event.doctorId !== \"\" && event.doctorId !== \"none\" && doctors && doctors.length > 0) {\n        const doctor = doctors.find((d: Doctor) => d.id === event.doctorId);\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      // Try to get from rawData for pathology orders\n      if (eventType === \"pathology\" && event.rawData?.order?.doctorId) {\n        const doctor = doctors.find(\n          (d: Doctor) => d.id === event.rawData.order.doctorId,\n        );\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      // Try to get from rawData for admission events\n      if (eventType === \"admission_event\" && event.rawData?.event?.doctorId) {\n        const doctor = doctors.find(\n          (d: Doctor) => d.id === event.rawData.event.doctorId,\n        );\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      // Try to get from rawData for admission fallback\n      if (eventType === \"admission\" && event.rawData?.admission?.doctorId) {\n        const doctor = doctors.find(\n          (d: Doctor) => d.id === event.rawData.admission.doctorId,\n        );\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      // For OPD visits, use the doctor name from rawData if available\n      if (eventType === \"opd_visit\" && event.rawData?.doctor?.name) {\n        return event.rawData.doctor.name;\n      }\n\n      return \"No Doctor Assigned\";\n    };\n\n    // Handle service batch specially\n    if (eventType === \"service_batch\") {\n      const firstService = event.services[0];\n\n      return {\n        type: \"service\" as const,\n        id: event.receiptNumber,\n        title: `Service Order - ${event.services.length} service${event.services.length > 1 ? 's' : ''}`,\n        date: firstService.sortTimestamp,\n        amount: event.totalCost,\n        description: event.services.map((s: any) => s.serviceName).join(\", \"),\n        patientName: patient?.name || \"Unknown Patient\",\n        patientId: patient?.patientId || \"Unknown ID\",\n        details: {\n          ...firstService,\n          services: event.services,\n          totalCost: event.totalCost,\n          patientAge: patient?.age,\n          patientGender: patient?.gender,\n          doctorName: event.doctorName || getDoctorName(),\n          receiptNumber: event.receiptNumber,\n        },\n      };\n    }\n\n    // Helper function to get receipt number from different sources\n    const getReceiptNumber = () => {\n      // For services, always use the stored receiptNumber\n      if (eventType === \"service\" && event.receiptNumber) {\n        return event.receiptNumber;\n      }\n\n      // For pathology, try to get from order data\n      if (eventType === \"pathology\") {\n        if (event.rawData?.order?.receiptNumber) {\n          return event.rawData.order.receiptNumber;\n        }\n        if (event.order?.receiptNumber) {\n          return event.order.receiptNumber;\n        }\n        if (event.receiptNumber) {\n          return event.receiptNumber;\n        }\n      }\n\n      // For admission events, try to get from admission event data\n      if (eventType === \"admission_event\") {\n        if (event.rawData?.event?.receiptNumber) {\n          return event.rawData.event.receiptNumber;\n        }\n        if (event.receiptNumber) {\n          return event.receiptNumber;\n        }\n      }\n\n      // For admission fallback, try to get from admission data\n      if (eventType === \"admission\" && event.rawData?.admission?.receiptNumber) {\n        return event.rawData.admission.receiptNumber;\n      }\n      if (eventType === \"admission\" && event.receiptNumber) {\n        return event.receiptNumber;\n      }\n\n      // For OPD visits, use the ID as a temporary receipt reference if available\n      if (eventType === \"opd_visit\" && event.id) {\n        return `OPD-${event.id}`;\n      }\n\n      // For other event types, try direct access\n      if (event.receiptNumber) {\n        return event.receiptNumber;\n      }\n\n      return \"RECEIPT-NOT-FOUND\";\n    };\n\n    // Calculate the correct amount based on event type\n    let eventAmount = 0;\n\n    if (eventType === \"opd_visit\") {\n      // For OPD visits, prioritize consultation fee from the event data\n      eventAmount = event.consultationFee || \n                   event.amount || \n                   (event.rawData?.visit?.consultationFee) ||\n                   (event.rawData?.doctor?.consultationFee) || \n                   0;\n    } else {\n      eventAmount = event.amount || event.price || event.totalPrice || 0;\n    }\n\n    // Base receipt data structure\n    const baseReceiptData = {\n      type: (eventType === \"opd_visit\" ? \"service\" : eventType) as\n        | \"service\"\n        | \"pathology\"\n        | \"admission\"\n        | \"payment\"\n        | \"discount\",\n      id: event.id,\n      title: eventType === \"opd_visit\" ? \"OPD Consultation\" : (\n        event.title ||\n        event.serviceName ||\n        event.testName ||\n        event.description ||\n        \"Service\"\n      ),\n      date: event.sortTimestamp,\n      amount: eventAmount,\n      description: eventType === \"opd_visit\" ? \n        `OPD Consultation - ${getDoctorName()}` : (\n        event.description || event.serviceName || event.testName || \"\"\n      ),\n      patientName: patient?.name || \"Unknown Patient\",\n      patientId: patient?.patientId || \"Unknown ID\",\n      details: {\n        ...event,\n        patientAge: patient?.age,\n        patientGender: patient?.gender,\n        doctorName: getDoctorName(),\n        receiptNumber: getReceiptNumber(),\n        consultationFee: eventAmount, // Ensure consultation fee is in details\n        // For OPD visits, add explicit identifiers for receipt title detection\n        ...(eventType === \"opd_visit\" ? {\n          serviceType: \"opd\",\n          serviceName: \"OPD Consultation\",\n          category: \"OPD Consultation\",\n          type: \"opd_visit\"\n        } : {}),\n        // For pathology orders, ensure tests are accessible\n        tests: eventType === \"pathology\" ? (event.tests || event.rawData?.tests || event.order?.tests) : undefined,\n      },\n    };\n\n    return baseReceiptData;\n  };\n\n  // Fetch patient details\n  const { data: patient } = useQuery<Patient>({\n    queryKey: [\"/api/patients\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/patients/${patientId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patient\");\n      return response.json();\n    },\n  });\n\n  // Fetch patient services history\n  const { data: services } = useQuery<PatientService[]>({\n    queryKey: [\"/api/patient-services\", patientId],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/patient-services?patientId=${patientId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch patient services\");\n      return response.json();\n    },\n  });\n\n  // Fetch OPD visits for this patient\n  const { data: opdVisits = [] } = useQuery({\n    queryKey: [\"/api/opd-visits\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/opd-visits?patientId=${patientId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch OPD visits\");\n      return response.json();\n    },\n    refetchInterval: 5000, // Refetch every 5 seconds to get latest visits\n  });\n\n  // Fetch all services for service selection\n  const { data: allServices } = useQuery<Service[]>({\n    // Use Service interface\n    queryKey: [\"/api/services\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/services\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch services\");\n      return response.json();\n    },\n  });\n\n  // Fetch patient admissions history\n  const { data: admissions = [] } = useQuery({\n    queryKey: [\"/api/admissions\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/admissions?patientId=${patientId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patient admissions\");\n      return response.json();\n    },\n  });\n\n  // Fetch pathology orders for this patient\n  const { data: pathologyOrders = [] } = useQuery({\n    queryKey: [\"/api/pathology/patient\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/pathology/patient/${patientId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch pathology orders\");\n      return response.json();\n    },\n    refetchInterval: 5000, // Refetch every 5 seconds to get latest orders\n  });\n\n  // Patient financial summary query\n  const { data: financialSummary, isLoading: isFinancialLoading } = useQuery({\n    queryKey: [\"/api/patients\", patientId, \"financial-summary\"],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/patients/${patientId}/financial-summary`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch financial summary\");\n      return response.json();\n    },\n    enabled: !!patientId,\n    refetchInterval: 10000, // Refetch every 10 seconds for financial updates\n  });\n\n  // Fetch admission events for detailed history\n  const { data: admissionEventsMap = {} } = useQuery({\n    queryKey: [\"/api/admission-events\", patientId],\n    queryFn: async () => {\n      const eventsMap: Record<string, AdmissionEvent[]> = {};\n\n      if (admissions && admissions.length > 0) {\n        await Promise.all(\n          admissions.map(async (admission: Admission) => {\n            try {\n              const response = await fetch(\n                `/api/admissions/${admission.id}/events`,\n                {\n                  headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n                  },\n                },\n              );\n              if (response.ok) {\n                const events = await response.json();\n                eventsMap[admission.id] = events;\n              }\n            } catch (error) {\n              console.error(\n                `Failed to fetch events for admission ${admission.id}:`,\n                error,\n              );\n            }\n          }),\n        );\n      }\n\n      return eventsMap;\n    },\n    enabled: !!admissions && admissions.length > 0,\n  });\n\n  // Fetch doctors for service assignment\n  const { data: doctors = [] } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Fetch room types for admission form\n  const { data: roomTypes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/room-types\"],\n  });\n\n  // Fetch rooms for admission form\n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  // Fetch all current admissions to check room occupancy in real-time\n  const { data: allCurrentAdmissions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/currently-admitted\"],\n  });\n\n  const serviceForm = useForm({\n    resolver: zodResolver(\n      insertPatientServiceSchema.extend({\n        doctorId: z.string().optional(),\n        price: z.coerce.number().min(0, \"Price must be positive\"),\n        selectedServicesCount: z.number().default(0),\n        serviceId: z.string().optional(), // Add serviceId to the form schema\n        serviceType: z.string().optional(), // Make serviceType optional for catalog services\n        serviceName: z.string().optional(), // Make serviceName optional for catalog services\n        consultationFee: z.number().optional(), // Added for OPD consultation fee\n      }),\n    ),\n    defaultValues: {\n      patientId: patientId || \"\",\n      serviceType: \"\",\n      serviceName: \"\",\n      doctorId: \"\",\n      price: 0,\n      quantity: 1,\n      hours: 1,\n      distance: 0,\n      notes: \"\",\n      scheduledDate: new Date().toISOString().split(\"T\")[0],\n      scheduledTime: new Date().toTimeString().slice(0, 5),\n      serviceId: \"\", // Initialize serviceId to empty string\n      selectedServicesCount: 0, // Add selectedServicesCount to default values\n      consultationFee: 0, // Initialize consultationFee\n    },\n  });\n\n  // OPD Visit Form (separate from services)\n  const opdVisitForm = useForm({\n    resolver: zodResolver(z.object({\n      patientId: z.string().min(1),\n      doctorId: z.string().min(1, \"Doctor is required\"),\n      scheduledDate: z.string().min(1, \"Date is required\"),\n      scheduledTime: z.string().min(1, \"Time is required\"),\n      consultationFee: z.number().optional(), // Added for OPD consultation fee\n      symptoms: z.string().optional(),\n    })),\n    defaultValues: {\n      patientId: patientId || \"\",\n      doctorId: \"\",\n      scheduledDate: \"\",\n      scheduledTime: \"\",\n      consultationFee: 0, // Initialize consultationFee\n      symptoms: \"\",\n    },\n  });\n\n  // Fetch system settings for timezone\n  const { data: systemSettings } = useQuery({\n    queryKey: [\"/api/settings/system\"],\n  });\n\n  // Update OPD form date/time when system settings load or timezone changes\n  React.useEffect(() => {\n    if (systemSettings?.timezone && isOpdVisitDialogOpen) {\n      const timezone = systemSettings.timezone;\n      const now = new Date();\n\n      const formatter = new Intl.DateTimeFormat('en-US', {\n        timeZone: timezone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n\n      const parts = formatter.formatToParts(now);\n      const year = parts.find(p => p.type === 'year')?.value;\n      const month = parts.find(p => p.type === 'month')?.value;\n      const day = parts.find(p => p.type === 'day')?.value;\n      const hour = parts.find(p => p.type === 'hour')?.value;\n      const minute = parts.find(p => p.type === 'minute')?.value;\n\n      const currentDate = `${year}-${month}-${day}`;\n      const currentTime = `${hour}:${minute}`;\n\n      opdVisitForm.setValue('scheduledDate', currentDate);\n      opdVisitForm.setValue('scheduledTime', currentTime);\n    }\n  }, [systemSettings?.timezone, isOpdVisitDialogOpen]);\n\n  // Update service form date/time when system settings load or timezone changes\n  React.useEffect(() => {\n    if (systemSettings?.timezone && isServiceDialogOpen) {\n      const timezone = systemSettings.timezone;\n      const now = new Date();\n\n      const formatter = new Intl.DateTimeFormat('en-US', {\n        timeZone: timezone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n\n      const parts = formatter.formatToParts(now);\n      const year = parts.find(p => p.type === 'year')?.value;\n      const month = parts.find(p => p.type === 'month')?.value;\n      const day = parts.find(p => p.type === 'day')?.value;\n      const hour = parts.find(p => p.type === 'hour')?.value;\n      const minute = parts.find(p => p.type === 'minute')?.value;\n\n      const currentDate = `${year}-${month}-${day}`;\n      const currentTime = `${hour}:${minute}`;\n\n      serviceForm.setValue('scheduledDate', currentDate);\n      serviceForm.setValue('scheduledTime', currentTime);\n    }\n  }, [systemSettings?.timezone, isServiceDialogOpen]);\n\n  // Update admission form date/time when system settings load or timezone changes\n  React.useEffect(() => {\n    if (systemSettings?.timezone && isAdmissionDialogOpen) {\n      const timezone = systemSettings.timezone;\n      const now = new Date();\n\n      const formatter = new Intl.DateTimeFormat('en-US', {\n        timeZone: timezone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n\n      const parts = formatter.formatToParts(now);\n      const year = parts.find(p => p.type === 'year')?.value;\n      const month = parts.find(p => p.type === 'month')?.value;\n      const day = parts.find(p => p.type === 'day')?.value;\n      const hour = parts.find(p => p.type === 'hour')?.value;\n      const minute = parts.find(p => p.type === 'minute')?.value;\n\n      const currentDateTime = `${year}-${month}-${day}T${hour}:${minute}`;\n\n      admissionForm.setValue('admissionDate', currentDateTime);\n    }\n  }, [systemSettings?.timezone, isAdmissionDialogOpen]);\n\n  // Update discharge date/time when system settings load or timezone changes\n  React.useEffect(() => {\n    if (systemSettings?.timezone && isDischargeDialogOpen) {\n      const timezone = systemSettings.timezone;\n      const now = new Date();\n\n      const formatter = new Intl.DateTimeFormat('en-US', {\n        timeZone: timezone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n\n      const parts = formatter.formatToParts(now);\n      const year = parts.find(p => p.type === 'year')?.value;\n      const month = parts.find(p => p.type === 'month')?.value;\n      const day = parts.find(p => p.type === 'day')?.value;\n      const hour = parts.find(p => p.type === 'hour')?.value;\n      const minute = parts.find(p => p.type === 'minute')?.value;\n\n      const currentDateTime = `${year}-${month}-${day}T${hour}:${minute}`;\n\n      setDischargeDateTime(currentDateTime);\n    }\n  }, [systemSettings?.timezone, isDischargeDialogOpen]);\n\n  const watchedServiceValues = serviceForm.watch();\n\n  // Sync form fields with component state\n  useEffect(() => {\n    serviceForm.setValue(\"serviceType\", selectedServiceType);\n    serviceForm.setValue(\"selectedServicesCount\", selectedServices.length);\n  }, [selectedServiceType, selectedServices.length]);\n\n  // Calculate billing preview when service or parameters change\n  useEffect(() => {\n    if (\n      selectedCatalogService &&\n      selectedCatalogService.billingType\n    ) {\n      calculateBillingPreview();\n    } else if (selectedServiceType === \"opd\" || selectedServiceType === \"\") {\n      // Reset billing preview if it's OPD or no service type selected\n      setBillingPreview(null);\n    }\n  }, [\n    selectedServiceType,\n    watchedServiceValues.quantity,\n    watchedServiceValues.hours,\n    watchedServiceValues.distance,\n    watchedServiceValues.price,\n    selectedCatalogService,\n  ]);\n\n  const calculateBillingPreview = () => {\n    if (!selectedCatalogService) return;\n\n    let totalAmount = 0;\n    let breakdown = \"\";\n    let quantity = 1;\n\n    switch (selectedCatalogService.billingType) {\n      case \"per_instance\":\n        quantity = watchedServiceValues.quantity || 1;\n        totalAmount = selectedCatalogService.price * quantity;\n        breakdown = `₹${selectedCatalogService.price} × ${quantity} instance${quantity > 1 ? \"s\" : \"\"} = ₹${totalAmount}`;\n        break;\n\n      case \"per_24_hours\":\n        quantity = watchedServiceValues.quantity || 1;\n        totalAmount = selectedCatalogService.price * quantity;\n        breakdown = `₹${selectedCatalogService.price} × ${quantity} day${quantity > 1 ? \"s\" : \"\"} = ₹${totalAmount}`;\n        break;\n\n      case \"per_hour\":\n        quantity = watchedServiceValues.hours || 1;\n        totalAmount = selectedCatalogService.price * quantity;\n        breakdown = `₹${selectedCatalogService.price} × ${quantity} hour${quantity > 1 ? \"s\" : \"\"} = ₹${totalAmount}`;\n        break;\n\n      case \"composite\":\n        const params = selectedCatalogService.billingParameters\n          ? JSON.parse(selectedCatalogService.billingParameters)\n          : {};\n        const fixedCharge = params.fixedCharge || selectedCatalogService.price;\n        const perKmRate = params.perKmRate || 0;\n        const distance = watchedServiceValues.distance || 0;\n\n        const distanceCharge = perKmRate * distance;\n        totalAmount = fixedCharge + distanceCharge;\n        breakdown = `Fixed: ₹${fixedCharge}${distance > 0 ? ` + Distance: ₹${perKmRate} × ${distance}km = ₹${distanceCharge}` : \"\"} = ₹${totalAmount}`;\n        quantity = 1;\n        break;\n\n      case \"variable\":\n        quantity = 1;\n        totalAmount = watchedServiceValues.price || 0; // Use the entered price from the form\n        breakdown = `Variable price: ₹${totalAmount}`;\n        break;\n\n      case \"per_date\":\n        quantity = watchedServiceValues.quantity || 1;\n        totalAmount = selectedCatalogService.price * quantity;\n        breakdown = `₹${selectedCatalogService.price} × ${quantity} date${quantity > 1 ? \"s\" : \"\"} = ₹${totalAmount}`;\n        break;\n\n      default:\n        quantity = watchedServiceValues.quantity || 1;\n        totalAmount = selectedCatalogService.price * quantity;\n        breakdown = `₹${selectedCatalogService.price} × ${quantity} = ₹${totalAmount}`;\n    }\n\n    setBillingPreview({\n      totalAmount,\n      quantity,\n      breakdown,\n      billingType: selectedCatalogService.billingType,\n    });\n\n    // Update the form price field (but not for variable billing to avoid overwriting user input)\n    if (selectedCatalogService.billingType !== \"variable\") {\n      serviceForm.setValue(\"price\", totalAmount);\n    }\n  };\n\n  const admissionForm = useForm({\n    // Remove zodResolver to handle validation manually since reason is now optional\n    defaultValues: {\n      patientId: patientId,\n      doctorId: \"\",\n      currentWardType: \"\",\n      currentRoomNumber: \"\",\n      admissionDate: \"\", // Will be set dynamically when dialog opens\n      reason: \"\",\n      diagnosis: \"\",\n      notes: \"\",\n      dailyCost: 0,\n      initialDeposit: 0,\n    },\n  });\n\n  const roomUpdateForm = useForm({\n    defaultValues: {\n      roomNumber: \"\",\n      wardType: \"\",\n    },\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Generate receipt number before sending to API with correct format\n      const serviceType = getServiceType(\"service\", data[0]); // Assuming data is an array of services\n      const eventDate = new Date(data[0].scheduledDate)\n        .toISOString()\n        .split(\"T\")[0];\n      const count = await getDailyCountFromAPI(\"service\", eventDate, data[0]);\n\n      // Format: YYMMDD-TYPE-NNNN (correct format)\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj\n        .toISOString()\n        .slice(2, 10)\n        .replace(/-/g, \"\")\n        .slice(0, 6);\n\n      let typeCode = \"\";\n      if (serviceType === \"opd\") {\n        typeCode = \"OPD\";\n      } else {\n        typeCode = \"SER\";\n      }\n\n      const receiptNumber = `${yymmdd}-${typeCode}-${String(count).padStart(4, \"0\")}`;\n\n      // Map services to include the generated receipt number and other details\n      const servicesWithReceipt = data.map((service: any) => ({\n        ...service,\n        receiptNumber: receiptNumber,\n        // Include doctorId for OPD services, otherwise null\n        doctorId: service.serviceType === \"opd\" ? service.doctorId : null,\n      }));\n\n      const response = await fetch(\"/api/patient-services/batch\", {\n        // Use batch endpoint\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(servicesWithReceipt),\n      });\n      if (!response.ok) throw new Error(\"Failed to create service\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patient-services\", patientId],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n      setIsServiceDialogOpen(false);\n      setSelectedServiceType(\"\");\n      setSelectedServiceCategory(\"\");\n      setSelectedCatalogService(null);\n      setBillingPreview(null);\n      serviceForm.reset({\n        patientId: patientId || \"\",\n        serviceType: \"\",\n        serviceName: \"\",\n        scheduledDate: \"\",\n        scheduledTime: \"\",\n        doctorId: \"\",\n        serviceId: \"\", // Reset serviceId\n        notes: \"\",\n        price: 0,\n        quantity: 1,\n        hours: 1,\n        distance: 0,\n      });\n      toast({\n        title: \"Service scheduled successfully\",\n        description: \"The service has been added to the patient's schedule.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error scheduling service\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // OPD Visit Creation Mutation\n  const createOpdVisitMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Creating OPD visit with data:\", data);\n      return apiRequest(\"/api/opd-visits\", {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"OPD appointment scheduled successfully!\",\n        className: \"bg-green-50 border-green-200 text-green-800\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/opd-visits\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n      setIsOpdVisitDialogOpen(false);\n      opdVisitForm.reset();\n    },\n    onError: (error: any) => {\n      console.error(\"Error creating OPD visit:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to schedule OPD appointment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Track loading state for admission creation\n  const [isCreatingAdmission, setIsCreatingAdmission] = useState(false);\n\n  const onServiceSubmit = async (data: any) => {\n    try {\n      console.log(\"Submit button clicked\");\n      console.log(\"Form data:\", data);\n\n      // Manual validation for required fields\n      if (!data.patientId) {\n        toast({\n          title: \"Error\",\n          description: \"Patient ID is required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (!data.scheduledDate) {\n        toast({\n          title: \"Error\",\n          description: \"Scheduled date is required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (!data.scheduledTime) {\n        toast({\n          title: \"Error\",\n          description: \"Scheduled time is required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const servicesToCreate = [];\n      const selectedDoctorId = serviceForm.watch(\"doctorId\");\n      const selectedDoctor = doctors.find(\n        (d: Doctor) => d.id === selectedDoctorId,\n      );\n      const consultationFee = selectedDoctor\n        ? selectedDoctor.consultationFee\n        : 0;\n\n      if (selectedServiceType === \"opd\") {\n        // Get selected doctor and consultation fee\n        console.log('Selected Doctor ID from form:', selectedDoctorId);\n\n        if (!selectedDoctorId || selectedDoctorId === \"none\" || selectedDoctorId === \"\" || selectedDoctorId === \"external\") {\n          console.log('No doctor selected for OPD consultation');\n          toast({\n            title: \"Doctor Required\",\n            description: \"Please select a doctor for OPD consultation\",\n            variant: \"destructive\",\n          });\n          return; // Stop execution if no doctor selected for OPD\n        }\n\n        // Validate consultation fee is positive\n        if (!consultationFee || consultationFee <= 0) {\n          console.log('Invalid consultation fee:', consultationFee);\n          toast({\n            title: \"Invalid Fee\",\n            description: \"Consultation fee must be greater than 0. Please select a valid doctor.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        console.log('=== OPD SERVICE CREATION ===');\n        console.log('Selected Doctor ID:', selectedDoctorId);\n        console.log('Consultation Fee:', consultationFee);\n\n        servicesToCreate.push({\n          patientId: patientId,\n          serviceType: \"opd\",\n          serviceName: \"OPD Consultation\",\n          serviceId: \"opd_consultation_service\", // Add a consistent service ID\n          price: consultationFee,\n          quantity: 1,\n          notes: data.notes || \"\",\n          scheduledDate: data.scheduledDate,\n          scheduledTime: data.scheduledTime,\n          status: \"scheduled\",\n          doctorId: selectedDoctorId,\n          billingType: \"per_instance\",\n          calculatedAmount: Number(data.price),\n          billingQuantity: 1,\n        });\n      } else {\n        // Handle selected catalog services\n        if (selectedServices.length > 0) {\n          selectedServices.forEach((service) => {\n            console.log('=== CATALOG SERVICE CREATION ===');\n            console.log('Service:', service.name);\n            console.log('Doctor ID from form:', data.doctorId);\n\n            // Get the actual doctor ID from the form - use same method as OPD\n            const actualDoctorId = serviceForm.watch(\"doctorId\");\n            console.log('Actual doctor ID to use:', actualDoctorId);\n\n            let serviceData: any = {\n              patientId: patientId,\n              serviceType: mapCategoryToServiceType(service.category),\n              serviceName: service.name,\n              serviceId: service.id,\n              price: service.price * (service.quantity || 1),\n              quantity: service.quantity || 1,\n              notes: data.notes,\n              scheduledDate: data.scheduledDate,\n              scheduledTime: data.scheduledTime,\n              status: \"scheduled\",\n              doctorId: actualDoctorId && actualDoctorId !== \"none\" && actualDoctorId !== \"\" ? actualDoctorId : null,\n              billingType: \"per_instance\",\n              calculatedAmount: Number(data.price),\n            };\n\n            console.log('Final service data doctor ID:', serviceData.doctorId);\n\n            // Add smart billing parameters if service has special billing type\n            if (service.billingType) {\n              serviceData.billingType = service.billingType;\n              serviceData.billingQuantity = service.quantity || 1;\n\n              if (service.billingType === \"composite\") {\n                // For composite billing (ambulance), use quantity as distance\n                serviceData.billingParameters = JSON.stringify({\n                  distance: service.quantity || 0,\n                });\n              } else if (service.billingType === \"per_hour\") {\n                serviceData.billingParameters = JSON.stringify({\n                  hours: service.quantity || 1,\n                });\n              } else if (service.billingType === \"variable\") {\n                // For variable billing, use the entered price from form data\n                const variablePrice = data.price || service.price || 0;\n                serviceData.billingParameters = JSON.stringify({\n                  price: variablePrice,\n                });\n              }\n\n              // Calculate billing amount based on service type and quantity\n              if (service.billingType === \"composite\") {\n                const params = service.billingParameters\n                  ? JSON.parse(service.billingParameters)\n                  : {};\n                const fixedCharge = params.fixedCharge || service.price;\n                const perKmRate = params.perKmRate || 0;\n                const distance = service.quantity || 0;\n                const calculatedAmount = fixedCharge + perKmRate * distance;\n\n                serviceData.calculatedAmount = calculatedAmount;\n                serviceData.price = calculatedAmount;\n              } else if (service.billingType === \"per_hour\") {\n                const calculatedAmount = service.price * (service.quantity || 1);\n                serviceData.calculatedAmount = calculatedAmount;\n                serviceData.price = calculatedAmount;\n              } else if (service.billingType === \"variable\") {\n                // For variable billing, use the exact price entered from form (quantity is always 1)\n                const variablePrice = data.price || service.price || 0;\n                serviceData.calculatedAmount = variablePrice;\n                serviceData.price = variablePrice;\n                serviceData.billingQuantity = 1;\n              }\n            }\n\n            servicesToCreate.push(serviceData);\n          });\n        } else if (data.serviceName && data.price > 0) {\n          // Custom service\n          console.log('=== CUSTOM SERVICE CREATION ===');\n          console.log('Doctor ID from form:', data.doctorId);\n\n          // Get the actual doctor ID from the form - use same method as OPD\n          const actualDoctorId = serviceForm.watch(\"doctorId\");\n          console.log('Actual doctor ID to use for custom service:', actualDoctorId);\n\n          servicesToCreate.push({\n            patientId: patientId,\n            serviceType: \"service\",\n            serviceName: data.serviceName,\n            price: data.price,\n            quantity: 1,\n            notes: data.notes,\n            scheduledDate: data.scheduledDate,\n            scheduledTime: data.scheduledTime,\n            status: \"scheduled\",\n            doctorId:\n              actualDoctorId && actualDoctorId !== \"none\" && actualDoctorId !== \"\"\n                ? actualDoctorId\n                : null,\n          });\n\n          console.log('Custom service doctor ID:', servicesToCreate[servicesToCreate.length - 1].doctorId);\n        }\n      }\n\n      // Call the mutation function with the services to create\n      // The createServiceMutation handles the batch or single API call logic internally\n      if (servicesToCreate.length === 0) {\n        toast({\n          title: \"Error\",\n          description: \"No services to create\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Use the createServiceMutation which properly handles isPending state\n      console.log(\"Creating services:\", servicesToCreate);\n      createServiceMutation.mutate(servicesToCreate);\n    } catch (error) {\n      console.error(\"Error in onServiceSubmit:\", error);\n      toast({\n        title: \"Form Submission Error\",\n        description: \"An unexpected error occurred during form submission. Please check your inputs.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onAdmissionSubmit = async (data: any) => {\n    // Validate required fields (reason is now optional)\n    const requiredFields = [\n      \"doctorId\",\n      \"currentWardType\",\n      \"currentRoomNumber\", // Added room number validation\n      \"admissionDate\",\n      \"dailyCost\",\n    ];\n    const missingFields = requiredFields.filter(\n      (field) => !data[field] || data[field] === \"\",\n    );\n\n    if (missingFields.length > 0) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: `Please fill in all required fields: ${missingFields.join(\", \")}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsCreatingAdmission(true);\n\n    try {\n      // Create admission first\n      const admissionData = {\n        ...data,\n        admissionId: `ADM-${Date.now()}`,\n      };\n\n      const admissionResult = await apiRequest(\"/api/admissions\", {\n        method: \"POST\",\n        body: admissionData,\n      });\n\n      // Create selected admission services\n      if (selectedServices.length > 0) {\n        const servicesToCreate = [];\n        const selectedDoctorId = data.doctorId;\n\n        for (const service of selectedServices) {\n          servicesToCreate.push({\n            patientId: patientId,\n            serviceType: \"admission\",\n            serviceName: service.name,\n            serviceId: service.id,\n            price: service.price,\n            quantity: 1,\n            notes: `Admission service - ${service.name}`,\n            scheduledDate: data.admissionDate.split('T')[0], // Extract date part\n            scheduledTime: data.admissionDate.split('T')[1] || \"00:00\", // Extract time part\n            status: \"scheduled\",\n            doctorId: selectedDoctorId,\n            billingType: service.billingType || \"per_instance\",\n            calculatedAmount: service.price,\n            billingQuantity: 1,\n          });\n        }\n\n        // Create services if any selected\n        if (servicesToCreate.length > 0) {\n          if (servicesToCreate.length === 1) {\n            await apiRequest(\"/api/patient-services\", {\n              method: \"POST\",\n              body: servicesToCreate[0],\n            });\n          } else {\n            await apiRequest(\"/api/patient-services/batch\", {\n              method: \"POST\",\n              body: servicesToCreate,\n            });\n          }\n        }\n      }\n\n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\", patientId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patient-services\", patientId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n\n      setIsAdmissionDialogOpen(false);\n      setSelectedServices([]); // Clear selected services\n      setSelectedServiceSearchQuery(\"\"); // Clear search\n      admissionForm.reset();\n\n      toast({\n        title: \"Admission created successfully\",\n        description: `Patient admitted${selectedServices.length > 0 ? ` with ${selectedServices.length} admission service(s)` : \"\"}.`,\n      });\n\n    } catch (error: any) {\n      console.error(\"Admission creation error:\", error);\n\n      // Handle room occupancy error specifically\n      let errorMessage = \"Please try again.\";\n      if (error.message && error.message.includes(\"already occupied\")) {\n        errorMessage = error.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      toast({\n        title: \"Error creating admission\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsCreatingAdmission(false);\n    }\n  };\n\n  const dischargePatientMutation = useMutation({\n    mutationFn: async (data: {\n      currentAdmissionId: string;\n      dischargeDateTime: string;\n    }) => {\n      const response = await fetch(\n        `/api/admissions/${data.currentAdmissionId}/discharge`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n          body: JSON.stringify({ dischargeDateTime: data.dischargeDateTime }),\n        },\n      );\n\n      if (!response.ok) throw new Error(\"Failed to discharge patient\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admission-events\"] });\n      setIsDischargeDialogOpen(false);\n      setDischargeDateTime(\"\"); // Reset the date/time state\n      toast({\n        title: \"Patient discharged successfully\",\n        description:\n          \"The patient has been discharged and the event has been recorded.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error discharging patient\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRoomMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const currentAdmission = admissions?.find(\n        (adm: any) => adm.status === \"admitted\",\n      );\n      if (!currentAdmission) throw new Error(\"No active admission found\");\n\n      const response = await fetch(\n        `/api/admissions/${currentAdmission.id}/transfer`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n          body: JSON.stringify({\n            roomNumber: data.roomNumber,\n            wardType: data.wardType,\n          }),\n        },\n      );\n\n      if (!response.ok) throw new Error(\"Failed to transfer room\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admission-events\"] });\n      setIsRoomUpdateDialogOpen(false);\n      roomUpdateForm.reset();\n      toast({\n        title: \"Room transfer completed\",\n        description: \"Patient has been transferred to the new room.\",\n      });\n    },\n  });\n\n  const addPaymentMutation = useMutation({\n    mutationFn: async (data: {\n      amount: number;\n      paymentMethod: string;\n      reason?: string;\n    }) => {\n      const response = await fetch(`/api/patients/${patientId}/payments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({\n          amount: data.amount,\n          paymentMethod: data.paymentMethod,\n          reason: data.reason || \"Payment\",\n          paymentDate: new Date().toISOString(),\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to add payment\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patients\", patientId, \"financial-summary\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patients\", patientId, \"payments\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n      setIsPaymentDialogOpen(false);\n      setPaymentAmount(\"\");\n      setSelectedAdmissionForPayment(\"\");\n      toast({\n        title: \"Payment added successfully\",\n        description: \"The payment has been recorded.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error adding payment\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addDiscountMutation = useMutation({\n    mutationFn: async (data: {\n      amount: number;\n      reason: string;\n      discountType?: string;\n    }) => {\n      const response = await fetch(`/api/patients/${patientId}/discounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({\n          amount: data.amount,\n          reason: data.reason,\n          discountType: data.discountType || \"manual\",\n          discountDate: new Date().toISOString(),\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to add discount\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patients\", patientId, \"financial-summary\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patients\", patientId, \"discounts\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n      setIsDiscountDialogOpen(false);\n      setDiscountAmount(\"\");\n      setDiscountReason(\"\");\n      toast({\n        title: \"Discount added successfully\",\n        description: \"The discount has been applied.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error adding discount\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onDischargePatient = (dischargeDateTime: string) => {\n    const currentAdmission = admissions?.find(\n      (adm: any) => adm.status === \"admitted\",\n    );\n    if (!currentAdmission) {\n      toast({\n        title: \"Error\",\n        description: \"No active admission found to discharge.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!dischargeDateTime) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a discharge date and time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    dischargePatientMutation.mutate({\n      currentAdmissionId: currentAdmission.id,\n      dischargeDateTime,\n    });\n  };\n\n  const onRoomUpdate = (data: any) => {\n    // Validate required fields\n    const requiredFields = [\"wardType\", \"roomNumber\"];\n    const missingFields = requiredFields.filter(\n      (field) => !data[field] || data[field] === \"\",\n    );\n\n    if (missingFields.length > 0) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: `Please fill in all required fields: ${missingFields.join(\", \")}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateRoomMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"in-progress\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"scheduled\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Service categories mapping (matching service management)\n  const serviceCategories = [\n    { key: \"diagnostics\", label: \"Diagnostic Services\", icon: Heart },\n    { key: \"procedures\", label: \"Medical Procedures\", icon: Stethoscope },\n    { key: \"operations\", label: \"Surgical Operations\", icon: X },\n    { key: \"consultation\", label: \"Consultation\", icon: Calendar }, // Added Consultation category\n    { key: \"misc\", label: \"Miscellaneous Services\", icon: Settings },\n  ];\n\n  // Filter services by category and search query\n  const getFilteredServices = (category: string) => {\n    if (!allServices) return [];\n\n    let filtered = allServices.filter((s) => s.isActive);\n\n    // Exclude pathology services from general service selection\n    filtered = filtered.filter((s) => s.category !== \"pathology\");\n\n    // Filter by category\n    if (category && category !== \"all\") {\n      filtered = filtered.filter((s) => s.category === category);\n    }\n\n    // Filter by search query\n    if (selectedServiceSearchQuery.trim()) {\n      filtered = filtered.filter(\n        (s) =>\n          s.name.toLowerCase().includes(selectedServiceSearchQuery.toLowerCase()) ||\n          (s.description &&\n            s.description\n              .toLowerCase()\n              .includes(selectedServiceSearchQuery.toLowerCase())),\n      );\n    }\n\n    return filtered;\n  };\n\n  // Map service categories to valid database service types\n  const mapCategoryToServiceType = (category: string) => {\n    switch (category) {\n      case \"diagnostics\":\n        return \"diagnostic\";\n      case \"procedures\":\n        return \"procedure\";\n      case \"operations\":\n        return \"operation\";\n      case \"consultation\":\n        return \"opd\";\n      case \"misc\":\n        return \"service\";\n      default:\n        return \"service\";\n    }\n  };\n\n  const openServiceDialog = (serviceType: string) => {\n    // Clear all service-related state first and reset dialog\n    setIsServiceDialogOpen(false); // Close first to ensure clean state\n    setSelectedServices([]);\n    setSelectedServiceType(serviceType);\n    setSelectedServiceCategory(\"\");\n    setSelectedServiceSearchQuery(\"\"); // Clear search query\n    setSelectedCatalogService(null);\n    setBillingPreview(null);\n\n    // Set the current time as default\n    const now = new Date();\n    const timeString = now.toTimeString().slice(0, 5); // HH:MM format\n    const currentDate = now.toISOString().split('T')[0];\n\n    // Reset form but preserve doctor selection if it exists\n    const currentDoctorId = serviceForm.getValues(\"doctorId\");\n\n    serviceForm.reset({\n      patientId: patientId || \"\",\n      serviceType: serviceType,\n      serviceName: serviceType === \"opd\" ? \"OPD Consultation\" : \"\", // Default to OPD Consultation for OPD\n      scheduledDate: currentDate,\n      scheduledTime: timeString,\n      doctorId: currentDoctorId || \"\", // Preserve existing doctor selection\n      serviceId: \"\",\n      notes: \"\",\n      price: 0,\n      quantity: 1,\n      hours: 1,\n      distance: 0,\n    });\n\n    // Use setTimeout to ensure state is cleared before opening\n    setTimeout(() => {\n      setIsServiceDialogOpen(true);\n    }, 10);\n  };\n\n  // Function to open the comprehensive bill dialog\n  const handleOpenComprehensiveBill = async () => {\n    if (!patient) {\n      toast({\n        title: \"Error\",\n        description:\n          \"Patient data not loaded yet. Please wait a moment and try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Wait for hospital settings to load before generating bill\n    if (isHospitalSettingsLoading) {\n      toast({\n        title: \"Loading...\",\n        description: \"Please wait for hospital settings to load.\",\n      });\n      return;\n    }\n\n    if (hospitalSettingsError) {\n      console.warn(\n        \"Hospital settings error, proceeding with defaults:\",\n        hospitalSettingsError,\n      );\n      toast({\n        title: \"Warning\",\n        description:\n          \"Hospital settings could not be loaded. Using default values.\",\n        variant: \"destructive\",\n      });\n    }\n\n    try {\n      setIsLoadingBill(true);\n\n      console.log(\"=== Comprehensive Bill Generation ===\");\n      console.log(\"Patient ID:\", patient.id);\n      console.log(\"Hospital info being passed:\", hospitalInfo);\n\n      const response = await fetch(\n        `/api/patients/${patient.id}/comprehensive-bill`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n          },\n        },\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\n          \"Comprehensive bill API error:\",\n          response.status,\n          errorText,\n        );\n        throw new Error(\n          `Failed to fetch comprehensive bill: ${response.status}`,\n        );\n      }\n\n      const billData = await response.json();\n      console.log(\"Comprehensive bill data received:\", billData);\n      console.log(\"=== End Comprehensive Bill Generation ===\");\n\n      setComprehensiveBillData(billData);\n      setIsComprehensiveBillOpen(true);\n    } catch (error) {\n      console.error(\"Error fetching comprehensive bill:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate comprehensive bill\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoadingBill(false);\n    }\n  };\n\n  if (!patient) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        Loading patient details...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar\n        title={`Patient: ${patient.name}`}\n        actions={\n          <Button\n            onClick={handleOpenComprehensiveBill}\n            disabled={isLoadingBill || isHospitalSettingsLoading}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-comprehensive-bill\"\n          >\n            {isLoadingBill || isHospitalSettingsLoading ? (\n              isHospitalSettingsLoading ? (\n                \"Loading Settings...\"\n              ) : (\n                \"Generating...\"\n              )\n            ) : (\n              <>\n                <FileText className=\"h-4 w-4\" />\n                Comprehensive Bill\n              </>\n            )}\n          </Button>\n        }\n      />\n\n      <div className=\"p-6\">\n        {/* Patient Info Header */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Patient Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-3 gap-6\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Name</p>\n                <p className=\"font-medium\">{patient.name}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Age</p>\n                <p className=\"font-medium\">{patient.age} years</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Gender</p>\n                <p className=\"font-medium capitalize\">{patient.gender}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Phone</p>\n                <p className=\"font-medium\">{patient.phone}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Patient ID</p>\n                <p className=\"font-medium\">{patient.patientId}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Emergency Contact\n                </p>\n                <p className=\"font-medium\">\n                  {patient.emergencyContact || \"N/A\"}\n                </p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-medium\">{patient.email || \"N/A\"}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Address</p>\n                <p className=\"font-medium\">{patient.address || \"N/A\"}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Room No</p>\n                <p className=\"font-medium\">\n                  {(() => {\n                    const currentAdmission = admissions?.find(\n                      (adm: any) => adm.status === \"admitted\",\n                    );\n                    return currentAdmission?.currentRoomNumber || \"N/A\";\n                  })()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions - Hidden for billing staff */}\n        {!isBillingStaff && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-3\">\n                <Button\n                  onClick={() => {\n                    console.log(\"OPD button clicked\");\n                    setIsOpdVisitDialogOpen(true);\n                    opdVisitForm.reset({\n                      patientId: patientId || \"\",\n                      doctorId: \"\",\n                      scheduledDate: \"\",\n                      scheduledTime: \"\",\n                      consultationFee: 0,\n                      symptoms: \"\",\n                    });\n                  }}\n                  className=\"flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white\"\n                  data-testid=\"button-schedule-opd\"\n                >\n                  <Stethoscope className=\"h-4 w-4\" />\n                  Schedule OPD\n                </Button>\n\n                <Button\n                  onClick={() =>\n                    navigate(\n                      `/pathology?patientId=${patientId}&patientName=${encodeURIComponent(patient?.name || \"\")}`,\n                    )\n                  }\n                  className=\"flex items-center gap-2 bg-pink-600 hover:bg-pink-700 text-white\"\n                  data-testid=\"button-pathology-tests\"\n                >\n                  <TestTube className=\"h-4 w-4\" />\n                  Order Pathology Tests\n                </Button>\n\n                <Button\n                  onClick={() => {\n                    // Clear all service-related state first and close dialog to reset\n                    setIsServiceDialogOpen(false);\n                    setSelectedServices([]);\n                    setSelectedServiceType(\"\");\n                    setSelectedServiceCategory(\"\");\n                    setSelectedServiceSearchQuery(\"\");\n                    setSelectedCatalogService(null); // Reset selected service\n                    setBillingPreview(null); // Reset billing preview\n\n                    // Set current LOCAL date and time when opening service dialog\n                    const now = new Date();\n                    const currentDate =\n                      now.getFullYear() +\n                      \"-\" +\n                      String(now.getMonth() + 1).padStart(2, \"0\") +\n                      \"-\" +\n                      String(now.getDate()).padStart(2, \"0\");\n                    const currentTime =\n                      String(now.getHours()).padStart(2, \"0\") +\n                      \":\" +\n                      String(now.getMinutes()).padStart(2, \"0\");\n\n                    // Reset form completely\n                    serviceForm.reset({\n                      patientId: patientId || \"\",\n                      serviceType: \"\",\n                      serviceName: \"\",\n                      scheduledDate: currentDate,\n                      scheduledTime: currentTime,\n                      doctorId: \"\",\n                      notes: \"\",\n                      price: 0,\n                      quantity: 1,\n                      hours: 1,\n                      distance: 0,\n                    });\n\n                    // Use setTimeout to ensure state is cleared before opening\n                    setTimeout(() => {\n                      setIsServiceDialogOpen(true);\n                    }, 10);\n                  }}\n                  className=\"flex items-center gap-2 bg-purple-600 hover:bg-purple-700 text-white\"\n                  data-testid=\"button-add-medical-service\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Service\n                </Button>\n\n                {/* Admission/Discharge Button */}\n                {(() => {\n                  const currentAdmission = admissions?.find(\n                    (adm: any) => adm.status === \"admitted\",\n                  );\n\n                  if (currentAdmission) {\n                    // Patient is admitted - show discharge button\n                    return (\n                      <Button\n                        onClick={() => {\n                          // Set current LOCAL date and time when opening discharge dialog\n                          const now = new Date();\n                          const currentDateTime =\n                            now.getFullYear() +\n                            \"-\" +\n                            String(now.getMonth() + 1).padStart(2, \"0\") +\n                            \"-\" +\n                            String(now.getDate()).padStart(2, \"0\") +\n                            \"T\" +\n                            String(now.getHours()).padStart(2, \"0\") +\n                            \":\" +\n                            String(now.getMinutes()).padStart(2, \"0\");\n\n                          setDischargeDateTime(currentDateTime);\n                          setIsDischargeDialogOpen(true);\n                        }}\n                        className=\"flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white\"\n                        data-testid=\"button-discharge-patient\"\n                      >\n                        <Bed className=\"h-4 w-4\" />\n                        Discharge Patient\n                      </Button>\n                    );\n                  } else {\n                    // Patient is not admitted - show admit button\n                    return (\n                      <Button\n                        onClick={() => {\n                          // Set current LOCAL date and time when opening admission dialog\n                          const now = new Date();\n                          const currentDateTime =\n                            now.getFullYear() +\n                            \"-\" +\n                            String(now.getMonth() + 1).padStart(2, \"0\") +\n                            \"-\" +\n                            String(now.getDate()).padStart(2, \"0\") +\n                            \"T\" +\n                            String(now.getHours()).padStart(2, \"0\") +\n                            \":\" +\n                            String(now.getMinutes()).padStart(2, \"0\");\n\n                          admissionForm.setValue(\n                            \"admissionDate\",\n                            currentDateTime,\n                          );\n                          setIsAdmissionDialogOpen(true);\n                        }}\n                        className=\"flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white\"\n                        data-testid=\"button-admit-patient\"\n                      >\n                        <Bed className=\"h-4 w-4\" />\n                        Admit Patient\n                      </Button>\n                    );\n                  }\n                })()}\n\n                {/* Smart Billing Button is removed as its functionality is integrated into \"Add Service\" */}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Financial Monitoring */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                Financial Summary\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {/* Hide payment and discount buttons for receptionist users */}\n                {(() => {\n                  // Get user roles with fallback to single role for backward compatibility\n                  const userRoles = user?.roles || (user?.role ? [user.role] : []);\n                  return !userRoles.includes('receptionist');\n                })() && (\n                  <>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => {\n                        setDiscountAmount(\"\");\n                        setDiscountReason(\"\");\n                        setIsDiscountDialogOpen(true);\n                      }}\n                      className=\"flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white\"\n                      data-testid=\"button-add-discount\"\n                    >\n                      <Minus className=\"h-4 w-4\" />\n                      Add Discount\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => {\n                        setPaymentAmount(\"\");\n                        setSelectedAdmissionForPayment(\"\");\n                        setIsPaymentDialogOpen(true);\n                      }}\n                      className=\"flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white\"\n                      data-testid=\"button-add-payment\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      Add Payment\n                    </Button>\n                  </>\n                )}\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">\n                  Total Charges\n                </p>\n                <p className=\"text-2xl font-bold text-blue-700\">\n                  {isFinancialLoading ? (\n                    <span className=\"text-sm\">Loading...</span>\n                  ) : (\n                    `₹${(financialSummary?.totalCharges || 0).toLocaleString()}`\n                  )}\n                </p>\n              </div>\n\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Paid</p>\n                <p className=\"text-2xl font-bold text-green-700\">\n                  {isFinancialLoading ? (\n                    <span className=\"text-sm\">Loading...</span>\n                  ) : (\n                    `₹${(financialSummary?.totalPaid || 0).toLocaleString()}`\n                  )}\n                </p>\n              </div>\n\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Discounts</p>\n                <p className=\"text-2xl font-bold text-purple-700\">\n                  {isFinancialLoading ? (\n                    <span className=\"text-sm\">Loading...</span>\n                  ) : (\n                    `₹${(financialSummary?.totalDiscounts || 0).toLocaleString()}`\n                  )}\n                </p>\n              </div>\n\n              <div\n                className={`text-center p-4 rounded-lg ${(financialSummary?.balance || 0) < 0 ? \"bg-red-50\" : \"bg-orange-50\"}`}\n              >\n                <p className=\"text-sm text-muted-foreground mb-1\">Balance</p>\n                <p\n                  className={`text-2xl font-bold ${(financialSummary?.balance || 0) < 0 ? \"text-red-700\" : \"text-orange-700\"}`}\n                >\n                  {isFinancialLoading ? (\n                    <span className=\"text-sm\">Loading...</span>\n                  ) : (\n                    `₹${(financialSummary?.balance || 0).toLocaleString()}`\n                  )}\n                </p>\n                {(financialSummary?.balance || 0) < 0 && (\n                  <p className=\"text-xs text-red-600 mt-1\">\n                    Hospital owes patient\n                  </p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Patient History Tabs */}\n        <Tabs\n          defaultValue={\n            window.location.hash === \"#pathology\" ? \"pathology\" : \"opd\"\n          }\n          className=\"space-y-4\"\n        >\n          <TabsList>\n            <TabsTrigger value=\"opd\">OPD</TabsTrigger>\n            <TabsTrigger value=\"pathology\">Pathology</TabsTrigger>\n            <TabsTrigger value=\"admissions\">Admissions</TabsTrigger>\n            <TabsTrigger value=\"services\">Services</TabsTrigger>\n            <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"opd\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>OPD Consultation History</CardTitle>\n                <Button\n                  onClick={() => {\n                    setIsOpdVisitDialogOpen(true);\n                    opdVisitForm.reset({\n                      patientId: patientId || \"\",\n                      doctorId: \"\",\n                      scheduledDate: \"\",\n                      scheduledTime: \"\",\n                      consultationFee: 0,\n                      symptoms: \"\",\n                    });\n                  }}\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-schedule-opd\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Schedule OPD\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {opdVisits && opdVisits.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Doctor</TableHead>\n                        <TableHead>Scheduled Date</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Symptoms</TableHead>\n                        <TableHead>Fee</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {opdVisits\n                        .sort((a: any, b: any) => {\n                          // Sort by scheduled date descending (latest first)\n                          const dateA = new Date(a.scheduledDate || a.createdAt);\n                          const dateB = new Date(b.scheduledDate || b.createdAt);\n                          return dateB.getTime() - dateA.getTime();\n                        })\n                        .map((visit: any) => {\n                        // Find doctor details\n                        const doctor = doctors?.find(\n                          (d: Doctor) => d.id === visit.doctorId,\n                        );\n                        const doctorName = doctor ? doctor.name : \"Unknown Doctor\";\n                        const consultationFee = doctor ? doctor.consultationFee : 0;\n\n                        return (\n                          <TableRow key={visit.id}>\n                            <TableCell className=\"font-medium\">\n                              {doctorName}\n                              {doctor && (\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {doctor.specialization}\n                                </div>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {(() => {\n                                // Format date and time using configured timezone\n                                if (!visit.scheduledDate) return \"N/A\";\n\n                                // The scheduledDate and scheduledTime are already in UTC from the database\n                                // We just need to display them in the configured timezone\n                                if (!visit.scheduledTime) {\n                                  return formatDate(visit.scheduledDate);\n                                }\n\n                                // Combine date and time for display\n                                const dateDisplay = formatDate(visit.scheduledDate);\n                                const timeDisplay = formatTime(`${visit.scheduledDate}T${visit.scheduledTime}:00`);\n\n                                return (\n                                  <>\n                                    {dateDisplay}\n                                    <span className=\"text-muted-foreground ml-2\">\n                                      at {timeDisplay}\n                                    </span>\n                                  </>\n                                );\n                              })()}\n                            </TableCell>\n                            <TableCell>\n                              <Badge className={getStatusColor(visit.status)}>\n                                {visit.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {visit.symptoms || \"No symptoms noted\"}\n                            </TableCell>\n                            <TableCell>₹{visit.consultationFee || consultationFee}</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Stethoscope className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      No OPD consultations scheduled\n                    </p>\n                    <Button\n                      onClick={() => {\n                        setIsOpdVisitDialogOpen(true);\n                        opdVisitForm.reset({\n                          patientId: patientId || \"\",\n                          doctorId: \"\",\n                          scheduledDate: \"\",\n                          scheduledTime: \"\",\n                          consultationFee: 0,\n                          symptoms: \"\",\n                        });\n                      }}\n                      className=\"mt-4\"\n                    >\n                      Schedule First OPD Consultation\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n\n\n          <TabsContent value=\"services\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Service History</CardTitle>\n                <Button\n                  onClick={() => {\n                    // Clear all service-related state first and close dialog to reset\n                    setIsServiceDialogOpen(false);\n                    setSelectedServices([]); // Clear selected services\n                    setSelectedServiceType(\"\");\n                    setSelectedServiceCategory(\"\");\n                    setSelectedServiceSearchQuery(\"\"); // Clear search query\n                    setSelectedCatalogService(null); // Reset selected service\n                    setBillingPreview(null); // Reset billing preview\n\n                    // Set current LOCAL date and time when opening any service dialog\n                    const now = new Date();\n                    const currentDate =\n                      now.getFullYear() +\n                      \"-\" +\n                      String(now.getMonth() + 1).padStart(2, \"0\") +\n                      \"-\" +\n                      String(now.getDate()).padStart(2, \"0\");\n                    const currentTime =\n                      String(now.getHours()).padStart(2, \"0\") +\n                      \":\" +\n                      String(now.getMinutes()).padStart(2, \"0\");\n\n                    // Reset form completely\n                    serviceForm.reset({\n                      patientId: patientId || \"\",\n                      serviceType: \"\",\n                      serviceName: \"\",\n                      scheduledDate: currentDate,\n                      scheduledTime: currentTime,\n                      doctorId: \"\",\n                      notes: \"\",\n                      price: 0,\n                      quantity: 1,\n                      hours: 1,\n                      distance: 0,\n                    });\n\n                    // Use setTimeout to ensure state is cleared before opening\n                    setTimeout(() => {\n                      setIsServiceDialogOpen(true);\n                    }, 10);\n                  }}\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-add-service\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Service\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {services && services.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Service Name</TableHead>\n                        <TableHead>Doctor</TableHead>\n                        <TableHead>Scheduled Date</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Order No.</TableHead>\n                        <TableHead className=\"text-right\">Cost</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {services\n                        .sort((a: any, b: any) => {\n                          // Sort by scheduled date descending (latest first)\n                          const dateA = new Date(a.scheduledDate || a.createdAt);\n                          const dateB = new Date(b.scheduledDate || b.createdAt);\n                          return dateB.getTime() - dateA.getTime();\n                        })\n                        .map((service: any) => {\n                          // Determine doctor name with robust logic\n                          let doctorName = \"No Doctor Assigned\";\n\n                          // Check if doctorName is directly available from the joined query\n                          if (service.doctorName && service.doctorName.trim() !== \"\") {\n                            doctorName = service.doctorName;\n                          } else if (service.doctorId && service.doctorId !== \"\" && service.doctorId !== \"none\" && service.doctorId !== null) {\n                            // Fallback to finding doctor in the doctors array\n                            const doctor = doctors?.find((d: Doctor) => d.id === service.doctorId);\n                            if (doctor) {\n                              doctorName = doctor.name;\n                            } else {\n                              doctorName = \"Unknown Doctor\";\n                            }\n                          }\n\n                          return (\n                            <TableRow key={service.id}>\n                              <TableCell className=\"font-medium\">\n                                {service.serviceName}\n                                {service.notes && (\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    {service.notes}\n                                  </div>\n                                )}\n                              </TableCell>\n                              <TableCell>{doctorName}</TableCell>\n                              <TableCell>\n                                {(() => {\n                                  // Format date and time using configured timezone\n                                  if (!service.scheduledDate) return \"N/A\";\n\n                                  // The scheduledDate and scheduledTime are already in the correct format\n                                  // We just need to display them in the configured timezone\n                                  if (!service.scheduledTime) {\n                                    return formatDate(service.scheduledDate);\n                                  }\n\n                                  // Combine date and time for display (without adding Z to avoid timezone shift)\n                                  const dateDisplay = formatDate(service.scheduledDate);\n                                  const timeDisplay = formatTime(`${service.scheduledDate}T${service.scheduledTime}:00`);\n\n                                  return (\n                                    <>\n                                      {dateDisplay}\n                                      <span className=\"text-muted-foreground ml-2\">\n                                        at {timeDisplay}\n                                      </span>\n                                    </>\n                                  );\n                                })()}\n                              </TableCell>\n                              <TableCell>\n                                <Badge className={getStatusColor(service.status || \"scheduled\")}>\n                                  {service.status || \"scheduled\"}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                <span className=\"text-sm text-muted-foreground\">\n                                  {service.orderId || \"N/A\"}\n                                </span>\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                ₹{service.calculatedAmount || service.price || 0}\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Stethoscope className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      No services scheduled\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"admissions\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Admission History</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  {(() => {\n                    // Check if patient is currently admitted\n                    const currentAdmission = admissions?.find(\n                      (adm: any) => adm.status === \"admitted\",\n                    );\n\n                    if (currentAdmission) {\n                      return (\n                        <>\n                          <div className=\"flex items-center gap-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg text-sm\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                            Admitted - Room {currentAdmission.currentRoomNumber}\n                          </div>\n                          {!isBillingStaff && (\n                            <Button\n                              onClick={() => setIsDischargeDialogOpen(true)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex items-center gap-2 text-red-600 hover:text-red-700\"\n                              data-testid=\"button-discharge-patient\"\n                            >\n                              <Minus className=\"h-4 w-4\" />\n                              Discharge Patient\n                            </Button>\n                          )}\n                          {!isBillingStaff && (\n                            <Button\n                              onClick={() => setIsRoomUpdateDialogOpen(true)}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"flex items-center gap-2\"\n                              data-testid=\"button-update-room\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                              Update Room\n                            </Button>\n                          )}\n                        </>\n                      );\n                    } else {\n                      // Patient is not admitted - show admit button\n                      return (\n                        !isBillingStaff && (\n                          <Button\n                            onClick={() => {\n                              // Set current LOCAL date and time when opening admission dialog\n                              const now = new Date();\n                              const currentDateTime =\n                                now.getFullYear() +\n                                \"-\" +\n                                String(now.getMonth() + 1).padStart(2, \"0\") +\n                                \"-\" +\n                                String(now.getDate()).padStart(2, \"0\") +\n                                \"T\" +\n                                String(now.getHours()).padStart(2, \"0\") +\n                                \":\" +\n                                String(now.getMinutes()).padStart(2, \"0\");\n\n                              admissionForm.setValue(\n                                \"admissionDate\",\n                                currentDateTime,\n                              );\n                              setIsAdmissionDialogOpen(true);\n                            }}\n                            size=\"sm\"\n                            className=\"flex items-center gap-2\"\n                            data-testid=\"button-add-admission\"\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                            New Admission\n                          </Button>\n                        )\n                      );\n                    }\n                  })()}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {admissions && admissions.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {admissions.map((admission: any) => {\n                      const events = admissionEventsMap[admission.id] || [];\n                      const doctor = doctors.find(\n                        (d: Doctor) => d.id === admission.doctorId,\n                      );\n\n                      return (\n                        <div\n                          key={admission.id}\n                          className=\"border rounded-lg p-4\"\n                        >\n                          {/* Admission Episode Header */}\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center gap-4\">\n                              <h3 className=\"font-semibold text-lg\">\n                                {admission.admissionId}\n                              </h3>\n                              <Badge\n                                className={\n                                  admission.status === \"admitted\"\n                                    ? \"bg-green-100 text-green-800\"\n                                    : \"bg-gray-100 text-gray-800\"\n                                }\n                                variant=\"secondary\"\n                              >\n                                {admission.status}\n                              </Badge>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {doctor ? doctor.name : \"No Doctor Assigned\"}\n                            </div>\n                          </div>\n\n                          {/* Admission Summary */}\n                          <div className=\"grid grid-cols-3 gap-4 mb-4 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">\n                                Current Room:\n                              </span>\n                              <div className=\"font-medium\">\n                                {admission.currentWardType &&\n                                admission.currentRoomNumber\n                                  ? `${admission.currentWardType} (${admission.currentRoomNumber})`\n                                  : \"Not assigned\"}\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">\n                                Admission Date:\n                              </span>\n                              <div className=\"font-medium\">\n                                {formatDateTime(admission.admissionDate)}\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">\n                                {admission.status === \"discharged\"\n                                  ? \"Discharge Date:\"\n                                  : \"Days Admitted:\"}\n                              </span>\n                              <div className=\"font-medium\">\n                                {admission.dischargeDate\n                                  ? formatDateTime(admission.dischargeDate)\n                                  : calcStayDays(admission.admissionDate)}\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Event Timeline */}\n                          {events.length > 0 && (\n                            <div>\n                              <h4 className=\"font-medium mb-2 text-sm text-muted-foreground\">\n                                Event History:\n                              </h4>\n                              <div className=\"space-y-2\">\n                                {events.map((event: AdmissionEvent) => (\n                                  <div\n                                    key={event.id}\n                                    className=\"flex items-start gap-3 text-sm\"\n                                  >\n                                    <div\n                                      className={`w-2 h-2 rounded-full mt-2 ${\n                                        event.eventType === \"admit\"\n                                          ? \"bg-green-500\"\n                                          : event.eventType === \"room_change\"\n                                            ? \"bg-blue-500\"\n                                            : \"bg-gray-500\"\n                                      }`}\n                                    />\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <span className=\"font-medium capitalize\">\n                                          {event.eventType.replace(\"_\", \" \")}\n                                          {event.roomNumber &&\n                                            event.wardType &&\n                                            ` - ${event.wardType} (${event.roomNumber})`}\n                                        </span>\n                                        <span className=\"text-muted-foreground text-xs\">\n                                          {formatDateTime(event.eventTime)}\n                                        </span>\n                                      </div>\n                                      {event.notes && (\n                                        <div className=\"text-muted-foreground text-xs mt-1\">\n                                          {event.notes}\n                                        </div>\n                                      )}\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      No admissions recorded\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"pathology\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Pathology Tests</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {(() => {\n                  // Extract individual tests from all orders\n                  const allTests: any[] = [];\n\n                  if (pathologyOrders && pathologyOrders.length > 0) {\n                    pathologyOrders.forEach((orderItem: any) => {\n                      // The API returns objects with 'order' and 'tests' properties at the top level\n                      const order = orderItem.order;\n                      const tests = orderItem.tests;\n\n                      if (!order) {\n                        return;\n                      }\n\n                      // Get tests from the order data\n                      if (tests && Array.isArray(tests) && tests.length > 0) {\n                        tests.forEach((test: any) => {\n                          // Prefer the field that actually contains time information\n                          const rawOrdered = order.orderedDate;\n                          const rawCreated = order.createdAt;\n                          const orderDateRaw =\n                            rawOrdered && /[:T]/.test(rawOrdered)\n                              ? rawOrdered\n                              : rawCreated || rawOrdered;\n\n                          allTests.push({\n                            ...test,\n                            orderId: order.orderId || order.id,\n                            orderDate: orderDateRaw,\n                            orderStatus: order.status,\n                            receiptNumber: order.receiptNumber,\n                          });\n                        });\n                      }\n                    });\n                  }\n\n                  return allTests.length > 0 ? (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Test Name</TableHead>\n                          <TableHead>Price (₹)</TableHead>\n                          <TableHead>Order ID</TableHead>\n                          <TableHead>Ordered Date</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {allTests.map((test: any, index: number) => (\n                          <TableRow key={`${test.orderId}-${test.id || index}`}>\n                            <TableCell className=\"font-medium\">\n                              {test.testName}\n                            </TableCell>\n                            <TableCell>₹{test.price || 0}</TableCell>\n                            <TableCell className=\"text-sm text-muted-foreground\">\n                              {test.orderId}\n                            </TableCell>\n                            <TableCell>\n                              {formatDateTime(test.orderDate)}\n                            </TableCell>\n                            <TableCell>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => navigate(`/pathology`)}\n                                data-testid={`view-test-${test.id || index}`}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        No pathology tests found\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Debug: {pathologyOrders?.length || 0} orders received\n                      </p>\n                    </div>\n                  );\n                })()}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"timeline\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Patient Timeline</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(() => {\n                    // Combine all events with timestamps for sorting\n                    let allEvents: Array<{\n                      type: string;\n                      data: any;\n                      timestamp: Date;\n                      sortTimestamp: number;\n                    }> = [];\n\n                    // Add OPD visits\n                    if (opdVisits && opdVisits.length > 0) {\n                      opdVisits.forEach((visit: any) => {\n                        const visitDateTime = visit.scheduledDate && visit.scheduledTime\n                          ? new Date(`${visit.scheduledDate}T${visit.scheduledTime}:00`)\n                          : new Date(visit.createdAt);\n\n                        allEvents.push({\n                          type: \"opd_visit\",\n                          data: {\n                            ...visit,\n                            sortTimestamp: visitDateTime.getTime(),\n                          },\n                          timestamp: visitDateTime,\n                          sortTimestamp: visitDateTime.getTime(),\n                        });\n                      });\n                    }\n\n                    // Group patient services by order ID (batch)\n                    if (services && services.length > 0) {\n                      // Filter out admission services to prevent duplicates in timeline\n                      const nonAdmissionServices = services.filter((service: any) => \n                        service.serviceType !== \"admission\"\n                      );\n\n                      const serviceGroups = nonAdmissionServices.reduce((groups: any, service: any) => {\n                        const orderId = service.orderId || `BATCH-${service.id}`;\n                        if (!groups[orderId]) {\n                          groups[orderId] = [];\n                        }\n                        groups[orderId].push(service);\n                        return groups;\n                      }, {});\n\n                      // Add each service group as a single event\n                      Object.entries(serviceGroups).forEach(([orderId, groupServices]: [string, any]) => {\n                        const firstService = groupServices[0];\n                        const serviceDateTime = new Date(\n                          `${firstService.scheduledDate}T${firstService.scheduledTime}:00`\n                        );\n\n                        // Calculate total cost for the batch\n                        const totalCost = groupServices.reduce((sum: number, service: any) => {\n                          return sum + (service.calculatedAmount || service.price || 0);\n                        }, 0);\n\n                        allEvents.push({\n                          type: \"service_batch\",\n                          data: {\n                            orderId,\n                            receiptNumber: firstService.receiptNumber,\n                            services: groupServices,\n                            totalCost,\n                            scheduledDate: firstService.scheduledDate,\n                            scheduledTime: firstService.scheduledTime,\n                            doctorId: firstService.doctorId,\n                            doctorName: firstService.doctorName,\n                            sortTimestamp: serviceDateTime.getTime(),\n                          },\n                          timestamp: serviceDateTime,\n                          sortTimestamp: serviceDateTime.getTime(),\n                        });\n                      });\n                    }\n\n                    // Add pathology orders\n                    if (pathologyOrders && pathologyOrders.length > 0) {\n                      pathologyOrders.forEach((orderItem: any) => {\n                        const order = orderItem.order || orderItem;\n                        const tests = orderItem.tests || [];\n\n                        // Use the ordered date for timeline\n                        const orderDate = order.orderedDate || order.createdAt;\n                        const orderDateTime = new Date(orderDate);\n\n                        allEvents.push({\n                          type: \"pathology\",\n                          data: {\n                            ...order,\n                            tests: tests,\n                            testName: tests.map((test: any) => test.testName).join(\", \"),\n                            orderId: order.orderId || order.id,\n                            totalPrice: order.totalPrice,\n                            receiptNumber: order.receiptNumber,\n                            sortTimestamp: orderDateTime.getTime(),\n                          },\n                          timestamp: orderDateTime,\n                          sortTimestamp: orderDateTime.getTime(),\n                        });\n                      });\n                    }\n\n                    // Add admissions and related events\n                    if (admissions && admissions.length > 0) {\n                      admissions.forEach((admission: any) => {\n                        // Get admission events for this admission\n                        const events = admissionEventsMap[admission.id] || [];\n\n                        // Find the initial 'admit' event (if any)\n                        const admitEvent = events.find((event: any) => event.eventType === 'admit');\n\n                        // Add consolidated admission event (merge admission record with admit event)\n                        allEvents.push({\n                          type: \"admission\",\n                          data: {\n                            ...admission,\n                            // Merge admit event details if available\n                            admitEventNotes: admitEvent?.notes,\n                            admitEventTime: admitEvent?.eventTime,\n                            sortTimestamp: new Date(admission.admissionDate).getTime(),\n                          },\n                          timestamp: new Date(admission.admissionDate),\n                          sortTimestamp: new Date(admission.admissionDate).getTime(),\n                        });\n\n                        // Add other admission events (excluding 'admit' events to avoid duplication)\n                        events.forEach((event: any) => {\n                          if (event.eventType !== 'admit') {\n                            allEvents.push({\n                              type: \"admission_event\",\n                              data: {\n                                ...event,\n                                admission,\n                                sortTimestamp: new Date(event.eventTime).getTime(),\n                              },\n                              timestamp: new Date(event.eventTime),\n                              sortTimestamp: new Date(event.eventTime).getTime(),\n                            });\n                          }\n                        });\n\n                        // Add discharge event if discharged (only if no explicit discharge event exists)\n                        if (admission.dischargeDate) {\n                          const hasDischargeEvent = events.some((event: any) => event.eventType === 'discharge');\n                          if (!hasDischargeEvent) {\n                            allEvents.push({\n                              type: \"discharge\",\n                              data: {\n                                ...admission,\n                                sortTimestamp: new Date(admission.dischargeDate).getTime(),\n                              },\n                              timestamp: new Date(admission.dischargeDate),\n                              sortTimestamp: new Date(admission.dischargeDate).getTime(),\n                            });\n                          }\n                        }\n                      });\n                    }\n\n                    // Sort events by timestamp (most recent first)\n                    allEvents.sort((a, b) => b.sortTimestamp - a.sortTimestamp);\n\n                    if (allEvents.length === 0) {\n                      return (\n                        <div className=\"text-center py-8\">\n                          <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-500\">No timeline events yet</p>\n                        </div>\n                      );\n                    }\n\n                    return allEvents.map((event, index) => {\n                      // Define colors and icons for different event types\n                      const getEventColor = (eventType: string) => {\n                        switch (eventType) {\n                          case \"opd_visit\":\n                            return {\n                              borderColor: \"border-l-blue-500\",\n                              bgColor: \"bg-blue-50\",\n                              iconColor: \"text-blue-600\"\n                            };\n                          case \"service_batch\":\n                          case \"service\":\n                            return {\n                              borderColor: \"border-l-purple-500\",\n                              bgColor: \"bg-purple-50\",\n                              iconColor: \"text-purple-600\"\n                            };\n                          case \"pathology\":\n                            return {\n                              borderColor: \"border-l-pink-500\",\n                              bgColor: \"bg-pink-50\",\n                              iconColor: \"text-pink-600\"\n                            };\n                          case \"admission\":\n                            return {\n                              borderColor: \"border-l-green-500\",\n                              bgColor: \"bg-green-50\",\n                              iconColor: \"text-green-600\"\n                            };\n                          case \"admission_event\":\n                            return {\n                              borderColor: \"border-l-amber-500\",\n                              bgColor: \"bg-amber-50\",\n                              iconColor: \"text-amber-600\"\n                            };\n                          case \"discharge\":\n                            return {\n                              borderColor: \"border-l-red-500\",\n                              bgColor: \"bg-red-50\",\n                              iconColor: \"text-red-600\"\n                            };\n                          default:\n                            return {\n                              borderColor: \"border-l-gray-500\",\n                              bgColor: \"bg-gray-50\",\n                              iconColor: \"text-gray-600\"\n                            };\n                        }\n                      };\n\n                      const eventColors = getEventColor(event.type);\n\n                      return (\n                        <div \n                          key={`${event.type}-${index}`} \n                          className={`relative mb-6 border-2 border-gray-200 rounded-lg ${eventColors.bgColor} ${eventColors.borderColor} hover:shadow-md transition-shadow duration-200`}\n                        >\n                          {/* Timeline connector line */}\n                          {index < allEvents.length - 1 && (\n                            <div className=\"absolute left-6 top-full h-6 w-0.5 bg-gray-300 z-0\"></div>\n                          )}\n\n                          {/* Event icon circle */}\n                          <div className={`absolute -left-3 top-4 w-6 h-6 rounded-full ${eventColors.bgColor} border-2 ${eventColors.borderColor} flex items-center justify-center`}>\n                            <div className={`w-2 h-2 rounded-full ${eventColors.iconColor.replace('text-', 'bg-')}`}></div>\n                          </div>\n\n                          <div className=\"p-4 pl-8\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <h3 className={`font-semibold text-lg ${eventColors.iconColor}`}>\n                                {(() => {\n                                  switch (event.type) {\n                                    case \"opd_visit\":\n                                      return `OPD Consultation - ${doctors.find((d: Doctor) => d.id === event.data.doctorId)?.name || \"Unknown Doctor\"}`;\n                                    case \"service_batch\":\n                                      const serviceCount = event.data.services.length;\n                                      return `Service Order - ${serviceCount} service${serviceCount > 1 ? 's' : ''} (${event.data.orderId})`;\n                                    case \"service\":\n                                      return event.data.serviceName || \"Service\";\n                                    case \"pathology\":\n                                      return `Pathology Tests - Order ${event.data.orderId}`;\n                                    case \"admission\":\n                                      return `Patient Admitted - ${event.data.currentWardType} (${event.data.currentRoomNumber})`;\n                                    case \"admission_event\":\n                                      if (event.data.eventType === \"room_change\") {\n                                        return `Room Transfer - ${event.data.wardType} (${event.data.roomNumber})`;\n                                      }\n                                      return `Admission ${event.data.eventType}`;\n                                    case \"discharge\":\n                                      return \"Patient Discharged\";\n                                    default:\n                                      return \"Timeline Event\";\n                                  }\n                                })()}\n                              </h3>\n                              <div className=\"flex items-center gap-3\">\n                                {/* Receipt/Print button for applicable events */}\n                                {(event.type === \"service\" ||\n                                  event.type === \"service_batch\" ||\n                                  event.type === \"pathology\" ||\n                                  event.type === \"admission\" ||\n                                  event.type === \"admission_event\" ||\n                                  event.type === \"opd_visit\") && (\n                                  <ReceiptTemplate\n                                    receiptData={generateReceiptData(event.data, event.type)}\n                                    hospitalInfo={hospitalInfo}\n                                    trigger={\n                                      <Button size=\"sm\" variant=\"outline\" className=\"flex items-center gap-1 hover:bg-white\">\n                                        <Printer className=\"w-3 h-3\" />\n                                        Receipt\n                                      </Button>\n                                    }\n                                  />\n                                )}\n                                <div className=\"text-sm text-gray-500 font-medium bg-white px-2 py-1 rounded border\">\n                                  {formatDateTime(event.timestamp.toISOString())}\n                                </div>\n                              </div>\n                            </div>\n\n                            <div className=\"text-sm text-gray-700 bg-white/50 rounded-md p-3 border border-gray-200\">\n                              {(() => {\n                                switch (event.type) {\n                                  case \"opd_visit\":\n                                    return (\n                                      <div className=\"space-y-1\">\n                                        <div className=\"font-medium\">Consultation Fee: ₹{event.data.consultationFee || 0}</div>\n                                        {event.data.symptoms && <div><span className=\"font-medium\">Symptoms:</span> {event.data.symptoms}</div>}\n                                        {event.data.diagnosis && <div><span className=\"font-medium\">Diagnosis:</span> {event.data.diagnosis}</div>}\n                                      </div>\n                                    );\n                                  case \"service_batch\":\n                                    return (\n                                      <div>\n                                        <div className=\"font-medium mb-2 text-gray-800\">Services in this order:</div>\n                                        <div className=\"space-y-1 ml-4 bg-white rounded p-2 border\">\n                                          {event.data.services.map((service: any, idx: number) => (\n                                            <div key={idx} className=\"flex justify-between items-center text-sm\">\n                                              <span>• {service.serviceName}</span>\n                                              <span className=\"font-medium\">₹{service.calculatedAmount || service.price}</span>\n                                            </div>\n                                          ))}\n                                        </div>\n                                        <div className=\"flex justify-between items-center font-medium mt-3 pt-2 border-t border-gray-300 text-gray-800\">\n                                          <span>Total Cost:</span>\n                                          <span className=\"text-lg\">₹{event.data.totalCost}</span>\n                                        </div>\n                                        {(() => {\n                                          // Get doctor name for service batch\n                                          let doctorName = null;\n\n                                          // Try to get doctor name from the event data\n                                          if (event.data.doctorName && event.data.doctorName.trim() !== \"\") {\n                                            doctorName = event.data.doctorName;\n                                          } else if (event.data.doctorId && event.data.doctorId !== \"\" && event.data.doctorId !== \"none\") {\n                                            const doctor = doctors?.find((d: Doctor) => d.id === event.data.doctorId);\n                                            if (doctor) {\n                                              doctorName = doctor.name;\n                                            }\n                                          }\n\n                                          return doctorName ? (\n                                            <div className=\"mt-2\"><span className=\"font-medium\">Doctor:</span> {doctorName}</div>\n                                          ) : null;\n                                        })()}\n                                      </div>\n                                    );\n                                  case \"service\":\n                                    return (\n                                      <div className=\"space-y-1\">\n                                        <div className=\"font-medium\">Cost: ₹{event.data.calculatedAmount || event.data.price}</div>\n                                        {event.data.notes && <div><span className=\"font-medium\">Notes:</span> {event.data.notes}</div>}\n                                      </div>\n                                    );\n                                  case \"pathology\":\n                                    return (\n                                      <div>\n                                        <div className=\"font-medium mb-2 text-gray-800\">Tests in this order:</div>\n                                        <div className=\"space-y-1 ml-4 bg-white rounded p-2 border\">\n                                          {event.data.tests && event.data.tests.length > 0 ? (\n                                            event.data.tests.map((test: any, idx: number) => (\n                                              <div key={idx} className=\"flex justify-between items-center text-sm\">\n                                                <span>• {test.testName}</span>\n                                                <span className=\"font-medium\">₹{test.price || 0}</span>\n                                              </div>\n                                            ))\n                                          ) : (\n                                            <div className=\"flex justify-between items-center text-sm\">\n                                              <span>• {event.data.testName}</span>\n                                              <span className=\"font-medium\">₹{event.data.totalPrice || 0}</span>\n                                            </div>\n                                          )}\n                                        </div>\n                                        <div className=\"flex justify-between items-center font-medium mt-3 pt-2 border-t border-gray-300 text-gray-800\">\n                                          <span>Total Cost:</span>\n                                          <span className=\"text-lg\">₹{event.data.totalPrice}</span>\n                                        </div>\n                                        {(() => {\n                                          // Get doctor name from the pathology order\n                                          let doctorName = null;\n\n                                          // Try to get doctor ID from the event data\n                                          const doctorId = event.data.doctorId || \n                                                         (event.data.rawData?.order?.doctorId) ||\n                                                         (event.data.order?.doctorId);\n\n                                          if (doctorId && doctors && doctors.length > 0) {\n                                            const doctor = doctors.find((d: Doctor) => d.id === doctorId);\n                                            if (doctor) {\n                                              doctorName = doctor.name;\n                                            }\n                                          }\n\n                                          return doctorName ? (\n                                            <div className=\"mt-2\"><span className=\"font-medium\">Doctor:</span> {doctorName}</div>\n                                          ) : null;\n                                        })()}\n                                        {event.data.remarks && <div className=\"mt-1\"><span className=\"font-medium\">Remarks:</span> {event.data.remarks}</div>}\n                                      </div>\n                                    );\n                                  case \"admission\":\n                                    const admissionContent = (\n                                      <div className=\"space-y-1\">\n                                        <div><span className=\"font-medium\">Daily Cost:</span> ₹{event.data.dailyCost}</div>\n                                        {event.data.reason && <div><span className=\"font-medium\">Reason:</span> {event.data.reason}</div>}\n                                        {event.data.diagnosis && <div><span className=\"font-medium\">Diagnosis:</span> {event.data.diagnosis}</div>}\n                                        {event.data.admitEventNotes && <div><span className=\"font-medium\">Notes:</span> {event.data.admitEventNotes}</div>}\n                                        {event.data.initialDeposit > 0 && <div><span className=\"font-medium\">Initial Deposit:</span> ₹{event.data.initialDeposit}</div>}\n                                      </div>\n                                    );\n                                    return admissionContent;\n                                  case \"admission_event\":\n                                    return (\n                                      <div className=\"space-y-1\">\n                                        {event.data.eventType === \"room_change\" && (\n                                          <div><span className=\"font-medium\">Previous Room:</span> {event.data.admission?.currentRoomNumber}</div>\n                                        )}\n                                        {event.data.notes && <div><span className=\"font-medium\">Notes:</span> {event.data.notes}</div>}\n                                      </div>\n                                    );\n                                  case \"discharge\":\n                                    return (\n                                      <div className=\"space-y-1\">\n                                        <div><span className=\"font-medium\">Total Stay:</span> {calcStayDays(event.data.admissionDate, event.data.dischargeDate)} days</div>\n                                        <div><span className=\"font-medium\">Total Cost:</span> ₹{event.data.totalCost}</div>\n                                      </div>\n                                    );\n                                  default:\n                                    return <div>Event details not available</div>;\n                                }\n                              })()}\n                            </div>\n\n                            {/* Doctor information outside details section for admission events */}\n                            {event.type === \"admission\" && (() => {\n                              // Get doctor name from the admission\n                              let doctorName = null;\n\n                              // Try to get doctor ID from the event data\n                              const doctorId = event.data.doctorId;\n\n                              if (doctorId && doctors && doctors.length > 0) {\n                                const doctor = doctors.find((d: Doctor) => d.id === doctorId);\n                                if (doctor) {\n                                  doctorName = doctor.name;\n                                }\n                              }\n\n                              return doctorName ? (\n                                <div className=\"mt-3 pt-2 border-t border-gray-200 text-sm text-gray-600\">\n                                  <span className=\"font-medium\">Doctor:</span> {doctorName}\n                                </div>\n                              ) : null;\n                            })()}\n                          </div>\n                        </div>\n                      );\n                    });\n                  })()}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Service Dialog */}\n      <Dialog open={isServiceDialogOpen} onOpenChange={setIsServiceDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedServiceType === \"opd\"\n                ? \"Schedule OPD Consultation\"\n                : \"Schedule Patient Service\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <form\n            onSubmit={(e) => {\n              console.log(\"Form submit event triggered\");\n              e.preventDefault();\n\n              // Get form data manually to bypass schema validation issues\n              const formData = serviceForm.getValues();\n              console.log(\"Submit button clicked\");\n              console.log(\"Form is valid:\", serviceForm.formState.isValid);\n              console.log(\"Form errors:\", serviceForm.formState.errors);\n              console.log(\"Selected service type:\", selectedServiceType);\n              console.log(\"Selected services count:\", selectedServices.length);\n              console.log(\"Service name:\", formData.serviceName);\n              console.log(\"Price:\", formData.price);\n\n              // Call our custom validation\n              onServiceSubmit(formData);\n            }}\n            className=\"space-y-6\"\n          >\n            {selectedServiceType === \"opd\" && (\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <p className=\"text-sm text-blue-800 font-medium\">\n                  OPD Consultation\n                </p>\n                {(() => {\n                  const selectedDoctorId = serviceForm.watch(\"doctorId\");\n                  const selectedDoctor = doctors.find(\n                    (d: Doctor) => d.id === selectedDoctorId,\n                  );\n                  const consultationFee =\n                    selectedDoctorId &&\n                    selectedDoctorId !== \"none\" &&\n                    selectedDoctor\n                      ? selectedDoctor.consultationFee\n                      : 0;\n\n                  return (\n                    <p className=\"text-sm text-blue-600\">\n                      Consultation fee: ₹{consultationFee}\n                      {(!selectedDoctorId || selectedDoctorId === \"none\") && (\n                        <span className=\"text-blue-500 ml-1\">\n                          (Select doctor to see fee)\n                        </span>\n                      )}\n                    </p>\n                  );\n                })()}\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>\n                  {selectedServiceType === \"opd\"\n                    ? \"Consulting Doctor *\"\n                    : \"Assigned Doctor *\"}\n                </Label>\n                <Select\n                  value={serviceForm.watch(\"doctorId\") || \"\"}\n                  onValueChange={(value) => {\n                    console.log(\"=== DOCTOR SELECTION DEBUG ===\");\n                    console.log(\"Doctor selection changed to:\", value);\n                    console.log(\"Doctor selection value type:\", typeof value);\n                    console.log(\"Is value 'none':\", value === \"none\");\n                    console.log(\"Is value empty string:\", value === \"\");\n\n                    // Find doctor info\n                    if (value && value !== \"none\" && value !== \"\") {\n                      const selectedDoctor = doctors?.find((d: Doctor) => d.id === value);\n                      console.log(\"Selected doctor:\", selectedDoctor);\n                    }\n\n                    serviceForm.setValue(\"doctorId\", value);\n\n                    // Verify the form actually updated\n                    setTimeout(() => {\n                      const currentValue = serviceForm.getValues(\"doctorId\");\n                      console.log(\"Form doctorId after setValue:\", currentValue);\n                    }, 100);\n                  }}\n                  data-testid=\"select-doctor\"\n                >\n                  <SelectTrigger>\n                    <SelectValue\n                      placeholder={\n                        selectedServiceType === \"opd\"\n                          ? \"Select consulting doctor (required)\"\n                          : \"Select doctor (required)\"\n                      }\n                    />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {selectedServiceType !== \"opd\" && (\n                      <SelectItem value=\"none\">No doctor assigned</SelectItem>\n                    )}\n                    {doctors.map((doctor: Doctor) => (\n                      <SelectItem key={doctor.id} value={doctor.id}>\n                        {doctor.name} - {doctor.specialization}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {serviceForm.formState.errors.doctorId && (\n                  <p className=\"text-sm text-red-600\">\n                    {serviceForm.formState.errors.doctorId.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Scheduled Date *</Label>\n                <Input\n                  type=\"date\"\n                  {...serviceForm.register(\"scheduledDate\", {\n                    required: \"Scheduled date is required\",\n                  })}\n                  data-testid=\"input-service-date\"\n                />\n                {serviceForm.formState.errors.scheduledDate && (\n                  <p className=\"text-sm text-red-600\">\n                    {serviceForm.formState.errors.scheduledDate.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Scheduled Time *</Label>\n                <Input\n                  type=\"time\"\n                  {...serviceForm.register(\"scheduledTime\", {\n                    required: \"Scheduled time is required\",\n                  })}\n                  data-testid=\"input-service-time\"\n                />\n                {serviceForm.formState.errors.scheduledTime && (\n                  <p className=\"text-sm text-red-600\">\n                    {serviceForm.formState.errors.scheduledTime.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {selectedServiceType !== \"opd\" && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label>Select Service from Catalog</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Select\n                      value={selectedServiceCategory || \"all\"}\n                      onValueChange={(value) => {\n                        setSelectedServiceCategory(\n                          value === \"all\" ? \"\" : value,\n                        );\n                        // Reset service selection when category changes\n                        serviceForm.setValue(\"serviceType\", \"\");\n                        serviceForm.setValue(\"serviceName\", \"\");\n                        serviceForm.setValue(\"price\", 0);\n                        setSelectedCatalogService(null); // Reset selected service\n                        setBillingPreview(null); // Reset billing preview\n                      }}\n                    >\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Categories</SelectItem>\n                        {serviceCategories.map((category) => (\n                          <SelectItem key={category.key} value={category.key}>\n                            <div className=\"flex items-center gap-2\">\n                              <category.icon className=\"h-4 w-4\" />\n                              {category.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search services by name...\"\n                        value={selectedServiceSearchQuery}\n                        onChange={(e) => {\n                          setSelectedServiceSearchQuery(e.target.value);\n                          // Reset service selection when search changes\n                          serviceForm.setValue(\"serviceType\", \"\");\n                          serviceForm.setValue(\"serviceName\", \"\");\n                          serviceForm.setValue(\"price\", 0);\n                          setSelectedCatalogService(null); // Reset selected service\n                          setBillingPreview(null); // Reset billing preview\n                        }}\n                        className=\"pl-10\"\n                        data-testid=\"search-services\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border rounded-lg max-h-64 overflow-y-auto\">\n                  <Table key={`service-table-${selectedServiceType}-${isServiceDialogOpen}`}>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"w-12\">Select</TableHead>\n                        <TableHead>Service Name</TableHead>\n                        <TableHead>Category</TableHead>\n                        <TableHead className=\"text-right\">Price (₹)</TableHead>\n                        <TableHead className=\"text-right w-24\">\n                          Quantity\n                        </TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {getFilteredServices(selectedServiceCategory).length ===\n                      0 ? (\n                        <TableRow>\n                          <TableCell\n                            colSpan={5}\n                            className=\"text-center text-muted-foreground py-8\"\n                          >\n                            No services found. Try adjusting your search or\n                            category filter.\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        getFilteredServices(selectedServiceCategory).map(\n                          (service) => {\n                            const isSelected = selectedServices.some(\n                              (s) => s.id === service.id,\n                            );\n                            const isAmbulanceService =\n                              service.billingType === \"composite\";\n                            return (\n                              <TableRow\n                                key={service.id}\n                                className={isSelected ? \"bg-blue-50\" : \"\"}\n                              >\n                                <TableCell>\n                                  <Checkbox\n                                    checked={isSelected}\n                                    data-testid={`checkbox-service-${service.id}`}\n                                    onCheckedChange={(checked) => {\n                                      if (checked) {\n                                        setSelectedServices([\n                                          ...selectedServices,\n                                          {\n                                            ...service,\n                                            quantity: isAmbulanceService\n                                              ? 0\n                                              : 1,\n                                          },\n                                        ]);\n                                      } else {\n                                        setSelectedServices(\n                                          selectedServices.filter(\n                                            (s) => s.id !== service.id,\n                                          ),\n                                        );\n                                      }\n                                    }}\n                                  />\n                                </TableCell>\n                                <TableCell className=\"font-medium\">\n                                  {service.name}\n                                </TableCell>\n                                <TableCell>\n                                  <Badge variant=\"outline\">\n                                    {serviceCategories.find(\n                                      (cat) => cat.key === service.category,\n                                    )?.label || service.category}\n                                  </Badge>\n                                </TableCell>\n                                <TableCell className=\"text-right\">\n                                  {service.price === 0 ? (\n                                    <Badge variant=\"secondary\">Variable</Badge>\n                                  ) : (\n                                    `₹${service.price}`\n                                  )}\n                                </TableCell>\n                                <TableCell className=\"text-right\">\n                                  {isSelected ? (\n                                    <div className=\"flex flex-col\">\n                                      <Input\n                                        type=\"number\"\n                                        min={isAmbulanceService ? \"0\" : \"1\"}\n                                        step={\n                                          service.billingType === \"per_hour\"\n                                            ? \"0.5\"\n                                            : isAmbulanceService\n                                              ? \"0.1\"\n                                              : \"1\"\n                                        }\n                                        value={\n                                          selectedServices.find(\n                                            (s) => s.id === service.id,\n                                          )?.quantity ||\n                                          (isAmbulanceService ? 0 : 1)\n                                        }\n                                        onChange={(e) => {\n                                          const quantity =\n                                            parseFloat(e.target.value) ||\n                                            (isAmbulanceService ? 0 : 1);\n                                          setSelectedServices(\n                                            selectedServices.map((s) =>\n                                              s.id === service.id\n                                                ? { ...s, quantity }\n                                                : s,\n                                            ),\n                                          );\n\n                                          // Update form fields for billing calculation\n                                          if (isAmbulanceService) {\n                                            serviceForm.setValue(\n                                              \"distance\",\n                                              quantity,\n                                            );\n                                          } else if (\n                                            service.billingType === \"per_hour\"\n                                          ) {\n                                            serviceForm.setValue(\n                                              \"hours\",\n                                              quantity,\n                                            );\n                                          } else {\n                                            serviceForm.setValue(\n                                              \"quantity\",\n                                              quantity,\n                                            );\n                                          }\n                                        }}\n                                        className=\"w-20 h-8\"\n                                        placeholder={\n                                          isAmbulanceService ? \"km\" : \"qty\"\n                                        }\n                                      />\n                                      {isAmbulanceService && (\n                                        <span className=\"text-xs text-gray-500 mt-1\">\n                                          km\n                                        </span>\n                                      )}\n                                    </div>\n                                  ) : (\n                                    <span className=\"text-gray-400\">-</span>\n                                  )}\n                                </TableCell>\n                              </TableRow>\n                            );\n                          },\n                        )\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                {/* Smart Billing Parameters */}\n                {selectedCatalogService && (\n                  <>\n                    {/* Per Instance Quantity */}\n                    {selectedCatalogService.billingType === \"per_instance\" && (\n                      <div className=\"space-y-2\">\n                        <Label>Quantity</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={serviceForm.watch(\"quantity\") || 1}\n                          onChange={(e) =>\n                            serviceForm.setValue(\n                              \"quantity\",\n                              parseInt(e.target.value) || 1,\n                            )\n                          }\n                          data-testid=\"input-quantity\"\n                        />\n                      </div>\n                    )}\n\n                    {/* Per 24 Hours */}\n                    {selectedCatalogService.billingType === \"per_24_hours\" && (\n                      <div className=\"space-y-2\">\n                        <Label>Number of Days</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={serviceForm.watch(\"quantity\") || 1}\n                          onChange={(e) =>\n                            serviceForm.setValue(\n                              \"quantity\",\n                              parseInt(e.target.value) || 1,\n                            )\n                          }\n                          data-testid=\"input-days\"\n                        />\n                        <p className=\"text-sm text-gray-500\">\n                          Room charges are calculated per 24-hour period\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Per Hour */}\n                    {selectedCatalogService.billingType === \"per_hour\" && (\n                      <div className=\"space-y-2\">\n                        <Label>Number of Hours</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"0.5\"\n                          step=\"0.5\"\n                          value={serviceForm.watch(\"hours\") || 1}\n                          onChange={(e) =>\n                            serviceForm.setValue(\n                              \"hours\",\n                              parseFloat(e.target.value) || 1,\n                            )\n                          }\n                          data-testid=\"input-hours\"\n                        />\n                        <p className=\"text-sm text-gray-500\">\n                          Service will be charged at ₹\n                          {selectedCatalogService.price} per hour\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Composite Billing */}\n                    {selectedCatalogService.billingType === \"composite\" && (\n                      <div className=\"space-y-2\">\n                        <Label>Distance (km)</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.1\"\n                          value={serviceForm.watch(\"distance\") || 0}\n                          onChange={(e) =>\n                            serviceForm.setValue(\n                              \"distance\",\n                              parseFloat(e.target.value) || 0,\n                            )\n                          }\n                          placeholder=\"Enter distance in kilometers\"\n                          data-testid=\"input-distance\"\n                        />\n                        <p className=\"text-sm text-gray-500\">\n                          {(() => {\n                            const params =\n                              selectedCatalogService.billingParameters\n                                                                 ? JSON.parse(\n                                    selectedCatalogService.billingParameters,\n                                  )\n                                : {};\n                            return `Fixed charge: ₹${params.fixedCharge || selectedCatalogService.price}, Per km: ₹${params.perKmRate || 0}`;\n                          })()}\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Variable Billing */}\n                    {selectedCatalogService.billingType === \"variable\" && (\n                      <div className=\"space-y-2\">\n                        <Label>Variable Price (₹)</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          value={serviceForm.watch(\"price\") || 0}\n                          onChange={(e) =>\n                            serviceForm.setValue(\n                              \"price\",\n                              parseFloat(e.target.value) || 0,\n                            )\n                          }\n                          placeholder=\"Enter variable price\"\n                          data-testid=\"input-variable-price\"\n                        />\n                        <p className=\"text-sm text-gray-500\">\n                          Enter the exact amount to be charged (quantity is\n                          always 1)\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Per Date Billing */}\n                    {selectedCatalogService.billingType === \"per_date\" && (\n                      <div className=\"space-y-2\">\n                        <Label>Number of Calendar Days</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={serviceForm.watch(\"quantity\") || 1}\n                          onChange={(e) =>\n                            serviceForm.setValue(\n                              \"quantity\",\n                              parseInt(e.target.value) || 1,\n                            )\n                          }\n                          data-testid=\"input-calendar-days\"\n                        />\n                        <p className=\"text-sm text-gray-500\">\n                          Charged for each calendar date during admission period\n                          (different from 24-hour billing)\n                        </p>\n                      </div>\n                    )}\n                  </>\n                )}\n\n                {/* Custom Service Input */}\n                <div className=\"space-y-2\">\n                  <Label>Custom Service Name</Label>\n                  <Input\n                    value={serviceForm.watch(\"serviceName\")}\n                    onChange={(e) =>\n                      serviceForm.setValue(\"serviceName\", e.target.value)\n                    }\n                    placeholder=\"Enter custom service name\"\n                    disabled={!!serviceForm.watch(\"serviceType\")}\n                    data-testid=\"input-custom-service-name\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    Only available when no catalog service is selected\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Price (₹) *</Label>\n                  <Input\n                    type=\"number\"\n                    value={serviceForm.watch(\"price\") || \"\"}\n                    onChange={(e) =>\n                      serviceForm.setValue(\n                        \"price\",\n                        parseFloat(e.target.value) || 0,\n                      )\n                    }\n                    placeholder=\"Enter price\"\n                    disabled={!!billingPreview}\n                    data-testid=\"input-service-price\"\n                  />\n                  {billingPreview && (\n                    <p className=\"text-sm text-green-600\">\n                      Price calculated automatically based on billing parameters\n                    </p>\n                  )}\n                </div>\n\n                {/* Services Summary */}\n                {selectedServices.length > 0 && (\n                  <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n                    <h4 className=\"font-medium mb-3\">\n                      Selected Services Summary\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {selectedServices.map((service) => (\n                        <div\n                          key={service.id}\n                          className=\"flex justify-between items-center text-sm\"\n                        >\n                          <span className=\"font-medium\">{service.name}</span>\n                          <span>\n                            {service.price === 0 ? (\n                              <Badge variant=\"secondary\">Variable</Badge>\n                            ) : (\n                              `₹${(service.price * (service.quantity || 1)).toLocaleString()}`\n                            )}\n                          </span>\n                        </div>\n                      ))}\n                      <div className=\"border-t pt-2 mt-2 flex justify-between items-center font-semibold\">\n                        <span>Total ({selectedServices.length} services)</span>\n                        <span>\n                          ₹\n                          {selectedServices\n                            .reduce(\n                              (total, service) =>\n                                total + service.price * (service.quantity || 1),\n                              0,\n                            )\n                            .toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Form Fields */}\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label>Notes</Label>\n              <Textarea\n                {...serviceForm.register(\"notes\")}\n                placeholder=\"Additional notes about the service...\"\n                data-testid=\"textarea-service-notes\"\n              />\n            </div>\n\n            {/* Validation Helper Text */}\n            {selectedServiceType !== \"opd\" &&\n              selectedServices.length === 0 &&\n              (!serviceForm.watch(\"serviceName\") ||\n                !serviceForm.watch(\"serviceName\").trim() ||\n                !serviceForm.watch(\"price\") ||\n                serviceForm.watch(\"price\") <= 0) && (\n                <div\n                  className=\"bg-amber-50 border border-amber-200 rounded-lg p-3\"\n                  data-testid=\"text-service-submit-help\"\n                >\n                  <div className=\"flex items-center gap-2 text-amber-800\">\n                    <div className=\"w-2 h-2 bg-amber-500 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">\n                      To schedule services, please either:\n                    </span>\n                  </div>\n                  <ul className=\"mt-2 text-sm text-amber-700 list-disc list-inside ml-4\">\n                    <li>\n                      Select services from the catalog above by checking the\n                      boxes, OR\n                    </li>\n                    <li>\n                      Enter both service name and price (greater than ₹0) in the\n                    manual entry fields\n                    </li>\n                  </ul>\n                </div>\n              )}\n\n            {selectedServiceType === \"opd\" &&\n              (!serviceForm.watch(\"doctorId\") ||\n                serviceForm.watch(\"doctorId\") === \"none\" ||\n                serviceForm.watch(\"doctorId\") === \"\") && (\n                <div\n                  className=\"bg-amber-50 border border-amber-200 rounded-lg p-3\"\n                  data-testid=\"text-opd-doctor-help\"\n                >\n                  <div className=\"flex items-center gap-2 text-amber-800\">\n                    <div className=\"w-2 h-2 bg-amber-500 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">\n                      Please select a doctor for the OPD consultation\n                    </span>\n                  </div>\n                </div>\n              )}\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsServiceDialogOpen(false);\n                  setSelectedServiceType(\"\");\n                  setSelectedServiceCategory(\"\");\n                  setSelectedServices([]); // Clear selected services\n                  setSelectedServiceSearchQuery(\"\"); // Clear search query on close\n                  setSelectedCatalogService(null); // Reset selected service\n                  setBillingPreview(null); // Reset billing preview\n                  serviceForm.reset({\n                    patientId: patientId || \"\",\n                    serviceType: \"\",\n                    serviceName: \"\",\n                    scheduledDate: \"\",\n                    scheduledTime: \"\",\n                    doctorId: \"\",\n                    serviceId: \"\", // Reset serviceId\n                    notes: \"\",\n                    price: 0,\n                    quantity: 1,\n                    hours: 1,\n                    distance: 0,\n                  });\n                }}\n                data-testid=\"button-cancel-service\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createServiceMutation.isPending}\n                data-testid=\"button-submit-service\"\n                onClick={(e) => {\n                  console.log(\"Submit button clicked\");\n                  console.log(\"Form is valid:\", serviceForm.formState.isValid);\n                  console.log(\"Form errors:\", serviceForm.formState.errors);\n                  console.log(\"Selected service type:\", selectedServiceType);\n                  console.log(\n                    \"Selected services count:\",\n                    selectedServices.length,\n                  );\n                  console.log(\n                    \"Service name:\",\n                    serviceForm.watch(\"serviceName\"),\n                  );\n                  console.log(\"Price:\", serviceForm.watch(\"price\"));\n\n                  // Let the form handle submission naturally\n                }}\n              >\n                {createServiceMutation.isPending\n                  ? \"Scheduling...\"\n                  : selectedServiceType === \"opd\"\n                    ? \"Schedule OPD\"\n                    : selectedServices.length > 0\n                      ? `Schedule ${selectedServices.length} Service(s)`\n                      : \"Schedule Service\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Admission Dialog */}\n      <Dialog\n        open={isAdmissionDialogOpen}\n        onOpenChange={setIsAdmissionDialogOpen}\n      >\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Admit Patient</DialogTitle>\n          </DialogHeader>\n\n          <Form {...admissionForm}>\n            <form\n              onSubmit={admissionForm.handleSubmit(onAdmissionSubmit)}\n              className=\"space-y-4\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Doctor *</Label>\n                  <Select\n                    value={admissionForm.watch(\"doctorId\")}\n                    onValueChange={(value) =>\n                      admissionForm.setValue(\"doctorId\", value)\n                    }\n                    data-testid=\"select-admission-doctor\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select attending doctor\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {doctors.map((doctor: Doctor) => (\n                        <SelectItem key={doctor.id} value={doctor.id}>\n                          {doctor.name} - {doctor.specialization}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Ward/Room Type *</Label>\n                  <Select\n                    value={admissionForm.watch(\"currentWardType\")}\n                    onValueChange={(value) => {\n                      admissionForm.setValue(\"currentWardType\", value);\n                      admissionForm.setValue(\"currentRoomNumber\", \"\"); // Clear room selection when ward type changes\n\n                      // Get selected room type details\n                      const selectedRoomType = roomTypes.find(\n                        (rt: any) => rt.name === value,\n                      );\n\n                      if (selectedRoomType) {\n                        // Update Bed Charges service price if it's selected\n                        const updatedServices = selectedServices.map(service => {\n                          if (service.name === \"Bed Charges\" || service.name.toLowerCase().includes(\"bed charges\")) {\n                            return {\n                              ...service,\n                              price: selectedRoomType.dailyCost\n                            };\n                          }\n                          return service;\n                        });\n                        setSelectedServices(updatedServices);\n\n                        // Calculate total daily cost from all selected services\n                        const totalServicesCost = updatedServices.reduce((total, service) => {\n                          return total + (service.price || 0);\n                        }, 0);\n\n                        // Set the daily cost to the total of all selected services\n                        admissionForm.setValue(\"dailyCost\", totalServicesCost);\n                      }\n                    }}\n                    data-testid=\"select-ward-type\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select ward/room type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {roomTypes.map((roomType: any) => (\n                        <SelectItem key={roomType.id} value={roomType.name}>\n                          {roomType.name} ({roomType.category}) - ₹\n                          {roomType.dailyCost}/day\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Room Number *</Label>\n                  <Select\n                    value={admissionForm.watch(\"currentRoomNumber\")}\n                    onValueChange={(value) =>\n                      admissionForm.setValue(\"currentRoomNumber\", value)\n                    }\n                    disabled={!admissionForm.watch(\"currentWardType\")}\n                    data-testid=\"select-room-number\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue\n                        placeholder={\n                          admissionForm.watch(\"currentWardType\")\n                            ? \"Select available room\"\n                            : \"Select ward type first\"\n                        }\n                      />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(() => {\n                        const selectedWardType =\n                          admissionForm.watch(\"currentWardType\");\n                        const selectedRoomType = roomTypes.find(\n                          (rt: any) => rt.name === selectedWardType,\n                        );\n\n                        if (!selectedRoomType) return null;\n\n                        // Get all rooms for this room type\n                        const allRoomsForType = rooms.filter(\n                          (room: any) =>\n                            room.roomTypeId === selectedRoomType.id &&\n                            room.isActive,\n                        );\n\n                        if (allRoomsForType.length === 0) {\n                          return (\n                            <SelectItem value=\"\" disabled>\n                              No rooms available in {selectedWardType}\n                            </SelectItem>\n                          );\n                        }\n\n                        // Check which rooms are actually occupied based on current admissions\n                        const occupiedRoomNumbers = new Set(\n                          allCurrentAdmissions\n                            .filter(\n                              (admission: any) =>\n                                admission.currentWardType === selectedWardType &&\n                                admission.status === \"admitted\",\n                            )\n                            .map((admission: any) => admission.currentRoomNumber),\n                        );\n\n                        return allRoomsForType.map((room: any) => {\n                          const isOccupied = occupiedRoomNumbers.has(\n                            room.roomNumber,\n                          );\n\n                          return (\n                            <SelectItem\n                              key={room.id}\n                              value={room.roomNumber}\n                              disabled={isOccupied}\n                              className={\n                                isOccupied\n                                  ? \"text-gray-500 bg-gray-200 dark:bg-gray-800 dark:text-gray-400 cursor-not-allowed opacity-60 hover:bg-gray-200 dark:hover:bg-gray-800\"\n                                  : \"\"\n                              }\n                            >\n                              {room.roomNumber}\n                              {isOccupied ? \" (Occupied)\" : \"\"}\n                            </SelectItem>\n                          );\n                        });\n                      })()}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Admission Date & Time *</Label>\n                  <Input\n                    type=\"datetime-local\"\n                    {...admissionForm.register(\"admissionDate\")}\n                    data-testid=\"input-admission-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Daily Cost (₹) *</Label>\n                  <Input\n                    type=\"number\"\n                    {...admissionForm.register(\"dailyCost\", {\n                      valueAsNumber: true,\n                    })}\n                    placeholder=\"Total cost of selected services\"\n                    data-testid=\"input-daily-cost\"\n                    readOnly={true}\n                    className=\"bg-gray-50\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Automatically calculated from selected admission services\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Initial Deposit (₹)</Label>\n                  <Input\n                    type=\"number\"\n                    {...admissionForm.register(\"initialDeposit\", {\n                      valueAsNumber: true,\n                    })}\n                    placeholder=\"Initial deposit amount\"\n                    data-testid=\"input-initial-deposit\"\n                  />\n                </div>\n              </div>\n\n              {/* Admission Services Selection */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-semibold\">Select Admission Services</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      placeholder=\"Search admission services...\"\n                      value={selectedServiceSearchQuery}\n                      onChange={(e) => {\n                        setSelectedServiceSearchQuery(e.target.value);\n                      }}\n                      className=\"w-64\"\n                      data-testid=\"search-admission-services\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"border rounded-lg max-h-64 overflow-y-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"w-12\">Select</TableHead>\n                        <TableHead>Service Name</TableHead>\n                        <TableHead>Billing Type</TableHead>\n                        <TableHead className=\"text-right\">Price (₹)</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {(() => {\n                        // Filter admission services\n                        const admissionServices = allServices?.filter((service) => \n                          service.category === \"admissions\" && service.isActive\n                        ) || [];\n\n                        // Apply search filter\n                        const filteredServices = selectedServiceSearchQuery.trim()\n                          ? admissionServices.filter(service =>\n                              service.name.toLowerCase().includes(selectedServiceSearchQuery.toLowerCase()) ||\n                              (service.description && \n                               service.description.toLowerCase().includes(selectedServiceSearchQuery.toLowerCase()))\n                            )\n                          : admissionServices;\n\n                        if (filteredServices.length === 0) {\n                          return (\n                            <TableRow>\n                              <TableCell colSpan={4} className=\"text-center text-muted-foreground py-8\">\n                                No admission services found. {selectedServiceSearchQuery ? 'Try adjusting your search.' : 'Create admission services in the Services page first.'}\n                              </TableCell>\n                            </TableRow>\n                          );\n                        }\n\n                        return filteredServices.map((service) => {\n                          const isSelected = selectedServices.some((s) => s.id === service.id);\n                          const selectedService = selectedServices.find((s) => s.id === service.id);\n\n                          // For Bed Charges service, show the room type price if available\n                          let displayPrice = service.price;\n                          if ((service.name === \"Bed Charges\" || service.name.toLowerCase().includes(\"bed charges\")) && selectedService) {\n                            displayPrice = selectedService.price;\n                          }\n\n                          return (\n                            <TableRow key={service.id} className={isSelected ? \"bg-blue-50\" : \"\"}>\n                              <TableCell>\n                                <Checkbox\n                                  checked={isSelected}\n                                  data-testid={`checkbox-admission-service-${service.id}`}\n                                  onCheckedChange={(checked) => {\n                                    let updatedServices;\n                                    if (checked) {\n                                      // Get current room type for Bed Charges pricing\n                                      const currentWardType = admissionForm.watch(\"currentWardType\");\n                                      const selectedRoomType = roomTypes.find((rt: any) => rt.name === currentWardType);\n\n                                      let serviceToAdd = { ...service, quantity: 1 };\n\n                                      // If this is Bed Charges and we have a room type selected, use room type price\n                                      if ((service.name === \"Bed Charges\" || service.name.toLowerCase().includes(\"bed charges\")) && selectedRoomType) {\n                                        serviceToAdd.price = selectedRoomType.dailyCost;\n                                      }\n\n                                      updatedServices = [...selectedServices, serviceToAdd];\n                                    } else {\n                                      updatedServices = selectedServices.filter((s) => s.id !== service.id);\n                                    }\n\n                                    setSelectedServices(updatedServices);\n\n                                    // Recalculate total daily cost from all selected services\n                                    const totalServicesCost = updatedServices.reduce((total, selectedService) => {\n                                      return total + (selectedService.price || 0);\n                                    }, 0);\n\n                                    // Update the daily cost field\n                                    admissionForm.setValue(\"dailyCost\", totalServicesCost);\n                                  }}\n                                />\n                              </TableCell>\n                              <TableCell className=\"font-medium\">\n                                {service.name}\n                                {service.description && (\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    {service.description}\n                                  </div>\n                                )}\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant=\"outline\" className={\n                                  service.billingType === \"per_date\" ? \"bg-indigo-100 text-indigo-800\" :\n                                  service.billingType === \"per_24_hours\" ? \"bg-green-100 text-green-800\" :\n                                  \"bg-gray-100 text-gray-800\"\n                                }>\n                                  {service.billingType === \"per_date\" ? \"Per Date\" :\n                                   service.billingType === \"per_24_hours\" ? \"Per 24 Hours\" :\n                                   service.billingType || \"Per Instance\"}\n                                </Badge>\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                ₹{displayPrice}\n                                {(service.billingType === \"per_date\" || service.billingType === \"per_24_hours\") && (\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    Auto-billed during stay\n                                  </div>\n                                )}\n                              </TableCell>\n                            </TableRow>\n                          );\n                        });\n                      })()}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                {/* Selected Services Summary */}\n                {selectedServices.length > 0 && (\n                  <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n                    <h4 className=\"font-medium mb-3\">Selected Admission Services</h4>\n                    <div className=\"space-y-2\">\n                      {selectedServices.map((service) => (\n                        <div key={service.id} className=\"flex justify-between items-center text-sm\">\n                          <span className=\"font-medium\">{service.name}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {service.billingType === \"per_date\" ? \"Per Date\" :\n                               service.billingType === \"per_24_hours\" ? \"Per 24 Hours\" :\n                               service.billingType || \"Per Instance\"}\n                            </Badge>\n                            <span>₹{service.price}</span>\n                          </div>\n                        </div>\n                      ))}\n                      <div className=\"border-t pt-2 mt-2 flex justify-between items-center font-semibold\">\n                        <span>Total Daily Cost:</span>\n                        <span>₹{selectedServices.reduce((total, service) => total + (service.price || 0), 0)}</span>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        * Services with per_date/per_24_hours billing will be automatically charged during the admission period\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Reason for Admission</Label>\n                <Input\n                  {...admissionForm.register(\"reason\")}\n                  placeholder=\"Brief reason for admission (optional)\"\n                  data-testid=\"input-admission-reason\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsAdmissionDialogOpen(false);\n                    setSelectedServices([]); // Clear selected services\n                    setSelectedServiceSearchQuery(\"\"); // Clear search\n                  }}\n                  data-testid=\"button-cancel-admission\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={isCreatingAdmission}\n                  data-testid=\"button-admit\"\n                >\n                  {isCreatingAdmission\n                    ? \"Admitting...\"\n                    : \"Admit Patient\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Discharge Dialog */}\n      <Dialog\n        open={isDischargeDialogOpen}\n        onOpenChange={setIsDischargeDialogOpen}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Discharge Patient</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"py-4\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Are you sure you want to discharge this patient? This action will\n              mark the admission as completed and set the discharge date to now.\n            </p>\n\n            {(() => {\n              const currentAdmission = admissions?.find(\n                (adm: any) => adm.status === \"admitted\",\n              );\n              if (currentAdmission) {\n                // Format admission date with time using timezone adjustment\n                const formatAdmissionDateTime = (dateStr: string) => {\n                  if (!dateStr) return \"N/A\";\n\n                  let displayDate;\n\n                  // Handle datetime-local format: \"YYYY-MM-DDTHH:MM\"\n                  if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/)) {\n                    const parts = dateStr.split(\"T\");\n                    const dateParts = parts[0].split(\"-\");\n                    const timeParts = parts[1].split(\":\");\n\n                    displayDate = new Date(\n                      parseInt(dateParts[0]), // year\n                      parseInt(dateParts[1]) - 1, // month (0-indexed)\n                      parseInt(dateParts[2]), // day\n                      parseInt(timeParts[0]), // hour\n                      parseInt(timeParts[1]), // minute\n                    );\n                  }\n                  // Handle SQLite datetime format: \"YYYY-MM-DD HH:MM:SS\"\n                  else if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)) {\n                    const parts = dateStr.split(\" \");\n                    const dateParts = parts[0].split(\"-\");\n                    const timeParts = parts[1].split(\":\");\n\n                    displayDate = new Date(\n                      parseInt(dateParts[0]), // year\n                      parseInt(dateParts[1]) - 1, // month (0-indexed)\n                      parseInt(dateParts[2]), // day\n                      parseInt(timeParts[0]), // hour\n                      parseInt(timeParts[1]), // minute\n                      parseInt(timeParts[2]), // second\n                    );\n                  }\n                  // Handle date only format: \"YYYY-MM-DD\"\n                  else if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n                    const dateParts = dateStr.split(\"-\");\n                    displayDate = new Date(\n                      parseInt(dateParts[0]), // year\n                      parseInt(dateParts[1]) - 1, // month (0-indexed)\n                      parseInt(dateParts[2]), // day\n                    );\n                  }\n                  // Fallback for other formats\n                  else {\n                    displayDate = new Date(dateStr);\n                  }\n\n                  // Check if date is valid\n                  if (isNaN(displayDate.getTime())) return \"N/A\";\n\n                  // Get timezone from system settings\n                  const timezone = systemSettings?.timezone || 'UTC';\n\n                  // Return formatted date with time using configured timezone\n                  return new Intl.DateTimeFormat(\"en-US\", {\n                    timeZone: timezone,\n                    year: \"numeric\",\n                    month: \"short\",\n                    day: \"numeric\",\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    hour12: true,\n                  }).format(displayDate);\n                };\n\n                return (\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <p className=\"text-sm\">\n                      <strong>Room:</strong>{\" \"}\n                      {currentAdmission.currentRoomNumber}\n                    </p>\n                    <p className=\"text-sm\">\n                      <strong>Ward Type:</strong>{\" \"}\n                      {currentAdmission.currentWardType}\n                    </p>\n                    <p className=\"text-sm\">\n                      <strong>Admission Date & Time:</strong>{\" \"}\n                      {formatAdmissionDateTime(currentAdmission.admissionDate)}\n                    </p>\n                  </div>\n                );\n              }\n              return null;\n            })()}\n\n            <div className=\"mt-4\">\n              <Label htmlFor=\"discharge-datetime\">Discharge Date & Time</Label>\n              <Input\n                id=\"discharge-datetime\"\n                type=\"datetime-local\"\n                value={dischargeDateTime}\n                onChange={(e) => setDischargeDateTime(e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsDischargeDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => onDischargePatient(dischargeDateTime)}\n              disabled={dischargePatientMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              {dischargePatientMutation.isPending\n                ? \"Discharging...\"\n                : \"Discharge Patient\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Room Update Dialog */}\n      <Dialog\n        open={isRoomUpdateDialogOpen}\n        onOpenChange={setIsRoomUpdateDialogOpen}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Update Room Assignment</DialogTitle>\n          </DialogHeader>\n\n          <form\n            onSubmit={roomUpdateForm.handleSubmit(onRoomUpdate)}\n            className=\"space-y-4\"\n          >\n            <div className=\"space-y-2\">\n              <Label>Ward Type *</Label>\n              <Select\n                value={roomUpdateForm.watch(\"wardType\")}\n                onValueChange={(value) => {\n                  roomUpdateForm.setValue(\"wardType\", value);\n                  roomUpdateForm.setValue(\"roomNumber\", \"\"); // Clear room selection when ward type changes\n                }}\n                data-testid=\"select-update-ward-type\"\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select ward type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {roomTypes.map((roomType: any) => (\n                    <SelectItem key={roomType.id} value={roomType.name}>\n                      {roomType.name} ({roomType.category}) - ₹\n                      {roomType.dailyCost}/day\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Room Number *</Label>\n              <Select\n                value={roomUpdateForm.watch(\"roomNumber\")}\n                onValueChange={(value) =>\n                  roomUpdateForm.setValue(\"roomNumber\", value)\n                }\n                disabled={!roomUpdateForm.watch(\"wardType\")}\n                data-testid=\"select-update-room-number\"\n              >\n                <SelectTrigger>\n                  <SelectValue\n                    placeholder={\n                      roomUpdateForm.watch(\"wardType\")\n                        ? \"Select available room\"\n                        : \"Select ward type first\"\n                    }\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {(() => {\n                    const selectedWardType = roomUpdateForm.watch(\"wardType\");\n                    const selectedRoomType = roomTypes.find(\n                      (rt: any) => rt.name === selectedWardType,\n                    );\n\n                    if (!selectedRoomType) return null;\n\n                    // Get all rooms for this room type\n                    const allRoomsForType = rooms.filter(\n                      (room: any) =>\n                        room.roomTypeId === selectedRoomType.id &&\n                        room.isActive,\n                    );\n\n                    if (allRoomsForType.length === 0) {\n                      return (\n                        <SelectItem value=\"\" disabled>\n                          No rooms available in {selectedWardType}\n                        </SelectItem>\n                      );\n                    }\n\n                    // Check which rooms are actually occupied based on current admissions\n                    const occupiedRoomNumbers = new Set(\n                      allCurrentAdmissions\n                        .filter(\n                          (admission: any) =>\n                            admission.currentWardType === selectedWardType &&\n                            admission.status === \"admitted\",\n                        )\n                        .map((admission: any) => admission.currentRoomNumber),\n                    );\n\n                    return allRoomsForType.map((room: any) => {\n                      const isOccupied = occupiedRoomNumbers.has(\n                        room.roomNumber,\n                      );\n\n                      return (\n                        <SelectItem\n                          key={room.id}\n                          value={room.roomNumber}\n                          disabled={isOccupied}\n                          className={\n                            isOccupied\n                              ? \"text-gray-500 bg-gray-200 dark:bg-gray-800 dark:text-gray-400 cursor-not-allowed opacity-60 hover:bg-gray-200 dark:hover:bg-gray-800\"\n                              : \"\"\n                          }\n                        >\n                          {room.roomNumber}\n                          {isOccupied ? \" (Occupied)\" : \"\"}\n                        </SelectItem>\n                      );\n                    });\n                  })()}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsRoomUpdateDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateRoomMutation.isPending}>\n                {updateRoomMutation.isPending ? \"Updating...\" : \"Update Room\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Payment Dialog */}\n      <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Payment</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"py-4\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Payment Amount *</Label>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  placeholder=\"Enter payment amount\"\n                  data-testid=\"input-payment-amount\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Payment Method</Label>\n                <Select defaultValue=\"cash\">\n                  <SelectTrigger data-testid=\"select-payment-method\">\n                    <SelectValue placeholder=\"Select payment method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"card\">Card</SelectItem>\n                    <SelectItem value=\"upi\">UPI</SelectItem>\n                    <SelectItem value=\"bank-transfer\">Bank Transfer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsPaymentDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  const amount = parseFloat(paymentAmount);\n                  if (amount > 0) {\n                    addPaymentMutation.mutate({\n                      amount: amount,\n                      paymentMethod: \"cash\", // Default to cash, can be extended with a dropdown\n                      reason: \"Payment\",\n                    });\n                  }\n                }}\n                disabled={\n                  addPaymentMutation.isPending ||\n                  !paymentAmount ||\n                  parseFloat(paymentAmount) <= 0\n                }\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                {addPaymentMutation.isPending\n                  ? \"Adding Payment...\"\n                  : \"Add Payment\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Discount Dialog */}\n        <Dialog\n          open={isDiscountDialogOpen}\n          onOpenChange={setIsDiscountDialogOpen}\n        >\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add Discount</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"py-4\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Discount Amount *</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    value={discountAmount}\n                    onChange={(e) => setDiscountAmount(e.target.value)}\n                    placeholder=\"Enter discount amount\"\n                    data-testid=\"input-discount-amount\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Reason for Discount</Label>\n                  <Input\n                    type=\"text\"\n                    value={discountReason}\n                    onChange={(e) => setDiscountReason(e.target.value)}\n                    placeholder=\"Enter reason for discount (optional)\"\n                    data-testid=\"input-discount-reason\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsDiscountDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  const amount = parseFloat(discountAmount);\n\n                  if (amount > 0) {\n                    addDiscountMutation.mutate({\n                      amount: amount,\n                      reason: discountReason.trim() || \"Manual discount\",\n                      discountType: \"manual\",\n                    });\n                  } else {\n                    toast({\n                      title: \"Error\",\n                      description: \"Please enter a valid discount amount.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n                disabled={\n                  addDiscountMutation.isPending ||\n                  !discountAmount ||\n                  parseFloat(discountAmount) <= 0\n                }\n                className=\"bg-red-600 hover:bg-red-700 text-white\"\n              >\n                {addDiscountMutation.isPending\n                  ? \"Adding Discount...\"\n                  : \"Add Discount\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Comprehensive Bill Dialog */}\n        {isComprehensiveBillOpen && comprehensiveBillData && (\n          <ComprehensiveBillTemplate\n            billData={comprehensiveBillData}\n            hospitalInfo={hospitalInfo}\n            isOpen={isComprehensiveBillOpen}\n            onClose={() => {\n              console.log(\"Closing comprehensive bill dialog\");\n              setIsComprehensiveBillOpen(false);\n            }}\n          />\n        )}\n\n        {/* OPD Visit Dialog */}\n        <Dialog open={isOpdVisitDialogOpen} onOpenChange={setIsOpdVisitDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Schedule OPD Appointment</DialogTitle>\n            </DialogHeader>\n\n            <Form {...opdVisitForm}>\n              <form\n                onSubmit={opdVisitForm.handleSubmit((data) => {\n                  console.log(\"OPD form submitted with data:\", data);\n\n                  // Validate required fields\n                  if (!data.doctorId) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Please select a doctor\",\n                      variant: \"destructive\",\n                    });\n                    return;\n                  }\n\n                  if (!data.scheduledDate) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Please select a date\",\n                      variant: \"destructive\",\n                    });\n                    return;\n                  }\n\n                  if (!data.scheduledTime) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Please select a time\",\n                      variant: \"destructive\",\n                    });\n                    return;\n                  }\n\n                  // Ensure consultation fee is included\n                  const consultationFee = data.consultationFee || 0;\n                  if (consultationFee <= 0) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Please enter a valid consultation fee\",\n                      variant: \"destructive\",\n                    });\n                    return;\n                  }\n\n                  createOpdVisitMutation.mutate({\n                    ...data,\n                    consultationFee: consultationFee,\n                    amount: consultationFee // Also store as amount for consistent access\n                  });\n                })}\n                className=\"space-y-4\"\n              >\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={opdVisitForm.control}\n                    name=\"doctorId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Doctor *</FormLabel>\n                        <Select\n                          onValueChange={(value) => {\n                            field.onChange(value);\n                            // Auto-fill consultation fee when doctor is selected\n                            const selectedDoctor = doctors?.find((d: Doctor) => d.id === value);\n                            if (selectedDoctor) {\n                              opdVisitForm.setValue(\"consultationFee\", selectedDoctor.consultationFee);\n                            } else {\n                              // If no doctor is selected or it's an invalid ID, reset fee\n                              opdVisitForm.setValue(\"consultationFee\", undefined);\n                            }\n                          }}\n                          defaultValue={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-opd-doctor\">\n                              <SelectValue placeholder=\"Select a doctor\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {doctors?.map((doctor: Doctor) => (\n                              <SelectItem key={doctor.id} value={doctor.id}>\n                                {doctor.name} - {doctor.specialization}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={opdVisitForm.control}\n                    name=\"consultationFee\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <Label>Consultation Fee (₹)</Label>\n                        {(() => {\n                          const selectedDoctorId = opdVisitForm.watch(\"doctorId\");\n                          const selectedDoctor = doctors.find(\n                            (d: Doctor) => d.id === selectedDoctorId,\n                          );\n                          const defaultFee = selectedDoctor ? selectedDoctor.consultationFee : 0;\n                          const currentFee = opdVisitForm.watch(\"consultationFee\");\n\n                          // Set default fee when doctor changes, but only if the field hasn't been manually edited\n                          React.useEffect(() => {\n                            if (selectedDoctor && (currentFee === undefined || currentFee === 0)) {\n                              opdVisitForm.setValue(\"consultationFee\", defaultFee);\n                            }\n                          }, [selectedDoctorId, defaultFee]); // Remove currentFee dependency to prevent interference\n\n                          return (\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                step=\"1\"\n                                value={currentFee === undefined ? \"\" : currentFee}\n                                onChange={(e) => {\n                                  const value = e.target.value;\n                                  // Allow empty string (complete erasure)\n                                  if (value === \"\") {\n                                    field.onChange(undefined);\n                                    opdVisitForm.setValue(\"consultationFee\", undefined);\n                                  } else {\n                                    const fee = parseFloat(value) || 0;\n                                    field.onChange(fee);\n                                    opdVisitForm.setValue(\"consultationFee\", fee);\n                                  }\n                                }}\n                                placeholder=\"Enter consultation fee\"\n                                data-testid=\"input-consultation-fee\"\n                              />\n                            </FormControl>\n                          );\n                        })()}\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={opdVisitForm.control}\n                    name=\"scheduledDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date *</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            {...field}\n                            data-testid=\"input-opd-date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={opdVisitForm.control}\n                    name=\"scheduledTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Time *</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"time\"\n                            {...field}\n                            data-testid=\"input-opd-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={opdVisitForm.control}\n                  name=\"symptoms\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Symptoms (Optional)</FormLabel>\n                      <FormControl>\n                        <textarea\n                          {...field}\n                          className=\"w-full min-h-[80px] p-2 border border-input rounded-md\"\n                          placeholder=\"Enter symptoms or reason for visit...\"\n                          data-testid=\"textarea-opd-symptoms\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsOpdVisitDialogOpen(false)}\n                    data-testid=\"button-cancel-opd\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createOpdVisitMutation.isPending}\n                    data-testid=\"button-schedule-opd-visit\"\n                  >\n                    {createOpdVisitMutation.isPending\n                      ? \"Scheduling...\"\n                      : \"Schedule Appointment\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n    </div>\n  );\n}","size_bytes":210267},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"replit.md":{"content":"# MedCare Pro - Hospital Management System\n\n## Overview\n\nMedCare Pro is a comprehensive full-stack web application designed for efficient hospital management. It provides functionalities for patient registration, billing, pathology management, doctor management, and system administration. The system aims to be a complete solution for healthcare facilities, featuring a modern, responsive UI built with React and TypeScript, an Express.js API, and SQLite database storage. It supports role-based authentication for administrators, doctors, receptionists, and billing staff. The business vision is to streamline hospital operations, improve patient care, and enhance administrative efficiency, positioning MedCare Pro as a leading solution in the healthcare IT market.\n\n## Demo Credentials\n\nThe system comes pre-configured with demo users for testing:\n\n- **Root User (Super Admin)**\n  - Username: `root`\n  - Password: `root123`\n  - Roles: Super User\n\n- **Doctor**\n  - Username: `doctor`\n  - Password: `doctor123`\n  - Roles: Doctor, Billing Staff\n\n- **Billing Staff**\n  - Username: `billing`\n  - Password: `billing123`\n  - Roles: Billing Staff\n\n- **Reception Staff**\n  - Username: `reception`\n  - Password: `reception123`\n  - Roles: Receptionist\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n**October 15, 2025** - Timezone Display Enhancement\n- Implemented centralized timezone-aware date/time formatting across the application\n- Created useTimezone hook with formatDateTime, formatDate, and formatTime utilities\n- Updated all patient-related pages (patients list, patient details, OPD, pathology, services, admission) to use timezone-aware formatting\n- Removed hardcoded timezone conversions (IST corrections) in favor of configurable timezone support\n- Enhanced settings page to invalidate React Query cache when timezone changes, ensuring immediate UI updates\n- All timestamps now dynamically adjust based on the configured hospital timezone setting\n\n**October 2, 2025** - Replit Environment Setup Completed\n- Successfully imported GitHub repository into Replit environment\n- Verified all dependencies and configurations are working correctly\n- Workflow configured: \"Start application\" running `npm run dev` on port 5000\n- Deployment configuration set up for autoscale deployment\n- Vite already properly configured with `allowedHosts: true` and `host: \"0.0.0.0\"` for Replit proxy compatibility\n- Application successfully running and accessible via web preview\n- SQLite database (hospital.db) present with demo data\n\n## System Architecture\n\n### Frontend Architecture\n\nThe frontend uses React 18 with TypeScript, Wouter for routing, and TanStack Query for server state management. UI components are built with Radix UI and styled using Tailwind CSS. Form handling is managed by React Hook Form with Zod validation. Vite is used for development and optimized production builds. The frontend incorporates a protected route system with authentication middleware and a responsive sidebar navigation layout.\n\n### Backend Architecture\n\nThe backend is a RESTful API built with Express.js and TypeScript. It utilizes Drizzle ORM for type-safe SQLite database operations. Authentication is JWT-based with bcrypt for password hashing. The API is organized route-wise with middleware for authentication and logging, and features centralized error handling.\n\n### Data Storage Solutions\n\nSQLite serves as the primary database, managed by Drizzle ORM for type-safe queries and schema management. It employs a normalized relational design with foreign key relationships. Drizzle Kit is used for database schema migrations. Key tables include Users, Patients, Doctors, Patient Visits, Bills, Services, Pathology Tests, and Audit Logs.\n\n### Authentication and Authorization\n\nThe system implements JWT-based authentication with bcrypt for password hashing. It supports role-based access control for administrators, doctors, receptionists, and billing staff. Token-based sessions are used, with both frontend and backend route guards ensuring secure access.\n\n### UI/UX Decisions\n\nThe application prioritizes a modern and responsive user interface. Radix UI primitives are used for accessible and customizable components, complemented by Tailwind CSS for a utility-first styling approach. Lucide Icons provide consistent iconography. The design emphasizes intuitive navigation and clear presentation of information, such as dynamic OPD consultation fees and time-based scheduling.\n\n### Feature Specifications\n\nKey features include:\n- Patient registration and management\n- Billing and invoicing with automated doctor earnings calculation\n- Pathology test management\n- Doctor management with salary tracking and individual payment processing\n- OPD management with dynamic consultation fees and doctor-segregated listings\n- Secure self-profile editing for all users\n- Role-based access control for different user types\n- **Configurable Timezone Support**: System timezone can be configured in settings for international deployment\n  - All database timestamps are stored in UTC for consistency and reliability\n  - Frontend utilities format timestamps for display in the configured timezone\n  - Supports major global timezones with DST handling via Intl.DateTimeFormat\n  - Timezone cache invalidation ensures immediate propagation of timezone changes\n\n## External Dependencies\n\n### Third-Party Services\n- **Neon Database**: PostgreSQL serverless database option (used for potential future scaling)\n\n### UI and Component Libraries\n- **Radix UI**: UI primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide Icons**: Icon library\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling\n- **Zod**: Runtime type validation\n\n### Development and Build Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Static type checking\n- **ESBuild**: Fast bundler\n- **PostCSS**: CSS processing\n- **Drizzle Kit**: Database migration and schema management tools\n\n### Database and Storage\n- **better-sqlite3**: SQLite database driver\n- **Drizzle ORM**: Type-safe database operations","size_bytes":6162},"client/src/components/smart-billing-dialog.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Service {\n  id: string;\n  name: string;\n  price: number;\n  category: string;\n  billingType?: string;\n  billingParameters?: string;\n}\n\ninterface Doctor {\n  id: string;\n  name: string;\n  specialization: string;\n}\n\ninterface SmartBillingDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: any) => void;\n  services: Service[];\n  doctors: Doctor[];\n  isPending?: boolean;\n  patientId: string;\n  currentDate: string;\n  currentTime: string;\n}\n\nexport default function SmartBillingDialog({\n  isOpen,\n  onClose,\n  onSubmit,\n  services,\n  doctors,\n  isPending = false,\n  patientId,\n  currentDate,\n  currentTime\n}: SmartBillingDialogProps) {\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [billingPreview, setBillingPreview] = useState<any>(null);\n\n  const form = useForm({\n    defaultValues: {\n      serviceId: \"\",\n      doctorId: null as string | null,\n      quantity: 1,\n      hours: 1,\n      distance: 0,\n      price: 0,\n      scheduledDate: currentDate,\n      scheduledTime: currentTime,\n      notes: \"\",\n    },\n  });\n\n  const watchedValues = form.watch();\n\n  useEffect(() => {\n    if (selectedService && selectedService.billingType) {\n      calculateBillingPreview();\n    }\n  }, [selectedService, watchedValues.quantity, watchedValues.hours, watchedValues.distance, watchedValues.price]);\n\n  const calculateBillingPreview = () => {\n    if (!selectedService) return;\n\n    let totalAmount = 0;\n    let breakdown = \"\";\n    let quantity = 1;\n\n    switch (selectedService.billingType) {\n      case \"per_instance\":\n        quantity = watchedValues.quantity || 1;\n        totalAmount = selectedService.price * quantity;\n        breakdown = `₹${selectedService.price} × ${quantity} instance${quantity > 1 ? 's' : ''} = ₹${totalAmount}`;\n        break;\n\n      case \"per_24_hours\":\n        quantity = watchedValues.quantity || 1;\n        totalAmount = selectedService.price * quantity;\n        breakdown = `₹${selectedService.price} × ${quantity} day${quantity > 1 ? 's' : ''} = ₹${totalAmount}`;\n        break;\n\n      case \"per_hour\":\n        quantity = watchedValues.hours || 1;\n        totalAmount = selectedService.price * quantity;\n        breakdown = `₹${selectedService.price} × ${quantity} hour${quantity > 1 ? 's' : ''} = ₹${totalAmount}`;\n        break;\n\n      case \"composite\":\n        const params = selectedService.billingParameters ? JSON.parse(selectedService.billingParameters) : {};\n        const fixedCharge = params.fixedCharge || selectedService.price;\n        const perKmRate = params.perKmRate || 0;\n        const distance = watchedValues.distance || 0;\n\n        const distanceCharge = perKmRate * distance;\n        totalAmount = fixedCharge + distanceCharge;\n        breakdown = `Fixed: ₹${fixedCharge}${distance > 0 ? ` + Distance: ₹${perKmRate} × ${distance}km = ₹${distanceCharge}` : ''} = ₹${totalAmount}`;\n        quantity = 1;\n        break;\n\n      case \"variable\":\n        quantity = 1;\n        totalAmount = watchedValues.quantity || 0;\n        breakdown = `Variable price: ₹${totalAmount}`;\n        break;\n\n      case \"per_date\":\n        quantity = watchedValues.quantity || 1;\n        totalAmount = selectedService.price * quantity;\n        breakdown = `₹${selectedService.price} × ${quantity} calendar day${quantity > 1 ? 's' : ''} = ₹${totalAmount}`;\n        break;\n\n      default:\n        quantity = watchedValues.quantity || 1;\n        totalAmount = selectedService.price * quantity;\n        breakdown = `₹${selectedService.price} × ${quantity} = ₹${totalAmount}`;\n    }\n\n    setBillingPreview({\n      totalAmount,\n      quantity,\n      breakdown,\n      billingType: selectedService.billingType\n    });\n  };\n\n  const handleServiceChange = (serviceId: string) => {\n    const service = services.find(s => s.id === serviceId);\n    setSelectedService(service || null);\n    form.setValue(\"serviceId\", serviceId);\n\n    // Reset quantity fields\n    form.setValue(\"quantity\", service?.billingType === \"variable\" ? 0 : 1);\n    form.setValue(\"hours\", 1);\n    form.setValue(\"distance\", 0);\n    form.setValue(\"price\", service?.price || 0);\n  };\n\n  const handleSubmit = (data: any) => {\n    if (!selectedService || !billingPreview) return;\n\n    const serviceData = {\n      patientId,\n      serviceId: selectedService.id,\n      serviceName: selectedService.name,\n      serviceType: selectedService.category,\n      price: selectedService.billingType === \"variable\" ? data.quantity : selectedService.price,\n      billingType: selectedService.billingType || \"per_instance\",\n      billingQuantity: billingPreview.quantity,\n      billingParameters: selectedService.billingType === \"composite\" ? \n        JSON.stringify({ distance: data.distance || 0 }) : \n        selectedService.billingType === \"per_hour\" ? \n        JSON.stringify({ hours: data.hours || 1 }) :\n        selectedService.billingType === \"variable\" ?\n        JSON.stringify({ price: data.quantity || 0 }) : null,\n      calculatedAmount: billingPreview.totalAmount,\n      scheduledDate: data.scheduledDate,\n      scheduledTime: data.scheduledTime,\n      doctorId: data.doctorId || null,\n      notes: data.notes,\n      status: \"scheduled\",\n    };\n\n    onSubmit(serviceData);\n  };\n\n  const getBillingTypeLabel = (type: string) => {\n    switch (type) {\n      case \"per_instance\": return \"Per Instance\";\n      case \"per_24_hours\": return \"Per 24 Hours\";\n      case \"per_hour\": return \"Per Hour\";\n      case \"composite\": return \"Composite\";\n      case \"variable\": return \"Variable\";\n      case \"per_date\": return \"Per Date\";\n      default: return \"Per Instance\";\n    }\n  };\n\n  const getBillingTypeColor = (type: string) => {\n    switch (type) {\n      case \"per_instance\": return \"bg-blue-100 text-blue-800\";\n      case \"per_24_hours\": return \"bg-green-100 text-green-800\";\n      case \"per_hour\": return \"bg-orange-100 text-orange-800\";\n      case \"composite\": return \"bg-purple-100 text-purple-800\";\n      case \"variable\": return \"bg-yellow-100 text-yellow-800\";\n      case \"per_date\": return \"bg-indigo-100 text-indigo-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add Service with Smart Billing</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label>Select Service *</Label>\n            <Select onValueChange={handleServiceChange} data-testid=\"select-service\">\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose a service\" />\n              </SelectTrigger>\n              <SelectContent>\n                {services.map((service) => (\n                  <SelectItem key={service.id} value={service.id}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{service.name}</span>\n                      <div className=\"flex items-center gap-2 ml-2\">\n                        <Badge className={getBillingTypeColor(service.billingType || \"per_instance\")} variant=\"secondary\">\n                          {getBillingTypeLabel(service.billingType || \"per_instance\")}\n                        </Badge>\n                        <span className=\"text-sm\">₹{service.price}</span>\n                      </div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Doctor Selection Field */}\n          <div className=\"space-y-2\">\n            <Label>Assign Doctor</Label>\n            <Select \n              value={form.watch(\"doctorId\") ?? \"none\"}\n              onValueChange={(value) => {\n                console.log(\"Doctor selection changed to:\", value);\n                form.setValue(\"doctorId\", value === \"none\" ? null : value);\n              }} \n              data-testid=\"select-doctor\"\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose a doctor (optional)\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">No Doctor Assigned</SelectItem>\n                {doctors.map((doctor) => (\n                  <SelectItem key={doctor.id} value={doctor.id}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{doctor.name}</span>\n                      <span className=\"text-sm text-muted-foreground ml-2\">{doctor.specialization}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {selectedService && (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Scheduled Date *</Label>\n                  <Input\n                    type=\"date\"\n                    {...form.register(\"scheduledDate\")}\n                    data-testid=\"input-scheduled-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Scheduled Time *</Label>\n                  <Input\n                    type=\"time\"\n                    {...form.register(\"scheduledTime\")}\n                    data-testid=\"input-scheduled-time\"\n                  />\n                </div>\n              </div>\n\n              {/* Billing Quantity Fields */}\n              {selectedService.billingType === \"per_instance\" && (\n                <div className=\"space-y-2\">\n                  <Label>Quantity</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    {...form.register(\"quantity\", { valueAsNumber: true })}\n                    data-testid=\"input-quantity\"\n                  />\n                </div>\n              )}\n\n              {selectedService.billingType === \"per_24_hours\" && (\n                <div className=\"space-y-2\">\n                  <Label>Number of Days</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    {...form.register(\"quantity\", { valueAsNumber: true })}\n                    data-testid=\"input-days\"\n                  />\n                  <p className=\"text-sm text-gray-500\">Room charges are calculated per 24-hour period</p>\n                </div>\n              )}\n\n              {selectedService.billingType === \"per_hour\" && (\n                <div className=\"space-y-2\">\n                  <Label>Number of Hours</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"0.5\"\n                    step=\"0.5\"\n                    {...form.register(\"hours\", { valueAsNumber: true })}\n                    data-testid=\"input-hours\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    Service will be charged at ₹{selectedService.price} per hour\n                  </p>\n                </div>\n              )}\n\n              {selectedService.billingType === \"composite\" && (\n                <div className=\"space-y-2\">\n                  <Label>Distance (km)</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.1\"\n                    {...form.register(\"distance\", { valueAsNumber: true })}\n                    data-testid=\"input-distance\"\n                    placeholder=\"Enter distance in kilometers\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    {(() => {\n                      const params = selectedService.billingParameters ? JSON.parse(selectedService.billingParameters) : {};\n                      return `Fixed charge: ₹${params.fixedCharge || selectedService.price}, Per km: ₹${params.perKmRate || 0}`;\n                    })()}\n                  </p>\n                </div>\n              )}\n\n              {selectedService.billingType === \"variable\" && (\n                <div className=\"space-y-2\">\n                  <Label>Price (₹)</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    {...form.register(\"quantity\", { valueAsNumber: true })}\n                    data-testid=\"input-variable-price\"\n                    placeholder=\"Enter exact amount to charge\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    Enter the exact amount to be charged\n                  </p>\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label>Notes</Label>\n                <Textarea\n                  {...form.register(\"notes\")}\n                  placeholder=\"Optional notes about the service\"\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n\n              {billingPreview && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Billing Preview</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Service:</span>\n                        <span>{selectedService.name}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Billing Type:</span>\n                        <Badge className={getBillingTypeColor(billingPreview.billingType)} variant=\"secondary\">\n                          {getBillingTypeLabel(billingPreview.billingType)}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between text-sm text-gray-600\">\n                        <span>Calculation:</span>\n                        <span>{billingPreview.breakdown}</span>\n                      </div>\n                      <div className=\"flex justify-between font-semibold text-lg pt-2 border-t\">\n                        <span>Total Amount:</span>\n                        <span>₹{billingPreview.totalAmount}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isPending || !selectedService || !billingPreview}\n            >\n              {isPending ? \"Adding...\" : \"Add Service\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15584},"client/src/components/receipt-template.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Printer } from 'lucide-react';\n\ninterface ReceiptTemplateProps {\n  receiptData: {\n    type: 'service' | 'pathology' | 'admission' | 'payment' | 'discount';\n    id: string;\n    title: string;\n    date: string;\n    amount?: number;\n    description: string;\n    patientName: string;\n    patientId: string;\n    details?: Record<string, any>;\n  };\n  hospitalInfo: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    registrationNumber?: string;\n    logo?: string;\n  };\n  onPrint?: () => void;\n}\n\nexport function ReceiptTemplate({ receiptData, hospitalInfo, onPrint }: ReceiptTemplateProps) {\n  const getReceiptTitle = (type: string, details?: Record<string, any>) => {\n    switch (type) {\n      case 'pathology':\n        return 'Pathology Receipt';\n      case 'service':\n        // Check if it's an OPD consultation first - check multiple possible identifiers\n        if (details?.category === 'OPD Consultation' ||\n            details?.serviceType === 'opd' ||\n            details?.serviceName === 'OPD Consultation' ||\n            receiptData.title === 'OPD Consultation' ||\n            receiptData.title?.includes('OPD') ||\n            receiptData.description?.includes('OPD') ||\n            details?.type === 'opd_visit' ||\n            details?.consultationFee) {\n          return 'OPD Receipt';\n        }\n\n        // Get the service category from details\n        const category = details?.category;\n        if (category) {\n          switch (category) {\n            case 'diagnostics':\n              return 'Diagnostic Service Receipt';\n            case 'procedures':\n              return 'Medical Procedure Receipt';\n            case 'operations':\n              return 'Surgical Operation Receipt';\n            case 'misc':\n              return 'Miscellaneous Service Receipt';\n            default:\n              return 'Service Receipt';\n          }\n        }\n        return 'Service Receipt';\n      case 'admission':\n        return 'Admission Receipt';\n      case 'payment':\n        return 'Payment Receipt';\n      case 'discount':\n        return 'Discount Receipt';\n      default:\n        return 'Receipt';\n    }\n  };\n\n  const getPatientAge = () => {\n    // Try to extract age from patient details if available\n    return receiptData.details?.patientAge || 'N/A';\n  };\n\n  const getPatientGender = () => {\n    // Try to extract gender from patient details if available\n    return receiptData.details?.patientGender || 'N/A';\n  };\n\n  const getDoctorName = () => {\n    // Try to extract doctor name from details if available\n    if (receiptData.details?.doctorName) {\n      const doctorName = receiptData.details.doctorName;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n\n    // For pathology receipts, try to get doctor from the details\n    if (receiptData.type === 'pathology' && receiptData.details?.doctor) {\n      const doctorName = receiptData.details.doctor.name;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n\n    // For service receipts, try to get doctor from the details\n    if (receiptData.type === 'service' && receiptData.details?.doctor) {\n      const doctorName = receiptData.details.doctor.name;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n\n    // For admission receipts, try to get doctor from the details\n    if (receiptData.type === 'admission' && receiptData.details?.doctor) {\n      const doctorName = receiptData.details.doctor.name;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n\n    // If no doctor information is available\n    return 'No Doctor Assigned';\n  };\n\n  const getReceiptNumber = () => {\n    // Always use the stored receipt number\n    return receiptData.details?.receiptNumber || 'RECEIPT-NOT-GENERATED';\n  };\n\n  const handlePrint = async () => {\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const receiptNumber = getReceiptNumber();\n\n    const receiptHtml = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Receipt - ${getReceiptTitle(receiptData.type, receiptData.details)}</title>\n          <style>\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n\n            body {\n              font-family: Arial, sans-serif;\n              line-height: 1.4;\n              color: #333;\n              background: white;\n              font-size: 14px;\n            }\n\n            .receipt {\n              max-width: 800px;\n              margin: 0 auto;\n              padding: 20px;\n              display: flex;\n              flex-direction: column;\n            }\n\n            /* Page Header for printing */\n            .page-header {\n              display: none;\n            }\n\n            /* Page Footer for printing */\n            .page-footer {\n              display: none;\n            }\n\n            /* Header - Logo and Hospital Name only */\n            .header {\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              margin-bottom: 20px;\n              padding-bottom: 15px;\n              border-bottom: 2px solid #333;\n            }\n\n            .hospital-info {\n              display: flex;\n              align-items: center;\n              gap: 15px;\n            }\n\n            .hospital-logo {\n              width: 60px;\n              height: 60px;\n              object-fit: contain;\n            }\n\n            .hospital-name {\n              font-size: 24px;\n              font-weight: bold;\n              color: #333;\n            }\n\n            /* Receipt Title */\n            .receipt-title {\n              text-align: center;\n              font-size: 18px;\n              font-weight: bold;\n              margin: 10px 0 5px 0;\n              text-transform: uppercase;\n              letter-spacing: 1px;\n            }\n\n            /* Patient Information Box */\n            .patient-info-box {\n              border: 2px solid #333;\n              padding: 15px;\n              margin: 8px 0 5px 0;\n              background: #f9f9f9;\n            }\n\n            .patient-line-1 {\n              display: flex;\n              margin-bottom: 8px;\n              font-weight: bold;\n              gap: 20px;\n              align-items: center;\n            }\n\n            .patient-line-1 .name-section {\n              flex: 2;\n              min-width: 0;\n            }\n\n            .patient-line-1 .age-section {\n              flex: 0 0 auto;\n              min-width: 80px;\n            }\n\n            .patient-line-1 .sex-section {\n              flex: 0 0 auto;\n              min-width: 80px;\n            }\n\n            .patient-line-1 .date-section {\n              flex: 0 0 auto;\n              min-width: 120px;\n              text-align: right;\n            }\n\n            .patient-line-2 {\n              display: flex;\n              justify-content: space-between;\n              font-weight: bold;\n            }\n\n            /* Bill Details */\n            .bill-section {\n              margin: 2px 0 5px 0;\n              flex-grow: 1;\n            }\n\n            .bill-table {\n              width: 100%;\n              border-collapse: collapse;\n              margin: 5px 0;\n            }\n\n            .bill-table th,\n            .bill-table td {\n              border: 1px solid #333;\n              padding: 8px;\n              text-align: left;\n            }\n\n            .bill-table th {\n              background: #f0f0f0;\n              font-weight: bold;\n            }\n\n            .amount-cell {\n              text-align: right !important;\n            }\n\n            .total-row {\n              font-weight: bold;\n              background: #f0f0f0;\n            }\n\n            .description-section {\n              margin: 5px 0;\n              padding: 8px;\n              background: #f9f9f9;\n              border: 1px solid #ddd;\n            }\n\n            .description-title {\n              font-weight: bold;\n              margin-bottom: 5px;\n            }\n\n            /* Signature Section */\n            .signature-section {\n              margin: 35px 0;\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n            }\n\n            .signature-box {\n              text-align: center;\n              min-width: 200px;\n            }\n\n            .signature-line {\n              border-bottom: 1px solid #333;\n              margin-bottom: 5px;\n              height: 40px;\n            }\n\n            /* Footer */\n            .footer {\n              margin-top: 8px;\n              padding-top: 8px;\n              border-top: 2px solid #333;\n              text-align: center;\n              font-size: 12px;\n              line-height: 1.5;\n            }\n\n            .footer-line {\n              margin-bottom: 3px;\n            }\n\n            .receipt-id {\n              margin-top: 15px;\n              font-family: monospace;\n              font-size: 10px;\n              color: #666;\n            }\n\n            @page {\n              margin: 1.5in 1in 1in 1in;\n              size: A4;\n            }\n\n            @media print {\n              @page {\n                margin: 0;\n                size: A4;\n              }\n            }\n\n            @media print {\n              * {\n                -webkit-print-color-adjust: exact !important;\n                color-adjust: exact !important;\n              }\n\n              html, body {\n                margin: 0 !important;\n                padding: 0 !important;\n                height: auto !important;\n                background: white !important;\n              }\n\n              /* Hide browser default headers and footers */\n              @page {\n                margin: 0;\n                size: A4;\n              }\n\n              html {\n                -webkit-print-color-adjust: exact;\n              }\n\n              .receipt {\n                margin: 0 !important;\n                padding: 0 !important;\n                page-break-inside: avoid;\n              }\n\n              /* Show headers and footers on every page */\n              .page-header {\n                display: flex !important;\n                align-items: center;\n                justify-content: center;\n                padding: 15px 0;\n                border-bottom: 2px solid #333;\n                background: white;\n                width: 100%;\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                z-index: 1000;\n              }\n\n              .page-footer {\n                display: block !important;\n                text-align: center;\n                font-size: 12px;\n                line-height: 1.5;\n                padding: 10px 0;\n                border-top: 2px solid #333;\n                background: white;\n                width: 100%;\n                position: fixed;\n                bottom: 0;\n                left: 0;\n                right: 0;\n                z-index: 1000;\n              }\n\n              /* Hide the regular header and footer in print */\n              .header {\n                display: none !important;\n              }\n\n              .footer {\n                display: none !important;\n              }\n\n              /* Ensure content doesn't overlap with fixed header/footer */\n              .receipt-title {\n                margin-top: 100px !important;\n              }\n\n              .signature-section {\n                margin-bottom: 80px !important;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <!-- Page Header for printing -->\n          <div class=\"page-header\">\n            <div class=\"hospital-info\">\n              ${hospitalInfo.logo ? `\n                <img src=\"${hospitalInfo.logo}\" alt=\"Hospital Logo\" class=\"hospital-logo\">\n              ` : ''}\n              <div class=\"hospital-name\">${hospitalInfo.name}</div>\n            </div>\n          </div>\n\n          <!-- Page Footer for printing -->\n          <div class=\"page-footer\">\n            <div class=\"footer-line\">Address: ${hospitalInfo.address}</div>\n            <div class=\"footer-line\">Phone: ${hospitalInfo.phone} | Email: ${hospitalInfo.email}${hospitalInfo.registrationNumber ? ` | Reg. No.: ${hospitalInfo.registrationNumber}` : ''}</div>\n          </div>\n\n          <div class=\"receipt\">\n            <!-- Header - Logo and Hospital Name Only -->\n            <div class=\"header\">\n              <div class=\"hospital-info\">\n                ${hospitalInfo.logo ? `\n                  <img src=\"${hospitalInfo.logo}\" alt=\"Hospital Logo\" class=\"hospital-logo\">\n                ` : ''}\n                <div class=\"hospital-name\">${hospitalInfo.name}</div>\n              </div>\n            </div>\n\n            <!-- Receipt Title -->\n            <div class=\"receipt-title\">\n              ${getReceiptTitle(receiptData.type, receiptData.details)}\n            </div>\n\n            <!-- Patient Information Box -->\n            <div class=\"patient-info-box\">\n              <div class=\"patient-line-1\">\n                <span class=\"name-section\">Name: ${receiptData.patientName} (${receiptData.patientId})</span>\n                <span class=\"age-section\">Age: ${getPatientAge()} yrs</span>\n                <span class=\"sex-section\">Sex: ${getPatientGender()}</span>\n                <span class=\"date-section\">Date: ${(() => {\n                  const date = new Date(receiptData.date);\n                  return date.toLocaleDateString('en-US', {\n                    year: 'numeric',\n                    month: 'short',\n                    day: 'numeric',\n                    timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n                  });\n                })()}</span>\n              </div>\n              <div class=\"patient-line-2\">\n                <span>Doctor: ${getDoctorName()}</span>\n                ${receiptData.type === 'pathology' ? `\n                <div style=\"display: flex; gap: 30px; align-items: center;\">\n                  <span>Pathology Order: ${(() => {\n                    // Check if there's a formatted order number in the details\n                    if (receiptData.details?.orderNumber) {\n                      return receiptData.details.orderNumber;\n                    }\n                    // Check if there's an order object with orderNumber\n                    if (receiptData.details?.order?.orderNumber) {\n                      return receiptData.details.order.orderNumber;\n                    }\n                    // Check if there's an orderId in the order object\n                    if (receiptData.details?.order?.orderId) {\n                      return receiptData.details.order.orderId;\n                    }\n                    // Check if there's an orderId in the details\n                    if (receiptData.details?.orderId) {\n                      return receiptData.details.orderId;\n                    }\n                    // Check if there's an orderId in the rawData\n                    if (receiptData.details?.rawData?.order?.orderId) {\n                      return receiptData.details.rawData.order.orderId;\n                    }\n                    // Fallback to the ID if no order number is found\n                    return receiptData.id;\n                  })()}</span>\n                  <span>Receipt No: ${receiptNumber}</span>\n                </div>\n                ` : `<span>Receipt No: ${receiptNumber}</span>`}\n              </div>\n            </div>\n\n            <!-- Bill Section -->\n            <div class=\"bill-section\">\n              <table class=\"bill-table\">\n                <thead>\n                  <tr>\n                    <th style=\"width: 80%;\">${receiptData.type === 'pathology' ? 'Tests' : 'Description'}</th>\n                    <th style=\"width: 20%; text-align: right !important;\">Amount (₹)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  ${(() => {\n                    // For pathology receipts, show individual tests if available\n                    if (receiptData.type === 'pathology') {\n                      // Try multiple possible locations for test data\n                      let tests = null;\n\n                      console.log('=== PATHOLOGY RECEIPT DEBUG ===');\n                      console.log('receiptData.details:', receiptData.details);\n\n                      // Check if tests are in details.tests (direct from API)\n                      if (receiptData.details?.tests && Array.isArray(receiptData.details.tests)) {\n                        tests = receiptData.details.tests;\n                        console.log('Found tests in details.tests:', tests);\n                      }\n                      // Check if tests are in details.order.tests (from pathology order structure)\n                      else if (receiptData.details?.order?.tests && Array.isArray(receiptData.details.order.tests)) {\n                        tests = receiptData.details.order.tests;\n                        console.log('Found tests in details.order.tests:', tests);\n                      }\n                      // Check if tests are in details.rawData.tests (backup location)\n                      else if (receiptData.details?.rawData?.tests && Array.isArray(receiptData.details.rawData.tests)) {\n                        tests = receiptData.details.rawData.tests;\n                        console.log('Found tests in details.rawData.tests:', tests);\n                      }\n                      // Check if the entire details object is a pathology order with tests\n                      else if (receiptData.details && Array.isArray(receiptData.details) && receiptData.details.length > 0) {\n                        // Sometimes the details might be the tests array directly\n                        tests = receiptData.details;\n                        console.log('Found tests as details array directly:', tests);\n                      }\n\n                      console.log('Final tests to use:', tests);\n\n                      if (tests && tests.length > 0) {\n                        return tests.map((test, index) => {\n                          const testName = test.testName || test.test_name || test.name || `Lab Test ${index + 1}`;\n                          const testPrice = test.price || 0;\n                          console.log(`Test ${index + 1}: ${testName} - ₹${testPrice}`);\n                          return `\n                            <tr>\n                              <td>${testName}</td>\n                              <td class=\"amount-cell\" style=\"text-align: right !important;\">₹${testPrice.toLocaleString()}</td>\n                            </tr>\n                          `;\n                        }).join('');\n                      } else {\n                        console.log('No tests found, falling back to order display');\n                        // Fallback: show the pathology order as a single line item\n                        const orderName = receiptData.title || `Pathology Order ${receiptData.details?.orderId || receiptData.id}`;\n                        return `\n                          <tr>\n                            <td>${orderName}</td>\n                            <td class=\"amount-cell\" style=\"text-align: right !important;\">₹${receiptData.amount ? receiptData.amount.toLocaleString() : '0'}</td>\n                          </tr>\n                        `;\n                      }\n                    }\n\n                    // For service receipts, show individual services if available\n                    if (receiptData.type === 'service' && receiptData.details?.services && Array.isArray(receiptData.details.services)) {\n                      const services = receiptData.details.services;\n                      \n                      if (services.length > 0) {\n                        return services.map((service, index) => {\n                          const serviceName = service.serviceName || service.name || `Service ${index + 1}`;\n                          const serviceAmount = service.calculatedAmount || service.price || service.amount || 0;\n                          return `\n                            <tr>\n                              <td>${serviceName}</td>\n                              <td class=\"amount-cell\" style=\"text-align: right !important;\">₹${serviceAmount.toLocaleString()}</td>\n                            </tr>\n                          `;\n                        }).join('');\n                      }\n                    }\n\n                    // For other types or if no services available, use the title as usual\n                    // Check if this is an OPD consultation and format accordingly\n                    let serviceDescription = receiptData.title;\n                    if (receiptData.details?.category === 'OPD Consultation' ||\n                        receiptData.details?.serviceType === 'opd' ||\n                        receiptData.details?.serviceName === 'OPD Consultation' ||\n                        receiptData.title === 'OPD Consultation' ||\n                        receiptData.title?.includes('OPD') ||\n                        receiptData.description?.includes('OPD') ||\n                        receiptData.details?.type === 'opd_visit' ||\n                        receiptData.details?.consultationFee) {\n                      // For OPD consultations, show \"OPD Consultation - Doctor Name\"\n                      const doctorName = getDoctorName();\n                      serviceDescription = `OPD Consultation - ${doctorName}`;\n                    }\n                    \n                    return `\n                      <tr>\n                        <td>${serviceDescription}</td>\n                        <td class=\"amount-cell\" style=\"text-align: right !important;\">₹${receiptData.amount ? receiptData.amount.toLocaleString() : '0'}</td>\n                      </tr>\n                    `;\n                  })()}\n                  <tr class=\"total-row\">\n                    <td style=\"text-align: right; font-weight: bold;\">Total Amount:</td>\n                    <td class=\"amount-cell\" style=\"font-weight: bold; text-align: right !important;\">₹${receiptData.amount ? receiptData.amount.toLocaleString() : '0'}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n\n            <!-- Description Section (if applicable) -->\n            ${receiptData.description && !receiptData.details?.services ? `\n              <div class=\"description-section\">\n                <div class=\"description-title\">Additional Information:</div>\n                <div>${receiptData.description}</div>\n              </div>\n            ` : ''}\n\n            <!-- Signature Section -->\n            <div class=\"signature-section\">\n              <div class=\"signature-box\" style=\"margin-left: auto;\">\n                <div class=\"signature-line\"></div>\n                <div>Authorized Signature & Stamp</div>\n              </div>\n            </div>\n\n            <!-- Footer -->\n            <div class=\"footer\">\n              <div class=\"footer-line\">Address: ${hospitalInfo.address}</div>\n              <div class=\"footer-line\">Phone: ${hospitalInfo.phone} | Email: ${hospitalInfo.email}${hospitalInfo.registrationNumber ? ` | Reg. No.: ${hospitalInfo.registrationNumber}` : ''}</div>\n              <div class=\"receipt-id\">\n                Receipt ID: ${receiptNumber} | Generated on ${new Date().toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(receiptHtml);\n    printWindow.document.close();\n    printWindow.focus();\n\n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 250);\n\n    onPrint?.();\n  };\n\n  return (\n    <Button\n      onClick={handlePrint}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"flex items-center justify-center text-blue-600 hover:text-blue-700 hover:bg-blue-50 h-full min-h-full w-12 px-3\"\n      title=\"Print Receipt\"\n    >\n      <Printer className=\"h-4 w-4\" />\n    </Button>\n  );\n}","size_bytes":24177},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/admitted-today.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  UserCheck, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  Stethoscope,\n  Phone,\n  IndianRupee,\n  User\n} from \"lucide-react\";\nimport type { Admission, Patient, Doctor } from \"@shared/schema\";\n\ninterface AdmissionWithDetails extends Admission {\n  patient: Patient;\n  doctor: Doctor | null;\n}\n\nexport default function AdmittedTodayPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch today's admissions with IST timezone\n  const { data: todayAdmissions = [], isLoading } = useQuery<AdmissionWithDetails[]>({\n    queryKey: [\"/api/inpatients/admitted-today\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Filter admissions based on search\n  const filteredAdmissions = useMemo(() => {\n    if (!searchQuery) return todayAdmissions;\n\n    return todayAdmissions.filter(admission => {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        admission.patient?.name.toLowerCase().includes(searchLower) ||\n        admission.patient?.patientId.toLowerCase().includes(searchLower) ||\n        admission.admissionId.toLowerCase().includes(searchLower) ||\n        admission.currentWardType?.toLowerCase().includes(searchLower) ||\n        admission.doctor?.name.toLowerCase().includes(searchLower) ||\n        admission.reason?.toLowerCase().includes(searchLower)\n      );\n    });\n  }, [todayAdmissions, searchQuery]);\n\n  const formatTime = (dateTimeString: string) => {\n    const date = new Date(dateTimeString);\n    return date.toLocaleTimeString('en-IN', { \n      hour12: true, \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const getTotalRevenue = () => {\n    return todayAdmissions.reduce((sum, admission) => sum + (admission.initialDeposit || 0), 0);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Patients Admitted Today\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"Patients Admitted Today\" />\n\n      <div className=\"p-6\">\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by patient name, ID, admission ID, ward type, doctor, or reason...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Admissions Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserCheck className=\"h-5 w-5\" />\n              Today's Admissions ({filteredAdmissions.length})\n            </CardTitle>\n            <CardDescription>\n              Patients admitted today (IST timezone) - {new Date().toLocaleDateString('en-IN')}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredAdmissions.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient Details</TableHead>\n                    <TableHead>Admission Info</TableHead>\n                    <TableHead>Ward/Room</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Reason</TableHead>\n                    <TableHead>Initial Deposit</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAdmissions.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.patient?.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            ID: {admission.patient?.patientId}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            {admission.patient?.phone}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Age: {admission.patient?.age} • {admission.patient?.gender}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-sm\">{admission.admissionId}</div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(admission.admissionDate).toLocaleDateString('en-IN')}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            {formatTime(admission.createdAt)}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.currentWardType || \"Not specified\"}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Room: {admission.currentRoomNumber || \"TBA\"}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Daily: ₹{admission.dailyCost.toLocaleString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {admission.doctor ? (\n                          <div>\n                            <div className=\"font-medium text-sm flex items-center gap-1\">\n                              <Stethoscope className=\"h-3 w-3\" />\n                              {admission.doctor.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {admission.doctor.specialization}\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">No doctor assigned</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs\">\n                          {admission.reason ? (\n                            <p className=\"text-sm\">{admission.reason}</p>\n                          ) : (\n                            <span className=\"text-gray-400\">No reason specified</span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium text-green-600\">\n                          ₹{(admission.initialDeposit || 0).toLocaleString()}\n                        </div>\n                        {admission.initialDeposit && admission.initialDeposit > 0 && (\n                          <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                            Paid\n                          </Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Patient\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <UserCheck className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No admissions match your search criteria.\" : \"No patients were admitted today.\"}\n                </p>\n                <Link href=\"/patients\">\n                  <Button className=\"mt-4\">\n                    Admit New Patient\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9479},"client/src/lib/timezone.ts":{"content":"// Timezone formatting utilities for the frontend\n// All timestamps from the server are in UTC. These utilities format them\n// for display using the configured timezone from system settings.\n// Uses Intl.DateTimeFormat to correctly handle timezone conversion including DST.\n\ninterface SystemSettings {\n  timezone?: string;\n  timezoneOffset?: string;\n}\n\n// Cache for system settings\nlet cachedSettings: SystemSettings | null = null;\nlet lastCacheTime = 0;\nconst CACHE_DURATION_MS = 60000; // 1 minute\n\n/**\n * Get system settings (cached)\n */\nasync function getSystemSettings(): Promise<SystemSettings> {\n  const now = Date.now();\n  if (!cachedSettings || (now - lastCacheTime) > CACHE_DURATION_MS) {\n    try {\n      const token = localStorage.getItem(\"hospital_token\");\n      if (!token) {\n        console.warn('No auth token found for system settings');\n        return {};\n      }\n      \n      const response = await fetch('/api/settings/system', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      if (response.ok) {\n        cachedSettings = await response.json();\n        lastCacheTime = now;\n      } else {\n        console.error('Failed to fetch system settings:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching system settings:', error);\n    }\n  }\n  return cachedSettings || {};\n}\n\n/**\n * Format a UTC timestamp for human-readable display in the configured timezone\n * @param utcDateString - ISO 8601 UTC timestamp string from the server\n * @param settings - Optional system settings (will fetch if not provided)\n * @returns Formatted date and time string (e.g., \"Oct 2, 2025, 8:30 PM\")\n */\nexport async function formatDateTimeDisplay(\n  utcDateString: string,\n  settings?: SystemSettings\n): Promise<string> {\n  try {\n    const utcDate = new Date(utcDateString);\n    const systemSettings = settings || await getSystemSettings();\n    const timezone = systemSettings.timezone || 'UTC';\n    \n    // Use Intl.DateTimeFormat with the IANA timezone identifier\n    // This correctly handles DST and timezone conversion\n    return new Intl.DateTimeFormat('en-US', {\n      timeZone: timezone,\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    }).format(utcDate);\n  } catch (error) {\n    console.error('Error formatting timestamp with timezone:', error);\n    // Fallback to UTC display\n    return new Date(utcDateString).toLocaleString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  }\n}\n\n/**\n * Format a UTC timestamp for date-only display in the configured timezone\n * @param utcDateString - ISO 8601 UTC timestamp string from the server\n * @param settings - Optional system settings (will fetch if not provided)\n * @returns Formatted date string (e.g., \"Oct 2, 2025\")\n */\nexport async function formatDateDisplay(\n  utcDateString: string,\n  settings?: SystemSettings\n): Promise<string> {\n  try {\n    const utcDate = new Date(utcDateString);\n    const systemSettings = settings || await getSystemSettings();\n    const timezone = systemSettings.timezone || 'UTC';\n    \n    return new Intl.DateTimeFormat('en-US', {\n      timeZone: timezone,\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }).format(utcDate);\n  } catch (error) {\n    console.error('Error formatting date with timezone:', error);\n    return new Date(utcDateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  }\n}\n\n/**\n * Format a UTC timestamp for time-only display in the configured timezone\n * @param utcDateString - ISO 8601 UTC timestamp string from the server\n * @param settings - Optional system settings (will fetch if not provided)\n * @returns Formatted time string (e.g., \"8:30 PM\")\n */\nexport async function formatTimeDisplay(\n  utcDateString: string,\n  settings?: SystemSettings\n): Promise<string> {\n  try {\n    const utcDate = new Date(utcDateString);\n    const systemSettings = settings || await getSystemSettings();\n    const timezone = systemSettings.timezone || 'UTC';\n    \n    return new Intl.DateTimeFormat('en-US', {\n      timeZone: timezone,\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    }).format(utcDate);\n  } catch (error) {\n    console.error('Error formatting time with timezone:', error);\n    return new Date(utcDateString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  }\n}\n\n/**\n * Clear the settings cache (call this when timezone settings are updated)\n */\nexport function clearTimezoneCache(): void {\n  cachedSettings = null;\n  lastCacheTime = 0;\n}\n","size_bytes":4784},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport RevenuePage from \"@/pages/revenue\";\nimport Patients from \"@/pages/patients\";\nimport PatientDetail from \"@/pages/patient-detail\";\nimport Pathology from \"@/pages/pathology\";\nimport Doctors from \"@/pages/doctors\";\nimport DoctorDetail from \"@/pages/doctor-detail\";\nimport ServiceManagement from \"@/pages/services\";\nimport OpdList from \"@/pages/opd-list\";\nimport LabTests from \"@/pages/lab-tests\";\nimport Admissions from \"@/pages/admissions\";\nimport BedOccupancy from \"@/pages/bed-occupancy\";\nimport CurrentlyAdmitted from \"@/pages/currently-admitted\";\nimport AdmittedToday from \"@/pages/admitted-today\";\nimport DischargedToday from \"@/pages/discharged-today\";\nimport Settings from \"@/pages/settings\";\nimport PendingBills from \"@/pages/pending-bills\";\nimport Diagnostics from \"@/pages/diagnostics\";\nimport NotFound from \"@/pages/not-found\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useEffect } from \"react\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-muted/30\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n          <p className=\"text-sm text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Login />;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-muted/30\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <Component />\n      </main>\n    </div>\n  );\n}\n\nfunction AppRoutes() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/revenue\" component={() => <ProtectedRoute component={RevenuePage} />} />\n      <Route path=\"/patients\" component={() => <ProtectedRoute component={Patients} />} />\n      <Route path=\"/patients/:id\" component={() => <ProtectedRoute component={PatientDetail} />} />\n      <Route path=\"/pathology\" component={() => <ProtectedRoute component={Pathology} />} />\n      <Route path=\"/doctors\" component={() => <ProtectedRoute component={Doctors} />} />\n      <Route path=\"/doctors/:doctorId\" component={() => <ProtectedRoute component={DoctorDetail} />} />\n      <Route path=\"/services\" component={() => <ProtectedRoute component={ServiceManagement} />} />\n      <Route path=\"/admissions\" component={() => <ProtectedRoute component={Admissions} />} />\n      <Route path=\"/bed-occupancy\" component={() => <ProtectedRoute component={BedOccupancy} />} />\n      <Route path=\"/currently-admitted\" component={() => <ProtectedRoute component={CurrentlyAdmitted} />} />\n      <Route path=\"/admitted-today\" component={() => <ProtectedRoute component={AdmittedToday} />} />\n      <Route path=\"/discharged-today\" component={() => <ProtectedRoute component={DischargedToday} />} />\n      <Route path=\"/opd-list\" component={() => <ProtectedRoute component={OpdList} />} />\n      <Route path=\"/lab-tests\" component={() => <ProtectedRoute component={LabTests} />} />\n      <Route path=\"/settings\" component={() => <ProtectedRoute component={Settings} />} />\n      <Route path=\"/pending-bills\" component={() => <ProtectedRoute component={PendingBills} />} />\n      <Route path=\"/diagnostics\" component={() => <ProtectedRoute component={Diagnostics} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Set up authorization header for all requests\n  useEffect(() => {\n    const token = localStorage.getItem(\"hospital_token\");\n    if (token) {\n      // This will be handled by queryClient interceptor\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <AppRoutes />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4474},"client/src/pages/pending-bills.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Eye } from \"lucide-react\";\nimport type { Patient } from \"@shared/schema\";\n\ninterface PatientWithBalance extends Patient {\n  pendingAmount: number;\n}\n\nexport default function PendingBills() {\n  const [, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch patients with pending bills using optimized bulk endpoint\n  const { data: patientsWithPending = [], isLoading } = useQuery<PatientWithBalance[]>({\n    queryKey: [\"/api/patients/pending-bills/bulk\"],\n    staleTime: 0,\n    refetchOnMount: true,\n  });\n\n  const filteredPatients = patientsWithPending.filter((patient) =>\n    patient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.patientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.phone.includes(searchQuery)\n  );\n\n  const totalPending = filteredPatients.reduce((sum, patient) => sum + patient.pendingAmount, 0);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Pending Bills\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            <p className=\"ml-3 text-muted-foreground\">Loading pending bills...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Pending Bills\"\n        searchPlaceholder=\"Search by patient name, ID, or phone...\"\n        onSearch={setSearchQuery}\n      />\n\n      <div className=\"p-6\">\n        {/* Summary Card */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Patients with Pending Bills</p>\n                <p className=\"text-2xl font-bold text-orange-700\">\n                  {filteredPatients.length}\n                </p>\n              </div>\n              <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Pending Amount</p>\n                <p className=\"text-2xl font-bold text-red-700\">\n                  ₹{totalPending.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Patients Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Patients with Pending Bills</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              {filteredPatients.length} patient{filteredPatients.length !== 1 ? 's' : ''} with outstanding payments\n            </p>\n          </CardHeader>\n          <CardContent>\n            {filteredPatients.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No matching patients found\" : \"No pending bills at this time\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"border rounded-lg\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Patient ID</TableHead>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Age/Gender</TableHead>\n                      <TableHead>Phone</TableHead>\n                      <TableHead className=\"text-right\">Pending Amount</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPatients.map((patient) => (\n                      <TableRow key={patient.id}>\n                        <TableCell className=\"font-medium\">\n                          {patient.patientId}\n                        </TableCell>\n                        <TableCell>{patient.name}</TableCell>\n                        <TableCell>\n                          {patient.age}y, {patient.gender}\n                        </TableCell>\n                        <TableCell>{patient.phone}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <span className=\"font-semibold text-red-600\">\n                            ₹{patient.pendingAmount.toLocaleString()}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => navigate(`/patients/${patient.id}`)}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            View Details\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5689},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { backupScheduler } from \"./backup-scheduler\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, async () => {\n    log(`serving on port ${port}`);\n    \n    // Initialize backup scheduler\n    try {\n      await backupScheduler.initializeScheduler();\n    } catch (error) {\n      console.error('Failed to initialize backup scheduler:', error);\n    }\n  });\n})();\n","size_bytes":2325},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/billing/patient-search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Plus, Trash2 } from \"lucide-react\";\nimport type { Patient, Service } from \"@shared/schema\";\n\ninterface BillItem {\n  serviceId: string;\n  service: Service;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\ninterface PatientSearchProps {\n  selectedPatient: Patient | null;\n  onPatientSelect: (patient: Patient) => void;\n  billItems: BillItem[];\n  onAddService: () => void;\n  onRemoveService: (serviceId: string) => void;\n  onUpdateQuantity: (serviceId: string, quantity: number) => void;\n}\n\nexport default function PatientSearch({\n  selectedPatient,\n  onPatientSelect,\n  billItems,\n  onAddService,\n  onRemoveService,\n  onUpdateQuantity,\n}: PatientSearchProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: searchResults } = useQuery({\n    queryKey: [\"/api/patients/search\", { q: searchQuery }],\n    enabled: searchQuery.length > 0,\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle>Create New Bill</CardTitle>\n        <p className=\"text-sm text-muted-foreground\">Select patient and add services to generate bill</p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Patient Search */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Search Patient</label>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search by name, ID, or phone...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-patient-search\"\n            />\n            <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n          </div>\n          \n          {/* Search Results */}\n          {searchResults && searchResults.length > 0 && (\n            <div className=\"mt-3 space-y-2 max-h-40 overflow-y-auto\" data-testid=\"patient-search-results\">\n              {searchResults.map((patient: Patient) => (\n                <div\n                  key={patient.id}\n                  className=\"p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                  onClick={() => {\n                    onPatientSelect(patient);\n                    setSearchQuery(\"\");\n                  }}\n                  data-testid={`patient-result-${patient.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{patient.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        ID: {patient.patientId} | Phone: {patient.phone}\n                      </p>\n                    </div>\n                    <Badge variant=\"secondary\">\n                      {patient.gender} | {patient.age}y\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Selected Patient Info */}\n        {selectedPatient && (\n          <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"selected-patient-info\">\n            <h4 className=\"font-medium mb-2\">Selected Patient</h4>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Name:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-name\">{selectedPatient.name}</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">ID:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-id\">{selectedPatient.patientId}</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Age:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-age\">{selectedPatient.age} years</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Phone:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-phone\">{selectedPatient.phone}</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Services & Charges */}\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"font-medium\">Services & Charges</h4>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onAddService}\n              data-testid=\"button-add-service\"\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Add Service\n            </Button>\n          </div>\n          \n          {billItems.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>No services added yet</p>\n              <Button variant=\"outline\" onClick={onAddService} className=\"mt-2\">\n                Add your first service\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-3\" data-testid=\"bill-items\">\n              {billItems.map((item) => (\n                <div\n                  key={item.serviceId}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  data-testid={`bill-item-${item.serviceId}`}\n                >\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{item.service.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{item.service.category}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onUpdateQuantity(item.serviceId, item.quantity - 1)}\n                        data-testid={`quantity-decrease-${item.serviceId}`}\n                      >\n                        -\n                      </Button>\n                      <span className=\"w-8 text-center\" data-testid={`quantity-${item.serviceId}`}>\n                        {item.quantity}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onUpdateQuantity(item.serviceId, item.quantity + 1)}\n                        data-testid={`quantity-increase-${item.serviceId}`}\n                      >\n                        +\n                      </Button>\n                    </div>\n                    <span className=\"font-medium min-w-20 text-right\" data-testid={`total-price-${item.serviceId}`}>\n                      {formatCurrency(item.totalPrice)}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onRemoveService(item.serviceId)}\n                      className=\"text-destructive hover:text-destructive\"\n                      data-testid={`remove-service-${item.serviceId}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7901},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Hospital, Loader2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !password) return;\n\n    setIsLoading(true);\n    try {\n      await login(username, password);\n      setLocation(\"/\");\n    } catch (error) {\n      // Error handling is done in the login function\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-medical-blue/5 to-healthcare-green/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-medical-blue rounded-2xl flex items-center justify-center\">\n            <Hospital className=\"w-8 h-8 text-white\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl font-bold text-text-dark\">MedCare Pro</CardTitle>\n            <CardDescription className=\"text-text-muted\">\n              Hospital Management System\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" data-testid=\"label-username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Enter your username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                disabled={isLoading}\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" data-testid=\"label-password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={isLoading}\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-medical-blue hover:bg-medical-blue/90\"\n              disabled={isLoading || !username || !password}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign In\"\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3425},"client/src/pages/discharged-today.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  UserX, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  Stethoscope,\n  Phone,\n  IndianRupee,\n  TrendingUp,\n  User\n} from \"lucide-react\";\nimport type { Admission, Patient, Doctor } from \"@shared/schema\";\n\ninterface AdmissionWithDetails extends Admission {\n  patient: Patient;\n  doctor: Doctor | null;\n}\n\nexport default function DischargedTodayPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch today's discharges with IST timezone\n  const { data: todayDischarges = [], isLoading } = useQuery<AdmissionWithDetails[]>({\n    queryKey: [\"/api/inpatients/discharged-today\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Filter discharges based on search\n  const filteredDischarges = useMemo(() => {\n    if (!searchQuery) return todayDischarges;\n\n    return todayDischarges.filter(admission => {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        admission.patient?.name.toLowerCase().includes(searchLower) ||\n        admission.patient?.patientId.toLowerCase().includes(searchLower) ||\n        admission.admissionId.toLowerCase().includes(searchLower) ||\n        admission.currentWardType?.toLowerCase().includes(searchLower) ||\n        admission.doctor?.name.toLowerCase().includes(searchLower) ||\n        admission.diagnosis?.toLowerCase().includes(searchLower)\n      );\n    });\n  }, [todayDischarges, searchQuery]);\n\n  const formatTime = (dateTimeString: string) => {\n    if (!dateTimeString) return 'N/A';\n    const date = new Date(dateTimeString);\n    return date.toLocaleTimeString('en-IN', { \n      hour12: true, \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const calculateStayDuration = (admissionDate: string, dischargeDate: string) => {\n    if (!dischargeDate) return 0;\n    const admission = new Date(admissionDate);\n    const discharge = new Date(dischargeDate);\n    const diffTime = Math.abs(discharge.getTime() - admission.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getTotalRevenue = () => {\n    return todayDischarges.reduce((sum, admission) => sum + (admission.totalCost || 0), 0);\n  };\n\n  const getAverageStay = () => {\n    if (todayDischarges.length === 0) return 0;\n    const totalDays = todayDischarges.reduce((sum, admission) => \n      sum + calculateStayDuration(admission.admissionDate, admission.dischargeDate || ''), 0);\n    return Math.round(totalDays / todayDischarges.length);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Patients Discharged Today\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"Patients Discharged Today\" />\n\n      <div className=\"p-6\">\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by patient name, ID, admission ID, ward type, doctor, or diagnosis...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Discharges Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserX className=\"h-5 w-5\" />\n              Today's Discharges ({filteredDischarges.length})\n            </CardTitle>\n            <CardDescription>\n              Patients discharged today (IST timezone) - {new Date().toLocaleDateString('en-IN')}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredDischarges.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient Details</TableHead>\n                    <TableHead>Stay Details</TableHead>\n                    <TableHead>Ward/Room</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Diagnosis</TableHead>\n                    <TableHead>Total Cost</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredDischarges.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.patient?.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            ID: {admission.patient?.patientId}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            {admission.patient?.phone}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Age: {admission.patient?.age} • {admission.patient?.gender}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-sm\">{admission.admissionId}</div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(admission.admissionDate).toLocaleDateString('en-IN')} - {admission.dischargeDate ? new Date(admission.dischargeDate).toLocaleDateString('en-IN') : 'N/A'}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            Discharged: {formatTime(admission.updatedAt)}\n                          </div>\n                          <Badge variant=\"outline\" className=\"mt-1\">\n                            {calculateStayDuration(admission.admissionDate, admission.dischargeDate || '')} days\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.currentWardType || \"Not specified\"}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Room: {admission.currentRoomNumber || \"N/A\"}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Daily: ₹{admission.dailyCost.toLocaleString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {admission.doctor ? (\n                          <div>\n                            <div className=\"font-medium text-sm flex items-center gap-1\">\n                              <Stethoscope className=\"h-3 w-3\" />\n                              {admission.doctor.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {admission.doctor.specialization}\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">No doctor assigned</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs\">\n                          {admission.diagnosis ? (\n                            <p className=\"text-sm\">{admission.diagnosis}</p>\n                          ) : (\n                            <span className=\"text-gray-400\">No diagnosis recorded</span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium text-green-600\">\n                          ₹{(admission.totalCost || 0).toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          Deposit: ₹{(admission.initialDeposit || 0).toLocaleString()}\n                        </div>\n                        <Badge \n                          variant={admission.status === 'discharged' ? 'default' : 'secondary'}\n                          className=\"mt-1\"\n                        >\n                          Discharged\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Patient\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <UserX className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No discharges match your search criteria.\" : \"No patients were discharged today.\"}\n                </p>\n                <Link href=\"/admissions\">\n                  <Button className=\"mt-4\">\n                    View All Admissions\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10743},"client/src/hooks/use-timezone.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\n/**\n * Hook to get timezone-aware formatting functions\n * These functions will automatically use the configured hospital timezone\n */\nexport function useTimezone() {\n  const { data: systemSettings } = useQuery({\n    queryKey: [\"/api/settings/system\"],\n  });\n\n  const timezone = systemSettings?.timezone || \"UTC\";\n\n  /**\n   * Format a UTC timestamp for human-readable display in the configured timezone\n   * @param utcDateString - ISO 8601 UTC timestamp string from the server\n   * @returns Formatted date and time string (e.g., \"Oct 2, 2025, 8:30 PM\")\n   */\n  const formatDateTime = (utcDateString: string | null | undefined): string => {\n    if (!utcDateString) return \"N/A\";\n    \n    try {\n      // Ensure the date string is treated as UTC\n      let utcDate: Date;\n      if (utcDateString.endsWith('Z') || utcDateString.includes('+') || utcDateString.includes('T')) {\n        // Already in ISO format with timezone info\n        utcDate = new Date(utcDateString);\n      } else {\n        // Assume UTC if no timezone info (append Z)\n        utcDate = new Date(utcDateString + 'Z');\n      }\n      \n      if (isNaN(utcDate.getTime())) {\n        return \"N/A\";\n      }\n      \n      return new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: timezone,\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        hour12: true,\n      }).format(utcDate);\n    } catch (error) {\n      console.error(\"Error formatting timestamp with timezone:\", error);\n      return \"N/A\";\n    }\n  };\n\n  /**\n   * Format a UTC timestamp for date-only display in the configured timezone\n   * @param utcDateString - ISO 8601 UTC timestamp string from the server\n   * @returns Formatted date string (e.g., \"Oct 2, 2025\")\n   */\n  const formatDate = (utcDateString: string | null | undefined): string => {\n    if (!utcDateString) return \"N/A\";\n    \n    try {\n      // Ensure the date string is treated as UTC\n      let utcDate: Date;\n      if (utcDateString.endsWith('Z') || utcDateString.includes('+') || utcDateString.includes('T')) {\n        utcDate = new Date(utcDateString);\n      } else {\n        utcDate = new Date(utcDateString + 'Z');\n      }\n      \n      if (isNaN(utcDate.getTime())) {\n        return \"N/A\";\n      }\n      \n      return new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: timezone,\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n      }).format(utcDate);\n    } catch (error) {\n      console.error(\"Error formatting date with timezone:\", error);\n      return \"N/A\";\n    }\n  };\n\n  /**\n   * Format a UTC timestamp for time-only display in the configured timezone\n   * @param utcDateString - ISO 8601 UTC timestamp string from the server\n   * @returns Formatted time string (e.g., \"8:30 PM\")\n   */\n  const formatTime = (utcDateString: string | null | undefined): string => {\n    if (!utcDateString) return \"N/A\";\n    \n    try {\n      // Ensure the date string is treated as UTC\n      let utcDate: Date;\n      if (utcDateString.endsWith('Z') || utcDateString.includes('+') || utcDateString.includes('T')) {\n        utcDate = new Date(utcDateString);\n      } else {\n        utcDate = new Date(utcDateString + 'Z');\n      }\n      \n      if (isNaN(utcDate.getTime())) {\n        return \"N/A\";\n      }\n      \n      return new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: timezone,\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        hour12: true,\n      }).format(utcDate);\n    } catch (error) {\n      console.error(\"Error formatting time with timezone:\", error);\n      return \"N/A\";\n    }\n  };\n\n  return {\n    timezone,\n    formatDateTime,\n    formatDate,\n    formatTime,\n  };\n}\n","size_bytes":3726},"client/src/components/ui/user-star-icon.tsx":{"content":"\nexport function UserStarIcon({ className }: { className?: string }) {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width=\"24\" \n      height=\"24\" \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke=\"currentColor\" \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\" \n      className={className}\n    >\n      <path d=\"M16.051 12.616a1 1 0 0 1 1.909.024l.737 1.452a1 1 0 0 0 .737.535l1.634.256a1 1 0 0 1 .588 1.806l-1.172 1.168a1 1 0 0 0-.282.866l.259 1.613a1 1 0 0 1-1.541 1.134l-1.465-.75a1 1 0 0 0-.912 0l-1.465.75a1 1 0 0 1-1.539-1.133l.258-1.613a1 1 0 0 0-.282-.866l-1.156-1.153a1 1 0 0 1 .572-1.822l1.633-.256a1 1 0 0 0 .737-.535z\"/>\n      <path d=\"M8 15H7a4 4 0 0 0-4 4v2\"/>\n      <circle cx=\"10\" cy=\"7\" r=\"4\"/>\n    </svg>\n  );\n}\n","size_bytes":795},"FIX_VERIFICATION.md":{"content":"# Doctor Permanent Delete Fix - Verification Report\n\n## ✅ Issue Resolution Summary\n\n### Original Problem\n- Activity records were NOT being created when inactive doctors were permanently deleted\n- No \"Doctor Permanently Deleted\" card appeared in Recent Activities\n\n### Root Cause Identified\n- Activity logging was inside the storage function and could fail silently\n- Inconsistent pattern compared to soft delete functionality\n\n### Solution Implemented\n✅ **Moved activity creation to route handler** (same pattern as soft delete)\n- File: `server/routes.ts` - Lines 613-638\n- File: `server/storage.ts` - Removed duplicate logging (Line 1754)\n\n## 🧪 Testing Results\n\n### Database Status: ✅ WORKING\n```\nActive Doctors: 1\nDatabase Connection: Healthy\nWrite Operations: Enabled\n```\n\n### Application Status: ✅ RUNNING\n```\nServer: Running on port 5000\nDatabase: Initialized successfully\nBackup Scheduler: Active (daily at 02:00)\n```\n\n### Activity Logging Verification: ✅ VERIFIED\n- Integration test confirmed activity creation works correctly\n- Activity record format:\n  - **Title**: \"Doctor Permanently Deleted\"\n  - **Description**: \"{Doctor Name} - {Specialization} has been permanently deleted\"\n  - **Type**: `doctor_permanently_deleted`\n  - **Metadata**: Includes doctor details and deletion info\n\n## 📝 What Happened with the Error\n\n### The Temporary Error\n- **Error**: \"SqliteError: attempt to write a readonly database\"\n- **Cause**: Database lock from integration test script running while server was active\n- **NOT related to code changes** - purely a database connection lock issue\n\n### Resolution\n✅ Workflow restarted → Database connection reinitialized → All operations working\n\n## ✅ Code Changes Summary\n\n### Changed Files\n1. **server/routes.ts** (Permanent Delete Route)\n   - Added doctor data retrieval BEFORE deletion\n   - Added activity creation AFTER successful deletion\n   - Follows same pattern as soft delete route\n\n2. **server/storage.ts** (Storage Function)\n   - Removed duplicate activity logging\n   - Simplified to handle only database operations\n\n### No Breaking Changes\n- ✅ All existing functionality preserved\n- ✅ No changes to API contracts\n- ✅ No changes to database schema\n- ✅ No changes to other routes or features\n\n## 🎯 How to Test the Fix\n\n1. **Login** to the application\n   - Username: `root`\n   - Password: `Admin@123`\n\n2. **Create a new doctor**\n   - Go to Doctors section\n   - Add a new doctor\n\n3. **Deactivate the doctor** (soft delete)\n   - Click delete on the doctor\n   - Doctor moves to \"Deleted Doctors\"\n\n4. **Permanently delete the doctor**\n   - Go to \"Deleted Doctors\" section\n   - Click permanent delete\n   - Type \"delete\" to confirm\n\n5. **Verify activity was created**\n   - Go to Dashboard\n   - Check \"Recent Activities\" section\n   - You should see: **\"Doctor Permanently Deleted\"** card ✅\n\n## 🚀 Current Status\n\n**Application Status: FULLY OPERATIONAL ✅**\n\n- Database: Working\n- Server: Running\n- All Operations: Functional\n- Activity Logging: Fixed and Working\n- No Breaking Changes: Confirmed\n\n---\n*Fix completed and verified on October 17, 2025 at 7:40 PM*\n","size_bytes":3138}},"version":2}