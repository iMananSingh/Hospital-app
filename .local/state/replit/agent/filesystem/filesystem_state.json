{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MedCare Pro - Hospital Management System\n\n## Overview\n\nMedCare Pro is a comprehensive hospital management system built as a full-stack web application. The system provides functionality for patient registration, billing and invoicing, pathology test management, doctor management, and system administration. It serves as a complete solution for healthcare facilities to manage their day-to-day operations efficiently.\n\nThe application features a modern, responsive user interface built with React and TypeScript, backed by a robust Express.js API server with SQLite database storage. The system supports role-based authentication and provides different access levels for administrators, doctors, receptionists, and billing staff.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n### OPD Management System Enhancements (August 2025)\n- **Dynamic OPD consultation fees**: Implemented automatic fee calculation based on selected doctor with ₹0 default when no doctor selected\n- **Time-based scheduling**: Added HTML5 time input field with native clock popup interface for precise appointment scheduling  \n- **Doctor-segregated OPD listings**: Created dedicated /opd-list page that groups OPD appointments by doctor with filtering capabilities\n- **Clickable dashboard statistics**: Made OPD patient count on dashboard clickable to navigate to doctor-segregated OPD page\n- **Real-time dashboard updates**: Dashboard OPD count now reflects actual scheduled appointments and updates when new patients are added\n- **Enhanced form validation**: OPD scheduling requires mandatory doctor selection with proper error handling\n- **Database schema improvements**: Added scheduledTime field to patient_services table and initialDeposit to admissions table\n\n## System Architecture\n\n### Frontend Architecture\n\nThe frontend is built using React with TypeScript and follows a modern component-based architecture:\n\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with custom styling using Tailwind CSS\n- **Form Handling**: React Hook Form with Zod for validation\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe frontend implements a protected route system with authentication middleware, ensuring secure access to different application sections based on user roles. The UI uses a sidebar navigation layout with responsive design principles.\n\n### Backend Architecture\n\nThe backend follows a RESTful API architecture using Express.js:\n\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **API Structure**: Route-based organization with middleware for authentication and logging\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n\nThe server implements comprehensive logging for API requests and includes middleware for request timing and response capture for debugging purposes.\n\n### Data Storage Solutions\n\nThe system uses SQLite as the primary database with the following design decisions:\n\n- **Database**: SQLite for simplicity and ease of deployment\n- **ORM**: Drizzle ORM providing type-safe queries and schema management\n- **Schema Design**: Normalized relational design with proper foreign key relationships\n- **Migration System**: Drizzle Kit for database schema migrations\n\nKey database tables include:\n- Users (authentication and roles)\n- Patients (patient information and registration)\n- Doctors (doctor profiles and specializations)\n- Patient Visits (OPD and inpatient tracking)\n- Bills and Bill Items (billing and invoicing)\n- Services (hospital services and pricing)\n- Pathology Tests (lab test management)\n- Audit Logs (system activity tracking)\n\n### Authentication and Authorization\n\nThe system implements a robust security model:\n\n- **Authentication Method**: JWT tokens with configurable expiration\n- **Password Security**: bcrypt hashing with salt rounds\n- **Role-Based Access**: Multiple user roles (admin, doctor, receptionist, billing_staff)\n- **Session Management**: Token-based sessions with client-side storage\n- **Route Protection**: Frontend and backend route guards based on authentication status\n\n### External Dependencies\n\n#### Third-Party Services\n- **Neon Database**: PostgreSQL serverless database option (@neondatabase/serverless)\n- **Replit Integration**: Development environment integration with cartographer and runtime error handling\n\n#### UI and Component Libraries\n- **Radix UI**: Complete set of UI primitives for accessibility and customization\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide Icons**: Modern icon library for consistent iconography\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling with validation\n- **Zod**: Runtime type validation and schema definition\n\n#### Development and Build Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Static type checking\n- **ESBuild**: Fast bundler for production builds\n- **PostCSS**: CSS processing with Tailwind\n- **Drizzle Kit**: Database migration and schema management tools\n\n#### Database and Storage\n- **better-sqlite3**: SQLite database driver\n- **Drizzle ORM**: Type-safe database operations\n- **connect-pg-simple**: PostgreSQL session store option\n\nThe architecture prioritizes type safety, developer experience, and maintainability while providing a scalable foundation for healthcare management operations.","size_bytes":5745},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1008},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/pathology-catalog.ts":{"content":"// Pathology Test Catalog\nexport const pathologyCatalog = {\n  \"categories\": [\n    {\n      \"name\": \"Biochemistry\",\n      \"tests\": [\n        { \"test_name\": \"Amylase\", \"price\": 700, \"subtests\": [] },\n        { \"test_name\": \"Bilirubin\", \"price\": 150, \"subtests\": [] },\n        { \"test_name\": \"Blood Urea\", \"price\": 150, \"subtests\": [] },\n        { \"test_name\": \"CRP (C-Reactive Protein)\", \"price\": 600, \"subtests\": [] },\n        { \"test_name\": \"Folic Acid\", \"price\": 500, \"subtests\": [] },\n        { \"test_name\": \"G6PD\", \"price\": 800, \"subtests\": [] },\n        { \"test_name\": \"HbA1c\", \"price\": 450, \"subtests\": [] },\n        { \"test_name\": \"LFT (Liver Function Test)\", \"price\": 500, \"subtests\": [] },\n        { \"test_name\": \"Lipase\", \"price\": 800, \"subtests\": [] },\n        { \"test_name\": \"Lipid Profile\", \"price\": 600, \"subtests\": [] },\n        { \"test_name\": \"RFT (Renal Function Test)\", \"price\": 350, \"subtests\": [] },\n        { \"test_name\": \"Serum Calcium\", \"price\": 200, \"subtests\": [] },\n        { \"test_name\": \"Serum Creatinine\", \"price\": 150, \"subtests\": [] },\n        { \"test_name\": \"Serum Electrolytes\", \"price\": 600, \"subtests\": [] },\n        { \"test_name\": \"Sodium Potassium\", \"price\": 600, \"subtests\": [] },\n        { \"test_name\": \"Troponin 1\", \"price\": 1500, \"subtests\": [] },\n        { \"test_name\": \"Uric Acid\", \"price\": 200, \"subtests\": [] }\n      ]\n    },\n    {\n      \"name\": \"Endocrinology\",\n      \"tests\": [\n        { \"test_name\": \"BSF (Blood Sugar Fasting)\", \"price\": 60, \"subtests\": [] },\n        { \"test_name\": \"CA125\", \"price\": 1400, \"subtests\": [] },\n        { \"test_name\": \"FSH (Follicle-Stimulating Hormone)\", \"price\": 450, \"subtests\": [] },\n        { \"test_name\": \"LH (Luteinizing Hormone)\", \"price\": 450, \"subtests\": [] },\n        { \"test_name\": \"PP Blood (Post Prandial Blood Sugar)\", \"price\": 60, \"subtests\": [] },\n        { \"test_name\": \"PSA (Prostate-Specific Antigen)\", \"price\": 500, \"subtests\": [] },\n        { \"test_name\": \"RBS (Random Blood Sugar)\", \"price\": 0, \"subtests\": [] },\n        { \"test_name\": \"Thyroid Profile (T3, T4, TSH)\", \"price\": 700, \"subtests\": [] },\n        { \"test_name\": \"TSH (Thyroid-Stimulating Hormone)\", \"price\": 250, \"subtests\": [] }\n      ]\n    },\n    {\n      \"name\": \"Hematology\",\n      \"tests\": [\n        { \"test_name\": \"Blood Group\", \"price\": 80, \"subtests\": [] },\n        { \"test_name\": \"BT/CT (Bleeding Time / Clotting Time)\", \"price\": 150, \"subtests\": [] },\n        { \"test_name\": \"CBC (Complete Blood Count)\", \"price\": 300, \"subtests\": [] },\n        { \"test_name\": \"ESR (Erythrocyte Sedimentation Rate)\", \"price\": 100, \"subtests\": [] },\n        { \"test_name\": \"HB (Hemoglobin)\", \"price\": 50, \"subtests\": [] },\n        { \"test_name\": \"Platelet Count\", \"price\": 200, \"subtests\": [] },\n        { \"test_name\": \"Sickling Test\", \"price\": 200, \"subtests\": [] },\n        { \"test_name\": \"TLC (Total Leukocyte Count)\", \"price\": 200, \"subtests\": [] }\n      ]\n    },\n    {\n      \"name\": \"Immunology\",\n      \"tests\": [\n        { \"test_name\": \"ASO Titre (Anti-Streptolysin O Titre)\", \"price\": 200, \"subtests\": [] },\n        { \"test_name\": \"IGE (Immunoglobulin E)\", \"price\": 650, \"subtests\": [] },\n        { \"test_name\": \"RA Factor (Rheumatoid Arthritis Factor)\", \"price\": 200, \"subtests\": [] }\n      ]\n    },\n    {\n      \"name\": \"Microbiology\",\n      \"tests\": [\n        { \"test_name\": \"Dengue NS1 Antigen\", \"price\": 800, \"subtests\": [] },\n        { \"test_name\": \"HBsAg (Hepatitis B Surface Antigen)\", \"price\": 200, \"subtests\": [] },\n        { \"test_name\": \"HCV (Hepatitis C Virus)\", \"price\": 300, \"subtests\": [] },\n        { \"test_name\": \"HIV\", \"price\": 300, \"subtests\": [] },\n        { \"test_name\": \"MT (Mantoux Test)\", \"price\": 200, \"subtests\": [] },\n        { \"test_name\": \"PS for MP Test (Peripheral Smear for Malaria Parasite)\", \"price\": 80, \"subtests\": [] },\n        { \"test_name\": \"VDRL (Venereal Disease Research Laboratory)\", \"price\": 200, \"subtests\": [] },\n        { \"test_name\": \"Widal Test\", \"price\": 80, \"subtests\": [] }\n      ]\n    },\n    {\n      \"name\": \"Stool Analysis\",\n      \"tests\": [\n        { \"test_name\": \"Stool RM (Routine Microscopic)\", \"price\": 300, \"subtests\": [] }\n      ]\n    },\n    {\n      \"name\": \"Urine Analysis\",\n      \"tests\": [\n        { \"test_name\": \"UPT (Urine Pregnancy Test)\", \"price\": 80, \"subtests\": [] },\n        { \"test_name\": \"Urine Culture\", \"price\": 550, \"subtests\": [] },\n        { \"test_name\": \"Urine Ketone\", \"price\": 80, \"subtests\": [] },\n        { \"test_name\": \"Urine RM (Routine Microscopic)\", \"price\": 80, \"subtests\": [] }\n      ]\n    }\n  ]\n};\n\nexport interface PathologyTestCatalog {\n  test_name: string;\n  price: number;\n  category: string;\n  subtests: any[];\n}\n\nexport function getAllPathologyTests(): PathologyTestCatalog[] {\n  const allTests: PathologyTestCatalog[] = [];\n  \n  pathologyCatalog.categories.forEach(category => {\n    category.tests.forEach(test => {\n      allTests.push({\n        ...test,\n        category: category.name\n      });\n    });\n  });\n  \n  return allTests;\n}\n\nexport function getTestsByCategory(categoryName: string): PathologyTestCatalog[] {\n  const category = pathologyCatalog.categories.find(cat => cat.name === categoryName);\n  if (!category) return [];\n  \n  return category.tests.map(test => ({\n    ...test,\n    category: categoryName\n  }));\n}\n\nexport function getTestByName(testName: string): PathologyTestCatalog | undefined {\n  for (const category of pathologyCatalog.categories) {\n    const test = category.tests.find(t => t.test_name === testName);\n    if (test) {\n      return {\n        ...test,\n        category: category.name\n      };\n    }\n  }\n  return undefined;\n}\n\nexport function getCategories(): string[] {\n  return pathologyCatalog.categories.map(cat => cat.name);\n}","size_bytes":5717},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertPatientSchema, insertDoctorSchema, insertServiceSchema, insertBillSchema, insertBillItemSchema, insertPathologyTestSchema } from \"@shared/schema\";\nimport { getAllPathologyTests, getTestsByCategory, getTestByName, getCategories, PathologyTestCatalog } from \"./pathology-catalog\";\nimport { updatePatientSchema } from \"../shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"hospital-management-secret-key\";\n\n// Middleware for authentication\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n\n// Alias for authenticateToken to match the change snippet\nconst requireAuth = authenticateToken;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValid = await storage.verifyPassword(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ \n        id: user.id, \n        username: user.username, \n        role: user.role \n      }, JWT_SECRET, { expiresIn: '8h' });\n\n      res.json({ \n        token, \n        user: { \n          id: user.id, \n          username: user.username, \n          fullName: user.fullName, \n          role: user.role \n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json({ id: user.id, username: user.username, fullName: user.fullName, role: user.role });\n    } catch (error) {\n      res.status(400).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/me\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ id: user.id, username: user.username, fullName: user.fullName, role: user.role });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      // Prevent caching to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Dashboard stats error:', error);\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Patient routes\n  app.get(\"/api/patients\", authenticateToken, async (req, res) => {\n    try {\n      const patients = await storage.getPatients();\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get patients\" });\n    }\n  });\n\n  app.get(\"/api/patients/search\", authenticateToken, async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n      const patients = await storage.searchPatients(q);\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search patients\" });\n    }\n  });\n\n  app.post(\"/api/patients\", authenticateToken, async (req, res) => {\n    try {\n      const patientData = insertPatientSchema.parse(req.body);\n      // Set createdAt to current time in Indian timezone (UTC+5:30)\n      if (!patientData.createdAt) {\n        const now = new Date();\n        // Add 5.5 hours (5 hours 30 minutes) to UTC to get Indian time\n        const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n        patientData.createdAt = indianTime.toISOString();\n      }\n      const patient = await storage.createPatient(patientData);\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Patient creation error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to create patient\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", authenticateToken, async (req, res) => {\n    try {\n      const patient = await storage.getPatientById(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get patient\" });\n    }\n  });\n\n\n  app.patch(\"/api/patients/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Validate incoming data (allow partial updates)\n      const patientData = updatePatientSchema.parse(req.body);\n\n      const updated = await storage.updatePatient(id, patientData);\n\n      if (!updated) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Patient update error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to update patient\" });\n    }\n  });\n\n  // Doctor routes\n  app.get(\"/api/doctors\", authenticateToken, async (req, res) => {\n    try {\n      const doctors = await storage.getDoctors();\n      res.json(doctors);\n    } catch (error) {\n      console.error(\"Doctors fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch doctors\" });\n    }\n  });\n\n  app.get(\"/api/doctors/deleted\", authenticateToken, async (req, res) => {\n    try {\n      const deletedDoctors = await storage.getDeletedDoctors();\n      res.json(deletedDoctors);\n    } catch (error) {\n      console.error(\"Deleted doctors fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch deleted doctors\" });\n    }\n  });\n\n  app.post(\"/api/doctors\", authenticateToken, async (req, res) => {\n    try {\n      const doctorData = insertDoctorSchema.parse(req.body);\n      const doctor = await storage.createDoctor(doctorData);\n      res.json(doctor);\n    } catch (error) {\n      console.error(\"Doctor creation error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to create doctor\" });\n    }\n  });\n\n  app.put(\"/api/doctors/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const doctorData = insertDoctorSchema.parse(req.body);\n      const doctor = await storage.updateDoctor(id, doctorData);\n      res.json(doctor);\n    } catch (error) {\n      console.error(\"Doctor update error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Failed to update doctor\" });\n    }\n  });\n\n  app.delete(\"/api/doctors/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteDoctor(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      res.json({ message: \"Doctor deleted successfully\" });\n    } catch (error) {\n      console.error(\"Doctor deletion error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete doctor\" });\n    }\n  });\n\n  app.get(\"/api/doctors/:id\", authenticateToken, async (req, res) => {\n    try {\n      const doctor = await storage.getDoctorById(req.params.id);\n      if (!doctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      res.json(doctor);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get doctor\" });\n    }\n  });\n\n  // Added restore doctor route\n  app.put(\"/api/doctors/:id/restore\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const restored = await storage.restoreDoctor(id);\n      if (!restored) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      res.json({ message: \"Doctor restored successfully\", doctor: restored });\n    } catch (error) {\n      console.error(\"Doctor restoration error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to restore doctor\" });\n    }\n  });\n\n  // Added permanent delete endpoint for doctors\n  app.delete(\"/api/doctors/:id/permanent\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.permanentlyDeleteDoctor(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      res.json({ message: \"Doctor permanently deleted successfully\" });\n    } catch (error) {\n      console.error(\"Doctor permanent deletion error:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to permanently delete doctor\" });\n    }\n  });\n\n  // Service routes\n  app.get(\"/api/services\", authenticateToken, async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get services\" });\n    }\n  });\n\n  app.get(\"/api/services/search\", authenticateToken, async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n      const services = await storage.searchServices(q);\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search services\" });\n    }\n  });\n\n  app.post(\"/api/services\", authenticateToken, async (req, res) => {\n    try {\n      const serviceData = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(serviceData);\n      res.json(service);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put(\"/api/services/:id\", authenticateToken, async (req, res) => {\n    try {\n      const serviceData = insertServiceSchema.parse(req.body);\n      const service = await storage.updateService(req.params.id, serviceData);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete(\"/api/services/:id\", authenticateToken, async (req, res) => {\n    try {\n      const deleted = await storage.deleteService(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Bill routes\n  app.get(\"/api/bills\", authenticateToken, async (req, res) => {\n    try {\n      const bills = await storage.getBillsWithPatients();\n      res.json(bills);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get bills\" });\n    }\n  });\n\n  app.post(\"/api/bills\", authenticateToken, async (req: any, res) => {\n    try {\n      const { bill, items } = req.body;\n\n      const billData = insertBillSchema.parse({\n        ...bill,\n        createdBy: req.user.id,\n        billDate: new Date().toISOString().split('T')[0],\n      });\n\n      const itemsData = items.map((item: any) => insertBillItemSchema.parse(item));\n\n      const createdBill = await storage.createBill(billData, itemsData);\n      res.json(createdBill);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create bill\" });\n    }\n  });\n\n  app.get(\"/api/bills/:id\", authenticateToken, async (req, res) => {\n    try {\n      const bill = await storage.getBillById(req.params.id);\n      if (!bill) {\n        return res.status(404).json({ message: \"Bill not found\" });\n      }\n      const items = await storage.getBillItems(req.params.id);\n      res.json({ ...bill, items });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get bill\" });\n    }\n  });\n\n  // Pathology Test Catalog routes\n  app.get(\"/api/pathology/catalog\", authenticateToken, async (req, res) => {\n    try {\n      const tests = getAllPathologyTests();\n      res.json(tests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology catalog\" });\n    }\n  });\n\n  app.get(\"/api/pathology/catalog/categories\", authenticateToken, async (req, res) => {\n    try {\n      const categories = getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology categories\" });\n    }\n  });\n\n  app.get(\"/api/pathology/catalog/category/:categoryName\", authenticateToken, async (req, res) => {\n    try {\n      const tests = getTestsByCategory(req.params.categoryName);\n      res.json(tests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get tests for category\" });\n    }\n  });\n\n  // Pathology routes\n  app.get(\"/api/pathology\", authenticateToken, async (req, res) => {\n    try {\n      const orders = await storage.getPathologyOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology orders\" });\n    }\n  });\n\n  app.post(\"/api/pathology\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\"Received pathology order request:\", JSON.stringify(req.body, null, 2));\n      const { orderData, tests } = req.body;\n\n      if (!orderData || !tests) {\n        return res.status(400).json({ message: \"Missing orderData or tests\" });\n      }\n\n      // Ensure doctorId is null if empty string or \"external\"\n      const processedOrderData = {\n        ...orderData,\n        doctorId: orderData.doctorId === \"\" || orderData.doctorId === \"external\" ? null : orderData.doctorId\n      };\n\n      const order = await storage.createPathologyOrder(processedOrderData, tests);\n      res.json(order);\n    } catch (error: any) {\n      console.error(\"Error creating pathology order:\", error);\n      res.status(400).json({ message: \"Failed to create pathology order\", error: error.message });\n    }\n  });\n\n  app.patch(\"/api/pathology/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n\n      const updatedOrder = await storage.updatePathologyOrderStatus(id, status);\n      res.json(updatedOrder);\n    } catch (error: any) {\n      console.error(\"Error updating pathology order status:\", error);\n      res.status(400).json({ message: \"Failed to update order status\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/pathology/:id\", authenticateToken, async (req, res) => {\n    try {\n      const orderDetails = await storage.getPathologyOrderById(req.params.id);\n      if (!orderDetails) {\n        return res.status(404).json({ message: \"Pathology order not found\" });\n      }\n      res.json(orderDetails);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pathology order details\" });\n    }\n  });\n\n  app.get(\"/api/pathology/patient/:patientId\", authenticateToken, async (req, res) => {\n    try {\n      const orders = await storage.getPathologyOrdersByPatient(req.params.patientId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get patient pathology orders\" });\n    }\n  });\n\n  // Patient Services Routes\n  app.get(\"/api/patient-services\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId, serviceType } = req.query;\n      let services = await storage.getPatientServices(patientId as string);\n\n      // Filter by service type if specified\n      if (serviceType) {\n        services = services.filter(service => service.serviceType === serviceType);\n        console.log(`Filtered ${services.length} services for type: ${serviceType}`);\n      }\n\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching patient services:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Patient Services Management\n  app.post(\"/api/patient-services\", authenticateToken, async (req, res) => {\n    try {\n      const serviceData = req.body;\n\n      console.log('Creating patient service with data:', serviceData);\n      const service = await storage.createPatientService(serviceData);\n      console.log('Created patient service:', service);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error creating patient service:\", error);\n      res.status(500).json({ error: \"Failed to create patient service\" });\n    }\n  });\n\n\n  app.put(\"/api/patient-services/:id\", authenticateToken, async (req, res) => {\n    try {\n      const service = await storage.updatePatientService(req.params.id, req.body);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error updating patient service:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Patient Admissions Routes\n  app.get(\"/api/admissions\", authenticateToken, async (req, res) => {\n    try {\n      const { patientId } = req.query;\n      const admissions = await storage.getAdmissions(patientId as string);\n      res.json(admissions);\n    } catch (error) {\n      console.error(\"Error fetching admissions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admissions\", authenticateToken, async (req, res) => {\n    try {\n      const admission = await storage.createAdmission(req.body);\n      res.json(admission);\n    } catch (error) {\n      console.error(\"Error creating admission:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/admissions/:id\", authenticateToken, async (req, res) => {\n    try {\n      const admission = await storage.updateAdmission(req.params.id, req.body);\n      res.json(admission);\n    } catch (error) {\n      console.error(\"Error updating admission:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/admissions/:id\", authenticateToken, async (req, res) => {\n    try {\n      const admission = await storage.updateAdmission(req.params.id, req.body);\n      res.json(admission);\n    } catch (error) {\n      console.error(\"Error updating admission:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get individual patient details\n  app.get(\"/api/patients/:id\", authenticateToken, async (req, res) => {\n    try {\n      const patient = await storage.getPatientById(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ error: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error fetching patient:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/pathology/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const updated = await storage.updatePathologyOrderStatus(req.params.id, status);\n      if (!updated) {\n        return res.status(404).json({ message: \"Pathology order not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update pathology order status\" });\n    }\n  });\n\n  app.patch(\"/api/pathology/test/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      const { status, results } = req.body;\n      const updated = await storage.updatePathologyTestStatus(req.params.id, status, results);\n      if (!updated) {\n        return res.status(404).json({ message: \"Pathology test not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update pathology test status\" });\n    }\n  });\n\n  // Room Type Management Routes\n  app.get(\"/api/room-types\", authenticateToken, async (req, res) => {\n    try {\n      const roomTypes = await storage.getAllRoomTypes();\n      res.json(roomTypes);\n    } catch (error) {\n      console.error(\"Error fetching room types:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/room-types\", authenticateToken, async (req, res) => {\n    try {\n      const roomType = await storage.createRoomType(req.body);\n      res.status(201).json(roomType);\n    } catch (error) {\n      console.error(\"Error creating room type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/room-types/:id\", authenticateToken, async (req, res) => {\n    try {\n      const updated = await storage.updateRoomType(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Room type not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating room type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/room-types/:id\", authenticateToken, async (req, res) => {\n    try {\n      await storage.deleteRoomType(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting room type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Room Management Routes\n  app.get(\"/api/rooms\", authenticateToken, async (req, res) => {\n    try {\n      const rooms = await storage.getAllRooms();\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/rooms\", authenticateToken, async (req, res) => {\n    try {\n      const room = await storage.createRoom(req.body);\n      res.status(201).json(room);\n    } catch (error) {\n      console.error(\"Error creating room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/rooms/:id\", authenticateToken, async (req, res) => {\n    try {\n      const updated = await storage.updateRoom(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Room not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/rooms/:id\", authenticateToken, async (req, res) => {\n    try {\n      await storage.deleteRoom(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/rooms/by-type/:roomTypeId\", authenticateToken, async (req, res) => {\n    try {\n      const rooms = await storage.getRoomsByType(req.params.roomTypeId);\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms by type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/rooms/:id/occupancy\", authenticateToken, async (req, res) => {\n    try {\n      const { isOccupied } = req.body;\n      const updated = await storage.updateRoomOccupancy(req.params.id, isOccupied);\n      if (!updated) {\n        return res.status(404).json({ error: \"Room not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating room occupancy:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Hospital Settings Routes\n  app.get(\"/api/settings/hospital\", authenticateToken, async (req, res) => {\n    try {\n      const settings = await storage.getHospitalSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching hospital settings:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/settings/hospital\", authenticateToken, async (req, res) => {\n    try {\n      const settings = await storage.saveHospitalSettings(req.body);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error saving hospital settings:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/settings/upload-logo\", authenticateToken, async (req, res) => {\n    try {\n      const { logo } = req.body;\n      const logoPath = await storage.saveLogo(logo);\n      res.json({ logoPath });\n    } catch (error) {\n      console.error(\"Error uploading logo:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Daily receipt count for receipt numbering\n  app.get(\"/api/receipts/daily-count/:serviceType/:date\", authenticateToken, async (req, res) => {\n    try {\n      const { serviceType, date } = req.params;\n      const count = await storage.getDailyReceiptCount(serviceType, date);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error getting daily receipt count:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admission Events Routes\n  app.get(\"/api/admissions/:id/events\", authenticateToken, async (req, res) => {\n    try {\n      const events = await storage.getAdmissionEvents(req.params.id);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching admission events:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admissions/:id/transfer\", authenticateToken, async (req: any, res) => {\n    try {\n      const { roomNumber, wardType } = req.body;\n      const updated = await storage.transferRoom(req.params.id, { roomNumber, wardType }, req.user.id);\n      if (!updated) {\n        return res.status(404).json({ error: \"Admission not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error transferring room:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admissions/:id/discharge\", authenticateToken, async (req: any, res) => {\n    try {\n      const updated = await storage.dischargePatient(req.params.id, req.user.id);\n      if (!updated) {\n        return res.status(404).json({ error: \"Admission not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error discharging patient:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Inpatient Management Detail Routes (IST-based calculations)\n  app.get(\"/api/inpatients/bed-occupancy\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const bedOccupancy = await storage.getBedOccupancyDetails();\n      res.json(bedOccupancy);\n    } catch (error) {\n      console.error(\"Error fetching bed occupancy:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/inpatients/currently-admitted\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const admittedPatients = await storage.getCurrentlyAdmittedPatients();\n      res.json(admittedPatients);\n    } catch (error) {\n      console.error(\"Error fetching currently admitted patients:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/inpatients/admitted-today\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const todayAdmissions = await storage.getTodayAdmissions();\n      res.json(todayAdmissions);\n    } catch (error) {\n      console.error(\"Error fetching today's admissions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/inpatients/discharged-today\", authenticateToken, async (req, res) => {\n    try {\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      const todayDischarges = await storage.getTodayDischarges();\n      res.json(todayDischarges);\n    } catch (error) {\n      console.error(\"Error fetching today's discharges:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":29728},"server/storage.ts":{"content":"import Database from \"better-sqlite3\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport { migrate } from \"drizzle-orm/better-sqlite3/migrator\";\nimport * as schema from \"@shared/schema\";\nimport type {\n  User, InsertUser, Doctor, InsertDoctor, Patient, InsertPatient,\n  PatientVisit, InsertPatientVisit, Service, InsertService,\n  Bill, InsertBill, BillItem, InsertBillItem,\n  PathologyOrder, InsertPathologyOrder, PathologyTest, InsertPathologyTest,\n  PatientService, InsertPatientService, Admission, InsertAdmission,\n  AdmissionEvent, InsertAdmissionEvent, AuditLog, InsertAuditLog\n} from \"@shared/schema\";\nimport { eq, desc, and, sql, asc, ne, like } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Initialize SQLite database\nconst dbPath = path.join(process.cwd(), \"hospital.db\");\nconst sqlite = new Database(dbPath);\nexport const db = drizzle(sqlite, { schema });\n\n// Initialize database with tables\nasync function initializeDatabase() {\n  try {\n    // Create tables if they don't exist\n    sqlite.exec(`\n      CREATE TABLE IF NOT EXISTS users (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        username TEXT NOT NULL UNIQUE,\n        password TEXT NOT NULL,\n        full_name TEXT NOT NULL,\n        role TEXT NOT NULL,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS doctors (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        user_id TEXT REFERENCES users(id),\n        name TEXT NOT NULL,\n        specialization TEXT NOT NULL,\n        qualification TEXT NOT NULL,\n        consultation_fee REAL NOT NULL,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patients (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        patient_id TEXT NOT NULL UNIQUE,\n        name TEXT NOT NULL,\n        age INTEGER NOT NULL,\n        gender TEXT NOT NULL,\n        phone TEXT NOT NULL,\n        address TEXT,\n        email TEXT,\n        emergency_contact TEXT,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patient_visits (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        visit_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        doctor_id TEXT NOT NULL REFERENCES doctors(id),\n        visit_type TEXT NOT NULL,\n        visit_date TEXT NOT NULL,\n        symptoms TEXT,\n        diagnosis TEXT,\n        prescription TEXT,\n        status TEXT NOT NULL DEFAULT 'active',\n        admission_date TEXT,\n        discharge_date TEXT,\n        room_number TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS services (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL,\n        category TEXT NOT NULL,\n        price REAL NOT NULL,\n        description TEXT,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS bills (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        bill_number TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        visit_id TEXT REFERENCES patient_visits(id),\n        subtotal REAL NOT NULL,\n        tax_amount REAL NOT NULL,\n        discount_amount REAL NOT NULL DEFAULT 0,\n        total_amount REAL NOT NULL,\n        payment_method TEXT NOT NULL,\n        payment_status TEXT NOT NULL DEFAULT 'pending',\n        paid_amount REAL NOT NULL DEFAULT 0,\n        created_by TEXT NOT NULL REFERENCES users(id),\n        bill_date TEXT NOT NULL,\n        due_date TEXT,\n        notes TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS bill_items (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        bill_id TEXT NOT NULL REFERENCES bills(id),\n        service_id TEXT NOT NULL REFERENCES services(id),\n        quantity INTEGER NOT NULL DEFAULT 1,\n        unit_price REAL NOT NULL,\n        total_price REAL NOT NULL,\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS pathology_orders (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        order_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        visit_id TEXT REFERENCES patient_visits(id),\n        doctor_id TEXT REFERENCES doctors(id),\n        status TEXT NOT NULL DEFAULT 'ordered',\n        ordered_date TEXT NOT NULL,\n        collected_date TEXT,\n        report_date TEXT,\n        remarks TEXT,\n        total_price REAL NOT NULL DEFAULT 0,\n        receipt_number TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS pathology_tests (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        order_id TEXT NOT NULL REFERENCES pathology_orders(id),\n        test_name TEXT NOT NULL,\n        test_category TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'ordered',\n        results TEXT,\n        normal_range TEXT,\n        price REAL NOT NULL,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS patient_services (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        service_id TEXT NOT NULL,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        visit_id TEXT REFERENCES patient_visits(id),\n        doctor_id TEXT REFERENCES doctors(id),\n        service_type TEXT NOT NULL,\n        service_name TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'scheduled',\n        scheduled_date TEXT NOT NULL,\n        scheduled_time TEXT NOT NULL DEFAULT '09:00',\n        completed_date TEXT,\n        notes TEXT,\n        price REAL NOT NULL DEFAULT 0,\n        receipt_number TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS admissions (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        admission_id TEXT NOT NULL UNIQUE,\n        patient_id TEXT NOT NULL REFERENCES patients(id),\n        doctor_id TEXT REFERENCES doctors(id),\n        current_room_id TEXT,\n        current_ward_type TEXT,\n        current_room_number TEXT,\n        admission_date TEXT NOT NULL,\n        discharge_date TEXT,\n        status TEXT NOT NULL DEFAULT 'admitted',\n        reason TEXT,\n        diagnosis TEXT,\n        notes TEXT,\n        daily_cost REAL NOT NULL DEFAULT 0,\n        total_cost REAL NOT NULL DEFAULT 0,\n        initial_deposit REAL NOT NULL DEFAULT 0,\n        additional_payments REAL NOT NULL DEFAULT 0,\n        last_payment_date TEXT,\n        total_discount REAL DEFAULT 0,\n        last_discount_date TEXT,\n        last_discount_amount REAL DEFAULT 0,\n        last_discount_reason TEXT,\n        last_payment_amount REAL DEFAULT 0,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS hospital_settings (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL DEFAULT 'MedCare Pro Hospital',\n        address TEXT NOT NULL DEFAULT '123 Healthcare Street, Medical District, City - 123456',\n        phone TEXT NOT NULL DEFAULT '+91 98765 43210',\n        email TEXT NOT NULL DEFAULT 'info@medcarepro.com',\n        registration_number TEXT,\n        logo_path TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS admission_events (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        admission_id TEXT NOT NULL REFERENCES admissions(id),\n        event_type TEXT NOT NULL,\n        event_time TEXT NOT NULL DEFAULT (datetime('now')),\n        room_id TEXT,\n        room_number TEXT,\n        ward_type TEXT,\n        notes TEXT,\n        receipt_number TEXT,\n        created_by TEXT REFERENCES users(id),\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS room_types (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        name TEXT NOT NULL UNIQUE,\n        category TEXT NOT NULL,\n        daily_cost REAL NOT NULL DEFAULT 0,\n        total_beds INTEGER NOT NULL DEFAULT 0,\n        occupied_beds INTEGER NOT NULL DEFAULT 0,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS rooms (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        room_number TEXT NOT NULL UNIQUE,\n        room_type_id TEXT NOT NULL REFERENCES room_types(id),\n        floor TEXT,\n        building TEXT,\n        capacity INTEGER NOT NULL DEFAULT 1,\n        is_occupied INTEGER NOT NULL DEFAULT 0,\n        is_active INTEGER NOT NULL DEFAULT 1,\n        notes TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now')),\n        updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n\n      CREATE TABLE IF NOT EXISTS audit_log (\n        id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n        user_id TEXT NOT NULL REFERENCES users(id),\n        action TEXT NOT NULL,\n        table_name TEXT NOT NULL,\n        record_id TEXT NOT NULL,\n        old_values TEXT,\n        new_values TEXT,\n        ip_address TEXT,\n        user_agent TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      );\n    `);\n\n    // Migrate existing tables to add new columns if they don't exist\n    try {\n      // Add total_beds and occupied_beds columns to room_types table if they don't exist\n      db.$client.exec(`\n        ALTER TABLE room_types ADD COLUMN total_beds INTEGER DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE room_types ADD COLUMN occupied_beds INTEGER DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add additional_payments column to admissions table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN additional_payments REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add registration_number column to hospital_settings table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE hospital_settings ADD COLUMN registration_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add new columns to admissions table for current room tracking\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN current_room_id TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN current_ward_type TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN current_room_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add last_payment_date column to admissions table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_payment_date TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add discount-related columns to admissions table if they don't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN total_discount REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_discount_date TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_discount_amount REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_discount_reason TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    try {\n      db.$client.exec(`\n        ALTER TABLE admissions ADD COLUMN last_payment_amount REAL DEFAULT 0;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add receiptNumber column to patient_services table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE patient_services ADD COLUMN receipt_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add receiptNumber column to pathology_orders table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE pathology_orders ADD COLUMN receipt_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Add receiptNumber column to admission_events table if it doesn't exist\n    try {\n      db.$client.exec(`\n        ALTER TABLE admission_events ADD COLUMN receipt_number TEXT;\n      `);\n    } catch (error) {\n      // Column already exists, ignore error\n    }\n\n    // Always ensure demo users and data exist on every restart\n    await createDemoData();\n\n    console.log(\"Database initialized successfully\");\n  } catch (error) {\n    console.error(\"Database initialization error:\", error);\n  }\n}\n\n// Demo data creation function\nasync function createDemoData() {\n  try {\n    // Check and create demo users\n    const demoUserData = [\n      { username: 'admin', password: 'admin123', fullName: 'System Administrator', role: 'admin', id: 'admin-user-id' },\n      { username: 'doctor', password: 'doctor123', fullName: 'Dr. John Smith', role: 'doctor', id: 'doctor-user-id' },\n      { username: 'billing', password: 'billing123', fullName: 'Billing Staff', role: 'billing_staff', id: 'billing-user-id' },\n      { username: 'reception', password: 'reception123', fullName: 'Reception Staff', role: 'receptionist', id: 'reception-user-id' }\n    ];\n\n    for (const userData of demoUserData) {\n      const existing = db.select().from(schema.users).where(eq(schema.users.username, userData.username)).get();\n      if (!existing) {\n        const hashedPassword = await bcrypt.hash(userData.password, 10);\n        db.insert(schema.users).values({\n          id: userData.id,\n          username: userData.username,\n          password: hashedPassword,\n          fullName: userData.fullName,\n          role: userData.role,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }).run();\n        console.log(`Created demo user: ${userData.username}`);\n      }\n    }\n\n    // Check and create demo services\n    // Demo services removed - only use services created through the service management system\n\n    // Check and create demo doctor profile\n    const existingDoctor = db.select().from(schema.doctors).where(eq(schema.doctors.id, 'doctor-profile-id')).get();\n    if (!existingDoctor) {\n      db.insert(schema.doctors).values({\n        id: 'doctor-profile-id',\n        userId: 'doctor-user-id',\n        name: 'Dr. John Smith',\n        specialization: 'General Medicine',\n        qualification: 'MBBS, MD',\n        consultationFee: 500,\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }).run();\n      console.log(\"Created demo doctor profile\");\n    }\n\n    console.log(\"Demo data verification completed\");\n  } catch (error) {\n    console.error(\"Error creating demo data:\", error);\n  }\n}\n\n// Initialize the database\ninitializeDatabase().then(() => {\n  createDemoData();\n});\n\nexport interface IStorage {\n  // User management\n  createUser(user: InsertUser): Promise<User>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  verifyPassword(password: string, hashedPassword: string): Promise<boolean>;\n  hashPassword(password: string): Promise<string>;\n\n  // Doctor management\n  createDoctor(doctor: InsertDoctor): Promise<Doctor>;\n  getDoctors(): Promise<Doctor[]>;\n  getDoctorById(id: string): Promise<Doctor | undefined>;\n  updateDoctor(id: string, doctor: Partial<InsertDoctor>): Promise<Doctor | undefined>;\n  deleteDoctor(id: string): Promise<Doctor | undefined>; // Added deleteDoctor\n  restoreDoctor(id: string): Promise<Doctor | undefined>;\n  permanentlyDeleteDoctor(id: string): Promise<Doctor | undefined>;\n\n  // Patient management\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  getPatients(): Promise<Patient[]>;\n  getPatientById(id: string): Promise<Patient | undefined>;\n  searchPatients(query: string): Promise<Patient[]>;\n  updatePatient(id: string, patient: Partial<InsertPatient>): Promise<Patient | undefined>;\n\n  // Patient visits\n  createPatientVisit(visit: InsertPatientVisit): Promise<PatientVisit>;\n  getPatientVisits(patientId?: string): Promise<PatientVisit[]>;\n  getPatientVisitById(id: string): Promise<PatientVisit | undefined>;\n\n  // Services\n  createService(service: InsertService): Promise<Service>;\n  getServices(): Promise<Service[]>;\n  getServiceById(id: string): Promise<Service | undefined>;\n  searchServices(query: string): Promise<Service[]>;\n  updateService(id: string, service: InsertService): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n\n  // Billing\n  createBill(bill: InsertBill, items: InsertBillItem[]): Promise<Bill>;\n  getBills(): Promise<Bill[]>;\n  getBillById(id: string): Promise<Bill | undefined>;\n  getBillItems(billId: string): Promise<BillItem[]>;\n  getBillsWithPatients(): Promise<any[]>;\n\n  // Pathology order and test management\n  createPathologyOrder(orderData: InsertPathologyOrder, tests: InsertPathologyTest[]): Promise<PathologyOrder>;\n  getPathologyOrders(): Promise<any[]>;\n  getPathologyOrderById(id: string): Promise<any>;\n  getPathologyOrdersByPatient(patientId: string): Promise<PathologyOrder[]>;\n  updatePathologyOrderStatus(id: string, status: string): Promise<PathologyOrder | undefined>;\n  updatePathologyTestStatus(id: string, status: string, results?: string): Promise<PathologyTest | undefined>;\n\n  // Patient Services\n  createPatientService(service: InsertPatientService): Promise<PatientService>;\n  getPatientServices(patientId?: string): Promise<PatientService[]>;\n  getPatientServiceById(id: string): Promise<PatientService | undefined>;\n  updatePatientService(id: string, service: Partial<InsertPatientService>): Promise<PatientService | undefined>;\n\n  // Patient Admissions\n  createAdmission(admission: InsertAdmission): Promise<Admission>;\n  getAdmissions(patientId?: string): Promise<Admission[]>;\n  getAdmissionById(id: string): Promise<Admission | undefined>;\n  updateAdmission(id: string, admission: Partial<InsertAdmission>): Promise<Admission | undefined>;\n\n  // Admission Events\n  createAdmissionEvent(event: InsertAdmissionEvent): Promise<AdmissionEvent>;\n  getAdmissionEvents(admissionId: string): Promise<AdmissionEvent[]>;\n  transferRoom(admissionId: string, roomData: { roomNumber: string, wardType: string }, userId: string): Promise<Admission | undefined>;\n  dischargePatient(admissionId: string, userId: string): Promise<Admission | undefined>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise<any>;\n\n  // Hospital settings\n  getHospitalSettings(): Promise<any>;\n  saveHospitalSettings(settings: any): Promise<any>;\n  saveLogo(logoData: string): Promise<string>;\n\n  // Audit logging\n  logAction(log: InsertAuditLog): Promise<void>;\n\n  // Receipt numbering\n  getDailyReceiptCount(serviceType: string, date: string): Promise<number>;\n}\n\nexport class SqliteStorage implements IStorage {\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n\n  private generatePatientId(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.patients).all().length + 1;\n    return `PAT-${year}-${count.toString().padStart(3, '0')}`;\n  }\n\n  private generateVisitId(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.patientVisits).all().length + 1;\n    return `VIS-${year}-${count.toString().padStart(3, '0')}`;\n  }\n\n  private generateBillNumber(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.bills).all().length + 1;\n    return `BILL-${year}-${count.toString().padStart(4, '0')}`;\n  }\n\n  private generateOrderId(): string {\n    const year = new Date().getFullYear();\n    const count = db.select().from(schema.pathologyOrders).all().length + 1;\n    return `LAB-${year}-${count.toString().padStart(3, '0')}`;\n  }\n\n  private generateAdmissionId(): string {\n    const year = new Date().getFullYear();\n    try {\n      const count = db.select().from(schema.admissions).all().length + 1;\n      return `ADM-${year}-${count.toString().padStart(3, '0')}`;\n    } catch (error) {\n      console.error('Error querying admissions table:', error);\n      // Fallback to timestamp-based ID if table query fails\n      const timestamp = Date.now().toString().slice(-6);\n      return `ADM-${year}-${timestamp}`;\n    }\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 10);\n  }\n\n  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const hashedPassword = await this.hashPassword(user.password);\n    const created = db.insert(schema.users).values({\n      ...user,\n      password: hashedPassword,\n    }).returning().get();\n    return created;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const user = db.select().from(schema.users).where(eq(schema.users.username, username)).get();\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const user = db.select().from(schema.users).where(eq(schema.users.id, id)).get();\n    return user;\n  }\n\n  async createDoctor(doctor: InsertDoctor): Promise<Doctor> {\n    const created = db.insert(schema.doctors).values(doctor).returning().get();\n    return created;\n  }\n\n\n\n  async getDoctors(): Promise<Doctor[]> {\n    return db.select().from(schema.doctors).where(eq(schema.doctors.isActive, true)).all();\n  }\n\n  async getDoctorById(id: string): Promise<Doctor | undefined> {\n    return db.select().from(schema.doctors).where(eq(schema.doctors.id, id)).get();\n  }\n\n  async updateDoctor(id: string, doctor: Partial<InsertDoctor>): Promise<Doctor | undefined> {\n    const updated = db.update(schema.doctors)\n      .set({ ...doctor, updatedAt: new Date().toISOString() })\n      .where(eq(schema.doctors.id, id))\n      .returning().get();\n    return updated;\n  }\n\n  async deleteDoctor(id: string): Promise<Doctor | undefined> {\n    try {\n      // Soft delete by setting isActive to false instead of hard delete\n      const deleted = db.update(schema.doctors)\n        .set({\n          isActive: false,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(schema.doctors.id, id))\n        .returning().get();\n      return deleted;\n    } catch (error) {\n      console.error(\"Error deleting doctor:\", error);\n      throw error;\n    }\n  }\n\n  async getDeletedDoctors(): Promise<Doctor[]> {\n    return db.select().from(schema.doctors).where(eq(schema.doctors.isActive, false)).all();\n  }\n\n  async restoreDoctor(id: string): Promise<Doctor | undefined> {\n    try {\n      const restored = db.update(schema.doctors)\n        .set({\n          isActive: true,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(schema.doctors.id, id))\n        .returning().get();\n      return restored;\n    } catch (error) {\n      console.error(\"Error restoring doctor:\", error);\n      throw error;\n    }\n  }\n\n  async permanentlyDeleteDoctor(id: string): Promise<Doctor | undefined> {\n    try {\n      // First, get the doctor to be deleted for returning\n      const doctorToDelete = db.select().from(schema.doctors)\n        .where(eq(schema.doctors.id, id))\n        .get();\n\n      if (!doctorToDelete) {\n        return undefined;\n      }\n\n      // Use transaction to handle foreign key constraints\n      return db.transaction((tx) => {\n        try {\n          // First, set all references to this doctor to null\n          \n          // Update patient_visits to set doctorId to null\n          tx.update(schema.patientVisits)\n            .set({ doctorId: null })\n            .where(eq(schema.patientVisits.doctorId, id))\n            .run();\n\n          // Update pathology_orders to set doctorId to null\n          tx.update(schema.pathologyOrders)\n            .set({ doctorId: null })\n            .where(eq(schema.pathologyOrders.doctorId, id))\n            .run();\n\n          // Update patient_services to set doctorId to null\n          tx.update(schema.patientServices)\n            .set({ doctorId: null })\n            .where(eq(schema.patientServices.doctorId, id))\n            .run();\n\n          // Update admissions to set doctorId to null\n          tx.update(schema.admissions)\n            .set({ doctorId: null })\n            .where(eq(schema.admissions.doctorId, id))\n            .run();\n\n          // Now delete the doctor record\n          tx.delete(schema.doctors)\n            .where(eq(schema.doctors.id, id))\n            .run();\n\n          return doctorToDelete;\n        } catch (transactionError) {\n          console.error(\"Transaction error during permanent delete:\", transactionError);\n          throw transactionError;\n        }\n      });\n    } catch (error) {\n      console.error(\"Error permanently deleting doctor:\", error);\n      throw error;\n    }\n  }\n\n  async createPatient(patient: InsertPatient): Promise<Patient> {\n    const patientId = this.generatePatientId();\n    const created = db.insert(schema.patients).values({\n      ...patient,\n      patientId,\n    }).returning().get();\n    return created;\n  }\n\n  async getPatients(): Promise<Patient[]> {\n    return db.select().from(schema.patients)\n      .where(eq(schema.patients.isActive, true))\n      .orderBy(desc(schema.patients.createdAt))\n      .all();\n  }\n\n  async getPatientById(id: string): Promise<Patient | undefined> {\n    return db.select().from(schema.patients).where(eq(schema.patients.id, id)).get();\n  }\n\n  async searchPatients(query: string): Promise<Patient[]> {\n    return db.select().from(schema.patients)\n      .where(\n        and(\n          eq(schema.patients.isActive, true),\n          like(schema.patients.name, `%${query}%`)\n        )\n      )\n      .limit(10)\n      .all();\n  }\n\n  async updatePatient(id: string, patient: Partial<InsertPatient>): Promise<Patient | undefined> {\n    const updated = db.update(schema.patients)\n      .set({ ...patient, updatedAt: new Date().toISOString() })\n      .where(eq(schema.patients.id, id))\n      .returning().get();\n    return updated;\n  }\n\n  async createPatientVisit(visit: InsertPatientVisit): Promise<PatientVisit> {\n    const visitId = this.generateVisitId();\n    const created = db.insert(schema.patientVisits).values({\n      ...visit,\n      visitId,\n    }).returning().get();\n    return created;\n  }\n\n  async getPatientVisits(patientId?: string): Promise<PatientVisit[]> {\n    if (patientId) {\n      return db.select().from(schema.patientVisits)\n        .where(eq(schema.patientVisits.patientId, patientId))\n        .orderBy(desc(schema.patientVisits.createdAt))\n        .all();\n    }\n    return db.select().from(schema.patientVisits)\n      .orderBy(desc(schema.patientVisits.createdAt))\n      .all();\n  }\n\n  async getPatientVisitById(id: string): Promise<PatientVisit | undefined> {\n    return db.select().from(schema.patientVisits).where(eq(schema.patientVisits.id, id)).get();\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const created = db.insert(schema.services).values(service).returning().get();\n    return created;\n  }\n\n  async getServices(): Promise<Service[]> {\n    return db.select().from(schema.services)\n      .where(eq(schema.services.isActive, true))\n      .orderBy(schema.services.name)\n      .all();\n  }\n\n  async getServiceById(id: string): Promise<Service | undefined> {\n    return db.select().from(schema.services).where(eq(schema.services.id, id)).get();\n  }\n\n  async searchServices(query: string): Promise<Service[]> {\n    return db.select().from(schema.services)\n      .where(\n        and(\n          eq(schema.services.isActive, true),\n          like(schema.services.name, `%${query}%`)\n        )\n      )\n      .limit(20)\n      .all();\n  }\n\n  async updateService(id: string, service: InsertService): Promise<Service | undefined> {\n    const updated = db.update(schema.services)\n      .set(service)\n      .where(eq(schema.services.id, id))\n      .returning()\n      .get();\n    return updated;\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    const result = db.delete(schema.services).where(eq(schema.services.id, id)).run();\n    return result.changes > 0;\n  }\n\n  async createBill(bill: InsertBill, items: InsertBillItem[]): Promise<Bill> {\n    const billNumber = this.generateBillNumber();\n\n    return db.transaction((tx) => {\n      const created = tx.insert(schema.bills).values({\n        ...bill,\n        billNumber,\n      }).returning().get();\n\n      const billItems = items.map(item => ({\n        ...item,\n        billId: created.id,\n      }));\n\n      tx.insert(schema.billItems).values(billItems);\n\n      return created;\n    });\n  }\n\n  async getBills(): Promise<Bill[]> {\n    return db.select().from(schema.bills)\n      .orderBy(desc(schema.bills.createdAt))\n      .all();\n  }\n\n  async getBillById(id: string): Promise<Bill | undefined> {\n    return db.select().from(schema.bills).where(eq(schema.bills.id, id)).get();\n  }\n\n  async getBillItems(billId: string): Promise<BillItem[]> {\n    return db.select().from(schema.billItems)\n      .where(eq(schema.billItems.billId, billId))\n      .all();\n  }\n\n  async getBillsWithPatients(): Promise<any[]> {\n    return db.select({\n      bill: schema.bills,\n      patient: schema.patients,\n    })\n    .from(schema.bills)\n    .leftJoin(schema.patients, eq(schema.bills.patientId, schema.patients.id))\n    .orderBy(desc(schema.bills.createdAt))\n    .all();\n  }\n\n  async createPathologyOrder(orderData: InsertPathologyOrder, tests: InsertPathologyTest[]): Promise<PathologyOrder> {\n    const generatedOrderId = this.generateOrderId();\n    const totalPrice = tests.reduce((total, test) => total + test.price, 0);\n    const orderedDate = orderData.orderedDate || new Date().toISOString().split('T')[0];\n\n    // Generate proper receipt number for pathology\n    const count = await this.getDailyReceiptCount('pathology', orderedDate);\n    const dateObj = new Date(orderedDate);\n    const yymmdd = dateObj.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n    const receiptNumber = `${yymmdd}-PAT-${count.toString().padStart(4, '0')}`;\n\n    return db.transaction((tx) => {\n      // Insert the order first\n      const created = tx.insert(schema.pathologyOrders).values({\n        ...orderData,\n        orderId: generatedOrderId,\n        totalPrice,\n        receiptNumber,\n      }).returning().get();\n\n      // Insert all tests for this order\n      tests.forEach(test => {\n        tx.insert(schema.pathologyTests).values({\n          testName: test.testName,\n          testCategory: test.testCategory,\n          price: test.price,\n          orderId: created.id, // Use the actual database ID, not the generated order ID\n          status: 'ordered',\n        }).run();\n      });\n\n      return created;\n    });\n  }\n\n  async getPathologyOrders(): Promise<any[]> {\n    return db.select({\n      order: schema.pathologyOrders,\n      patient: schema.patients,\n      doctor: schema.doctors,\n    })\n    .from(schema.pathologyOrders)\n    .leftJoin(schema.patients, eq(schema.pathologyOrders.patientId, schema.patients.id))\n    .leftJoin(schema.doctors, eq(schema.pathologyOrders.doctorId, schema.doctors.id))\n    .orderBy(desc(schema.pathologyOrders.createdAt))\n    .all();\n  }\n\n  async getPathologyOrderById(id: string): Promise<any> {\n    const order = db.select().from(schema.pathologyOrders).where(eq(schema.pathologyOrders.id, id)).get();\n    if (!order) return null;\n\n    const tests = db.select().from(schema.pathologyTests).where(eq(schema.pathologyTests.orderId, id)).all();\n    const patient = db.select().from(schema.patients).where(eq(schema.patients.id, order.patientId)).get();\n    const doctor = order.doctorId ? db.select().from(schema.doctors).where(eq(schema.doctors.id, order.doctorId)).get() : null;\n\n    return {\n      order,\n      tests,\n      patient,\n      doctor,\n    };\n  }\n\n  async updatePathologyOrderStatus(orderId: string, status: string): Promise<any> {\n    const updatedOrder = db.update(schema.pathologyOrders)\n      .set({\n        status,\n        updatedAt: new Date().toISOString(),\n        ...(status === 'completed' ? { completedDate: new Date().toISOString() } : {})\n      })\n      .where(eq(schema.pathologyOrders.id, orderId))\n      .returning()\n      .get();\n\n    if (!updatedOrder) {\n      throw new Error(\"Order not found\");\n    }\n\n    // Also update all tests in this order to the same status\n    db.update(schema.pathologyTests)\n      .set({\n        status,\n        updatedAt: new Date().toISOString()\n      })\n      .where(eq(schema.pathologyTests.orderId, orderId))\n      .run();\n\n    return updatedOrder;\n  }\n\n  async getPathologyOrdersByPatient(patientId: string): Promise<PathologyOrder[]> {\n    return db.select().from(schema.pathologyOrders)\n      .where(eq(schema.pathologyOrders.patientId, patientId))\n      .orderBy(desc(schema.pathologyOrders.createdAt))\n      .all();\n  }\n\n  async updatePathologyOrderStatus(id: string, status: string): Promise<PathologyOrder | undefined> {\n    const updated = db.update(schema.pathologyOrders)\n      .set({ status, updatedAt: new Date().toISOString() })\n      .where(eq(schema.pathologyOrders.id, id))\n      .returning().get();\n    return updated;\n  }\n\n  async updatePathologyTestStatus(id: string, status: string, results?: string): Promise<PathologyTest | undefined> {\n    const updated = db.update(schema.pathologyTests)\n      .set({ status, results, updatedAt: new Date().toISOString() })\n      .where(eq(schema.pathologyTests.id, id))\n      .returning().get();\n    return updated;\n  }\n\n  async createPatientService(serviceData: any): Promise<any> {\n    try {\n      const created = db.insert(schema.patientServices).values({\n        ...serviceData,\n        serviceId: serviceData.serviceId || `SRV-${Date.now()}`,\n        receiptNumber: serviceData.receiptNumber || null,\n      }).returning().get();\n\n      return created;\n    } catch (error) {\n      console.error('Error creating patient service:', error);\n      throw error;\n    }\n  }\n\n  async getPatientServices(patientId?: string): Promise<PatientService[]>{\n    if (patientId) {\n      return db.select().from(schema.patientServices)\n        .where(eq(schema.patientServices.patientId, patientId))\n        .orderBy(desc(schema.patientServices.scheduledDate))\n        .all();\n    }\n    return db.select().from(schema.patientServices)\n      .orderBy(desc(schema.patientServices.createdAt))\n      .all();\n  }\n\n  async getPatientServiceById(id: string): Promise<PatientService | undefined> {\n    return db.select().from(schema.patientServices)\n      .where(eq(schema.patientServices.id, id))\n      .get();\n  }\n\n  async updatePatientService(id: string, service: Partial<InsertPatientService>): Promise<PatientService | undefined> {\n    const updated = db.update(schema.patientServices)\n      .set({ ...service, updatedAt: new Date().toISOString() })\n      .where(eq(schema.patientServices.id, id))\n      .returning().get();\n    return updated;\n  }\n\n  async createAdmission(admission: InsertAdmission): Promise<Admission> {\n    const admissionId = this.generateAdmissionId();\n    // Use Indian timezone (UTC+5:30) for consistent date calculation\n    const now = new Date();\n    const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n    const eventDate = indianTime.getFullYear() + '-' +\n      String(indianTime.getMonth() + 1).padStart(2, '0') + '-' +\n      String(indianTime.getDate()).padStart(2, '0');\n    const admissionDate = eventDate; // Store just the date part for easier querying\n\n    return db.transaction((tx) => {\n      // CRITICAL VALIDATION: Check if room is already occupied\n      if (admission.currentRoomNumber && admission.currentWardType) {\n        const existingAdmission = tx.select()\n          .from(schema.admissions)\n          .where(\n            and(\n              eq(schema.admissions.currentRoomNumber, admission.currentRoomNumber),\n              eq(schema.admissions.currentWardType, admission.currentWardType),\n              eq(schema.admissions.status, 'admitted')\n            )\n          )\n          .get();\n\n        if (existingAdmission) {\n          throw new Error(`Room ${admission.currentRoomNumber} in ${admission.currentWardType} is already occupied by another patient. Please select a different room.`);\n        }\n      }\n\n      // Generate receipt number for admission\n      const admissionCount = this.getDailyReceiptCountSync('admission', eventDate);\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n      const receiptNumber = `${yymmdd}-ADM-${admissionCount.toString().padStart(4, '0')}`;\n\n      // Create the admission episode\n      const created = tx.insert(schema.admissions).values({\n        ...admission,\n        admissionId,\n        admissionDate,\n        // Map the wardType to current fields\n        currentWardType: admission.currentWardType,\n        currentRoomNumber: admission.currentRoomNumber,\n      }).returning().get();\n\n      // Create the initial admission event with receipt number\n      tx.insert(schema.admissionEvents).values({\n        admissionId: created.id,\n        eventType: \"admit\",\n        eventTime: admissionDate,\n        roomNumber: admission.currentRoomNumber,\n        wardType: admission.currentWardType,\n        notes: `Patient admitted to ${admission.currentWardType} - Room ${admission.currentRoomNumber}`,\n        receiptNumber: receiptNumber,\n      }).run();\n\n      // Increment occupied beds for the room type\n      if (admission.currentWardType) {\n        const roomType = tx.select().from(schema.roomTypes)\n          .where(eq(schema.roomTypes.name, admission.currentWardType))\n          .get();\n\n        if (roomType) {\n          tx.update(schema.roomTypes)\n            .set({\n              occupiedBeds: (roomType.occupiedBeds || 0) + 1,\n              updatedAt: new Date().toISOString()\n            })\n            .where(eq(schema.roomTypes.id, roomType.id))\n            .run();\n        }\n      }\n\n      return created;\n    });\n  }\n\n  async getAdmissions(patientId?: string): Promise<Admission[]> {\n    if (patientId) {\n      return db.select().from(schema.admissions)\n        .where(eq(schema.admissions.patientId, patientId))\n        .orderBy(desc(schema.admissions.admissionDate))\n        .all();\n    }\n    return db.select().from(schema.admissions)\n      .orderBy(desc(schema.admissions.createdAt))\n      .all();\n  }\n\n  async getAdmissionById(id: string): Promise<Admission | undefined> {\n    return db.select().from(schema.admissions)\n      .where(eq(schema.admissions.id, id))\n      .get();\n  }\n\n  async updateAdmission(id: string, admission: Partial<InsertAdmission>): Promise<Admission | undefined> {\n    // Get the current admission to check for status changes\n    const currentAdmission = db.select().from(schema.admissions)\n      .where(eq(schema.admissions.id, id))\n      .get();\n\n    const updated = db.update(schema.admissions)\n      .set({ ...admission, updatedAt: new Date().toISOString() })\n      .where(eq(schema.admissions.id, id))\n      .returning().get();\n\n    // Handle bed count changes when status changes\n    if (currentAdmission && admission.status === 'discharged' && currentAdmission.status === 'admitted') {\n      // Patient is being discharged - decrement occupied beds\n      if (currentAdmission.currentWardType) {\n        const roomType = db.select().from(schema.roomTypes)\n          .where(eq(schema.roomTypes.name, currentAdmission.currentWardType))\n          .get();\n\n        if (roomType && roomType.occupiedBeds > 0) {\n          db.update(schema.roomTypes)\n            .set({\n              occupiedBeds: roomType.occupiedBeds - 1,\n              updatedAt: new Date().toISOString()\n            })\n            .where(eq(schema.roomTypes.id, roomType.id))\n            .run();\n        }\n      }\n    }\n\n    // Update last_payment_date if a payment is made\n    if (admission.status === 'paid' && updated) {\n        updated.lastPaymentDate = new Date().toISOString();\n        await db.update(schema.admissions).set({ lastPaymentDate: updated.lastPaymentDate }).where(eq(schema.admissions.id, id)).run();\n    }\n\n\n    return updated;\n  }\n\n  async logAction(log: InsertAuditLog): Promise<void> {\n    db.insert(schema.auditLog).values(log);\n  }\n\n  async getDashboardStats(): Promise<any> {\n    try {\n      // Use Indian timezone (UTC+5:30) for consistent date calculation\n      const now = new Date();\n      const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n      const today = indianTime.getFullYear() + '-' +\n        String(indianTime.getMonth() + 1).padStart(2, '0') + '-' +\n        String(indianTime.getDate()).padStart(2, '0');\n\n      console.log('Dashboard stats - Today date (Indian time):', today);\n      console.log('Dashboard stats - Raw now:', now);\n      console.log('Dashboard stats - Indian time:', indianTime);\n\n      // Get ALL OPD services first to debug\n      const allOpdServices = db.select().from(schema.patientServices)\n        .where(eq(schema.patientServices.serviceType, 'opd'))\n        .all();\n\n      console.log('All OPD services found:', allOpdServices.length);\n      console.log('All OPD services details:', allOpdServices.map(s => ({\n        id: s.id,\n        scheduledDate: s.scheduledDate,\n        serviceType: s.serviceType,\n        createdAt: s.createdAt\n      })));\n\n      // Get OPD patient count for today using same filter logic as OPD List\n      const todayOpdServices = allOpdServices.filter(service => {\n        const matches = service.scheduledDate === today;\n        console.log(`Service ${service.id}: scheduledDate=\"${service.scheduledDate}\" vs today=\"${today}\" => matches: ${matches}`);\n        return matches;\n      });\n\n      console.log('Today OPD services filtered:', todayOpdServices.length);\n      console.log('Today OPD services details:', todayOpdServices);\n      console.log('Dashboard OPD count for today:', todayOpdServices.length);\n\n      // Get inpatients count (currently admitted)\n      const inpatients = db.select()\n        .from(schema.admissions)\n        .where(eq(schema.admissions.status, 'admitted'))\n        .all().length;\n\n      // Get lab tests count for today\n      const labTests = db.select()\n        .from(schema.pathologyOrders)\n        .where(eq(schema.pathologyOrders.orderedDate, today))\n        .all().length;\n\n      // Get diagnostics count (pathology tests completed today)\n      const diagnostics = db.select()\n        .from(schema.pathologyTests)\n        .where(eq(schema.pathologyTests.status, 'completed'))\n        .all().length;\n\n      return {\n        opdPatients: todayOpdServices.length,\n        inpatients,\n        labTests,\n        diagnostics\n      };\n    } catch (error) {\n      console.error('Dashboard stats error:', error);\n      return {\n        opdPatients: 0,\n        inpatients: 0,\n        labTests: 0,\n        diagnostics: 0\n      };\n    }\n  }\n\n  // Room Type Management\n  async getAllRoomTypes(): Promise<any[]> {\n    return db.select().from(schema.roomTypes).orderBy(schema.roomTypes.name).all();\n  }\n\n  async createRoomType(data: any): Promise<any> {\n    return db.insert(schema.roomTypes).values(data).returning().get();\n  }\n\n  async updateRoomType(id: string, data: any): Promise<any> {\n    return db.update(schema.roomTypes)\n      .set({ ...data, updatedAt: new Date().toISOString() })\n      .where(eq(schema.roomTypes.id, id))\n      .returning()\n      .get();\n  }\n\n  async deleteRoomType(id: string): Promise<void> {\n    await db.delete(schema.roomTypes).where(eq(schema.roomTypes.id, id)).run();\n  }\n\n  // Room Management\n  async getAllRooms(): Promise<any[]> {\n    return db.select().from(schema.rooms).orderBy(schema.rooms.roomNumber).all();\n  }\n\n  async createRoom(data: any): Promise<any> {\n    return db.insert(schema.rooms).values(data).returning().get();\n  }\n\n  async updateRoom(id: string, data: any): Promise<any> {\n    return db.update(schema.rooms)\n      .set({ ...data, updatedAt: new Date().toISOString() })\n      .where(eq(schema.rooms.id, id))\n      .returning()\n      .get();\n  }\n\n  async deleteRoom(id: string): Promise<void> {\n    await db.delete(schema.rooms).where(eq(schema.rooms.id, id)).run();\n  }\n\n  async getRoomsByType(roomTypeId: string): Promise<any[]> {\n    return db.select().from(schema.rooms)\n      .where(eq(schema.rooms.roomTypeId, roomTypeId))\n      .all();\n  }\n\n  async updateRoomOccupancy(roomId: string, isOccupied: boolean): Promise<any> {\n    return db.update(schema.rooms)\n      .set({ isOccupied, updatedAt: new Date().toISOString() })\n      .where(eq(schema.rooms.id, roomId))\n      .returning()\n      .get();\n  }\n\n  // Admission Events\n  async createAdmissionEvent(event: InsertAdmissionEvent): Promise<AdmissionEvent> {\n    const created = db.insert(schema.admissionEvents).values(event).returning().get();\n    return created;\n  }\n\n  async getAdmissionEvents(admissionId: string): Promise<AdmissionEvent[]> {\n    return db.select().from(schema.admissionEvents)\n      .where(eq(schema.admissionEvents.admissionId, admissionId))\n      .orderBy(schema.admissionEvents.eventTime)\n      .all();\n  }\n\n  async transferRoom(admissionId: string, roomData: { roomNumber: string, wardType: string }, userId: string): Promise<Admission | undefined> {\n    return db.transaction((tx) => {\n      const eventTime = new Date().toISOString();\n      const eventDate = eventTime.split('T')[0];\n\n      // Generate receipt number for room transfer\n      const transferCount = this.getDailyReceiptCountSync('room_transfer', eventDate);\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n      const receiptNumber = `${yymmdd}-RMC-${transferCount.toString().padStart(4, '0')}`;\n\n      // Update the admission's current room\n      const updated = tx.update(schema.admissions)\n        .set({\n          currentRoomNumber: roomData.roomNumber,\n          currentWardType: roomData.wardType,\n          updatedAt: eventTime\n        })\n        .where(eq(schema.admissions.id, admissionId))\n        .returning().get();\n\n      // Create room change event with receipt number\n      tx.insert(schema.admissionEvents).values({\n        admissionId: admissionId,\n        eventType: \"room_change\",\n        eventTime: eventTime,\n        roomNumber: roomData.roomNumber,\n        wardType: roomData.wardType,\n        notes: `Room transferred to ${roomData.wardType} - Room ${roomData.roomNumber}`,\n        createdBy: userId,\n        receiptNumber: receiptNumber,\n      }).run();\n\n      return updated;\n    });\n  }\n\n  async dischargePatient(admissionId: string, userId: string): Promise<Admission | undefined> {\n    return db.transaction((tx) => {\n      const currentAdmission = tx.select().from(schema.admissions)\n        .where(eq(schema.admissions.id, admissionId))\n        .get();\n\n      if (!currentAdmission) return undefined;\n\n      const dischargeDate = new Date().toISOString();\n      const eventDate = dischargeDate.split('T')[0];\n\n      // Generate receipt number for discharge\n      const dischargeCount = this.getDailyReceiptCountSync('discharge', eventDate);\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n      const receiptNumber = `${yymmdd}-DIS-${dischargeCount.toString().padStart(4, '0')}`;\n\n      // Update admission status\n      const updated = tx.update(schema.admissions)\n        .set({\n          status: \"discharged\",\n          dischargeDate: dischargeDate,\n          updatedAt: dischargeDate\n        })\n        .where(eq(schema.admissions.id, admissionId))\n        .returning().get();\n\n      // Create discharge event with receipt number\n      tx.insert(schema.admissionEvents).values({\n        admissionId: admissionId,\n        eventType: \"discharge\",\n        eventTime: dischargeDate,\n        notes: `Patient discharged`,\n        createdBy: userId,\n        receiptNumber: receiptNumber,\n      }).run();\n\n      // Decrement occupied beds\n      if (currentAdmission.currentWardType) {\n        const roomType = tx.select().from(schema.roomTypes)\n          .where(eq(schema.roomTypes.name, currentAdmission.currentWardType))\n          .get();\n\n        if (roomType && roomType.occupiedBeds > 0) {\n          tx.update(schema.roomTypes)\n            .set({\n              occupiedBeds: roomType.occupiedBeds - 1,\n              updatedAt: new Date().toISOString()\n            })\n            .where(eq(schema.roomTypes.id, roomType.id))\n            .run();\n        }\n      }\n\n      return updated;\n    });\n  }\n\n  async getHospitalSettings(): Promise<any> {\n    try {\n      // Try to get existing settings\n      let settings = db.select().from(schema.hospitalSettings).where(eq(schema.hospitalSettings.id, 'default')).get();\n\n      // If no settings exist, create default ones\n      if (!settings) {\n        settings = db.insert(schema.hospitalSettings).values({\n          id: 'default',\n          name: 'MedCare Pro Hospital',\n          address: '123 Healthcare Street, Medical District, City - 123456',\n          phone: '+91 98765 43210',\n          email: 'info@medcarepro.com',\n          registrationNumber: null,\n          logoPath: null,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }).returning().get();\n      }\n\n      return settings;\n    } catch (error) {\n      console.error('Error getting hospital settings:', error);\n      // Return defaults if database operation fails\n      return {\n        id: 'default',\n        name: 'MedCare Pro Hospital',\n        address: '123 Healthcare Street, Medical District, City - 123456',\n        phone: '+91 98765 43210',\n        email: 'info@medcarepro.com',\n        registrationNumber: null,\n        logoPath: null,\n      };\n    }\n  }\n\n  async saveHospitalSettings(settings: any): Promise<any> {\n    try {\n      // Use Drizzle ORM to update hospital settings\n      const updated = db.insert(schema.hospitalSettings).values({\n        id: 'default',\n        name: settings.name,\n        address: settings.address,\n        phone: settings.phone,\n        email: settings.email,\n        registrationNumber: settings.registrationNumber || null,\n        logoPath: settings.logoPath || null,\n        updatedAt: new Date().toISOString()\n      }).onConflictDoUpdate({\n        target: schema.hospitalSettings.id,\n        set: {\n          name: settings.name,\n          address: settings.address,\n          phone: settings.phone,\n          email: settings.email,\n          registrationNumber: settings.registrationNumber || null,\n          logoPath: settings.logoPath || null,\n          updatedAt: new Date().toISOString()\n        }\n      }).returning().get();\n\n      return updated;\n    } catch (error) {\n      console.error('Error saving hospital settings:', error);\n      throw error;\n    }\n  }\n\n  async saveLogo(logoData: string): Promise<string> {\n    try {\n      // Extract base64 data and file type\n      const matches = logoData.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\n      if (!matches) {\n        throw new Error('Invalid image data format');\n      }\n\n      const mimeType = matches[1];\n      const base64Data = matches[2];\n      const extension = mimeType.split('/')[1];\n\n      // Create filename and path\n      const filename = `hospital-logo-${Date.now()}.${extension}`;\n      const logoPath = `/uploads/${filename}`;\n\n      // For simplicity, we'll store the base64 data directly in the database\n      // In a production system, you'd save to filesystem or cloud storage\n      return logoData; // Return the original data URL for now\n    } catch (error) {\n      console.error('Error saving logo:', error);\n      throw error;\n    }\n  }\n\n  // Synchronous version for use within transactions\n  private getDailyReceiptCountSync(serviceType: string, date: string): number {\n    try {\n      let count = 0;\n\n      switch (serviceType.toLowerCase()) {\n        case 'opd':\n          count = db.select().from(schema.patientServices)\n            .where(and(\n              eq(schema.patientServices.scheduledDate, date),\n              eq(schema.patientServices.serviceType, 'opd')\n            ))\n            .all().length;\n          break;\n\n        case 'service':\n        case 'ser':\n          count = db.select().from(schema.patientServices)\n            .where(and(\n              eq(schema.patientServices.scheduledDate, date),\n              ne(schema.patientServices.serviceType, 'opd')\n            ))\n            .all().length;\n          break;\n\n        case 'pathology':\n        case 'pat':\n          count = db.select().from(schema.pathologyOrders)\n            .where(eq(schema.pathologyOrders.orderedDate, date))\n            .all().length;\n          break;\n\n        case 'admission':\n        case 'adm':\n          count = db.select().from(schema.admissionEvents)\n            .where(and(\n              like(schema.admissionEvents.eventTime, `${date}%`),\n              eq(schema.admissionEvents.eventType, 'admit')\n            ))\n            .all().length;\n          break;\n\n        case 'discharge':\n        case 'dis':\n          count = db.select().from(schema.admissionEvents)\n            .where(and(\n              like(schema.admissionEvents.eventTime, `${date}%`),\n              eq(schema.admissionEvents.eventType, 'discharge')\n            ))\n            .all().length;\n          break;\n\n        case 'room_transfer':\n        case 'rts':\n          count = db.select().from(schema.admissionEvents)\n            .where(and(\n              like(schema.admissionEvents.eventTime, `${date}%`),\n              eq(schema.admissionEvents.eventType, 'room_change')\n            ))\n            .all().length;\n          break;\n\n        case 'payment':\n        case 'pay':\n          count = db.select().from(schema.admissions)\n            .where(like(schema.admissions.lastPaymentDate, `${date}%`))\n            .all().length;\n          break;\n\n        default:\n          count = 0;\n      }\n\n      return count + 1;\n    } catch (error) {\n      console.error('Error getting daily receipt count sync:', error);\n      return 1;\n    }\n  }\n\n  async getDailyReceiptCount(serviceType: string, date: string): Promise<number> {\n    return this.getDailyReceiptCountSync(serviceType, date);\n  }\n\n  // Inpatient Management Detail Methods (IST-based calculations)\n  async getBedOccupancyDetails(): Promise<any> {\n    try {\n      // Get all room types with their rooms\n      const roomTypes = await this.getAllRoomTypes();\n      \n      const bedOccupancy = await Promise.all(roomTypes.map(async (roomType) => {\n        // Get all rooms for this room type\n        const rooms = await this.getRoomsByType(roomType.id);\n        \n        let actualOccupiedBeds = 0;\n        \n        // For each room, check for actual current admissions\n        const roomsWithOccupancy = await Promise.all(rooms.map(async (room) => {\n          let occupyingPatient = null;\n          let isActuallyOccupied = false;\n          \n          // Check if there's a current admission for this room by room number and ward type\n          const admission = db.select()\n            .from(schema.admissions)\n            .where(\n              and(\n                eq(schema.admissions.currentRoomNumber, room.roomNumber),\n                eq(schema.admissions.currentWardType, roomType.name),\n                eq(schema.admissions.status, 'admitted')\n              )\n            )\n            .get();\n\n          if (admission) {\n            isActuallyOccupied = true;\n            actualOccupiedBeds++;\n            \n            // Get patient details\n            const patient = db.select()\n              .from(schema.patients)\n              .where(eq(schema.patients.id, admission.patientId))\n              .get();\n              \n            if (patient) {\n              occupyingPatient = {\n                name: patient.name,\n                patientId: patient.patientId\n              };\n            }\n          }\n          \n          return {\n            ...room,\n            isOccupied: isActuallyOccupied,\n            occupyingPatient\n          };\n        }));\n\n        // Return the room type with corrected occupied bed count\n        return {\n          ...roomType,\n          occupiedBeds: actualOccupiedBeds, // Use actual count instead of stored value\n          rooms: roomsWithOccupancy\n        };\n      }));\n\n      return bedOccupancy;\n    } catch (error) {\n      console.error('Error fetching bed occupancy details:', error);\n      throw error;\n    }\n  }\n\n  async getCurrentlyAdmittedPatients(): Promise<any[]> {\n    try {\n      // Get all currently admitted patients with their details\n      const admissions = db.select()\n        .from(schema.admissions)\n        .where(eq(schema.admissions.status, 'admitted'))\n        .orderBy(desc(schema.admissions.admissionDate))\n        .all();\n\n      const patientsWithDetails = await Promise.all(admissions.map(async (admission) => {\n        // Get patient details\n        const patient = db.select()\n          .from(schema.patients)\n          .where(eq(schema.patients.id, admission.patientId))\n          .get();\n\n        // Get doctor details\n        const doctor = admission.doctorId ? db.select()\n          .from(schema.doctors)\n          .where(eq(schema.doctors.id, admission.doctorId))\n          .get() : null;\n\n        return {\n          ...admission,\n          patient,\n          doctor\n        };\n      }));\n\n      return patientsWithDetails;\n    } catch (error) {\n      console.error('Error fetching currently admitted patients:', error);\n      throw error;\n    }\n  }\n\n  async getTodayAdmissions(): Promise<any[]> {\n    try {\n      // Use Indian timezone (UTC+5:30) for consistent date calculation\n      const now = new Date();\n      const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n      const today = indianTime.getFullYear() + '-' +\n        String(indianTime.getMonth() + 1).padStart(2, '0') + '-' +\n        String(indianTime.getDate()).padStart(2, '0');\n\n      // Get admissions for today\n      const admissions = db.select()\n        .from(schema.admissions)\n        .where(eq(schema.admissions.admissionDate, today))\n        .orderBy(desc(schema.admissions.createdAt))\n        .all();\n\n      const admissionsWithDetails = await Promise.all(admissions.map(async (admission) => {\n        // Get patient details\n        const patient = db.select()\n          .from(schema.patients)\n          .where(eq(schema.patients.id, admission.patientId))\n          .get();\n\n        // Get doctor details\n        const doctor = admission.doctorId ? db.select()\n          .from(schema.doctors)\n          .where(eq(schema.doctors.id, admission.doctorId))\n          .get() : null;\n\n        return {\n          ...admission,\n          patient,\n          doctor\n        };\n      }));\n\n      return admissionsWithDetails;\n    } catch (error) {\n      console.error('Error fetching today\\'s admissions:', error);\n      throw error;\n    }\n  }\n\n  async getTodayDischarges(): Promise<any[]> {\n    try {\n      // Use Indian timezone (UTC+5:30) for consistent date calculation\n      const now = new Date();\n      const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n      const today = indianTime.getFullYear() + '-' +\n        String(indianTime.getMonth() + 1).padStart(2, '0') + '-' +\n        String(indianTime.getDate()).padStart(2, '0');\n\n      // Get discharges for today\n      const admissions = db.select()\n        .from(schema.admissions)\n        .where(\n          and(\n            eq(schema.admissions.dischargeDate, today),\n            eq(schema.admissions.status, 'discharged')\n          )\n        )\n        .orderBy(desc(schema.admissions.updatedAt))\n        .all();\n\n      const dischargesWithDetails = await Promise.all(admissions.map(async (admission) => {\n        // Get patient details\n        const patient = db.select()\n          .from(schema.patients)\n          .where(eq(schema.patients.id, admission.patientId))\n          .get();\n\n        // Get doctor details\n        const doctor = admission.doctorId ? db.select()\n          .from(schema.doctors)\n          .where(eq(schema.doctors.id, admission.doctorId))\n          .get() : null;\n\n        return {\n          ...admission,\n          patient,\n          doctor\n        };\n      }));\n\n      return dischargesWithDetails;\n    } catch (error) {\n      console.error('Error fetching today\\'s discharges:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new SqliteStorage();","size_bytes":62277},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { sqliteTable, text, integer, real, check } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication and role management\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  role: text(\"role\").notNull(), // admin, doctor, receptionist, billing_staff\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Doctors table\nexport const doctors = sqliteTable(\"doctors\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  userId: text(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  specialization: text(\"specialization\").notNull(),\n  qualification: text(\"qualification\").notNull(),\n  consultationFee: real(\"consultation_fee\").notNull(),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patients table\nexport const patients = sqliteTable(\"patients\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  patientId: text(\"patient_id\").notNull().unique(), // PAT-2024-001 format\n  name: text(\"name\").notNull(),\n  age: integer(\"age\").notNull(),\n  gender: text(\"gender\").notNull(), // male, female, other\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\"),\n  email: text(\"email\"),\n  emergencyContact: text(\"emergency_contact\"),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient visits for OPD and Inpatient tracking\nexport const patientVisits = sqliteTable(\"patient_visits\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  visitId: text(\"visit_id\").notNull().unique(), // VIS-2024-001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  doctorId: text(\"doctor_id\").notNull().references(() => doctors.id),\n  visitType: text(\"visit_type\").notNull(), // opd, inpatient\n  visitDate: text(\"visit_date\").notNull(),\n  symptoms: text(\"symptoms\"),\n  diagnosis: text(\"diagnosis\"),\n  prescription: text(\"prescription\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, completed, cancelled\n  admissionDate: text(\"admission_date\"), // for inpatients\n  dischargeDate: text(\"discharge_date\"), // for inpatients\n  roomNumber: text(\"room_number\"), // for inpatients\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Services/procedures that can be billed\nexport const services = sqliteTable(\"services\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(), // consultation, pathology, radiology, procedure\n  price: real(\"price\").notNull(),\n  description: text(\"description\"),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Bills/Invoices\nexport const bills = sqliteTable(\"bills\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  billNumber: text(\"bill_number\").notNull().unique(), // BILL-2024-0001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  visitId: text(\"visit_id\").references(() => patientVisits.id),\n  subtotal: real(\"subtotal\").notNull(),\n  taxAmount: real(\"tax_amount\").notNull(),\n  discountAmount: real(\"discount_amount\").notNull().default(0),\n  totalAmount: real(\"total_amount\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull(), // cash, card, upi, insurance\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, partial\n  paidAmount: real(\"paid_amount\").notNull().default(0),\n  createdBy: text(\"created_by\").notNull().references(() => users.id),\n  billDate: text(\"bill_date\").notNull(),\n  dueDate: text(\"due_date\"),\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Bill items/line items\nexport const billItems = sqliteTable(\"bill_items\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  billId: text(\"bill_id\").notNull().references(() => bills.id),\n  serviceId: text(\"service_id\").notNull().references(() => services.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  unitPrice: real(\"unit_price\").notNull(),\n  totalPrice: real(\"total_price\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Pathology orders (one order can have multiple tests)\nexport const pathologyOrders = sqliteTable(\"pathology_orders\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  orderId: text(\"order_id\").notNull().unique(), // LAB-2024-001 format\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  visitId: text(\"visit_id\").references(() => patientVisits.id),\n  doctorId: text(\"doctor_id\").references(() => doctors.id), // Optional for external patients\n  status: text(\"status\").notNull().default(\"ordered\"), // ordered, collected, processing, completed\n  orderedDate: text(\"ordered_date\").notNull(),\n  collectedDate: text(\"collected_date\"),\n  reportDate: text(\"report_date\"),\n  remarks: text(\"remarks\"),\n  totalPrice: real(\"total_price\").notNull().default(0),\n  receiptNumber: text(\"receipt_number\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Individual pathology tests within an order\nexport const pathologyTests = sqliteTable(\"pathology_tests\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  orderId: text(\"order_id\").notNull().references(() => pathologyOrders.id),\n  testName: text(\"test_name\").notNull(),\n  testCategory: text(\"test_category\").notNull(),\n  status: text(\"status\").notNull().default(\"ordered\"), // ordered, collected, processing, completed\n  results: text(\"results\"),\n  normalRange: text(\"normal_range\"),\n  price: real(\"price\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient Services (OPD, Lab tests, X-ray, ECG, etc.)\nexport const patientServices = sqliteTable(\"patient_services\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  serviceId: text(\"service_id\").notNull(),\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  visitId: text(\"visit_id\").references(() => patientVisits.id),\n  doctorId: text(\"doctor_id\").references(() => doctors.id),\n  serviceType: text(\"service_type\").notNull(), // opd, labtest, xray, ecg, consultation, emergency\n  serviceName: text(\"service_name\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, in-progress, completed, cancelled\n  scheduledDate: text(\"scheduled_date\").notNull(),\n  scheduledTime: text(\"scheduled_time\").notNull().default(\"09:00\"),\n  completedDate: text(\"completed_date\"),\n  notes: text(\"notes\"),\n  price: real(\"price\").notNull().default(0),\n  receiptNumber: text(\"receipt_number\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Patient Admissions - One record per admission episode\nexport const admissions = sqliteTable(\"admissions\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  admissionId: text(\"admission_id\").notNull().unique(),\n  patientId: text(\"patient_id\").notNull().references(() => patients.id),\n  doctorId: text(\"doctor_id\").references(() => doctors.id),\n  currentRoomId: text(\"current_room_id\"),\n  currentWardType: text(\"current_ward_type\"),\n  currentRoomNumber: text(\"current_room_number\"),\n  admissionDate: text(\"admission_date\").notNull(),\n  dischargeDate: text(\"discharge_date\"),\n  status: text(\"status\").notNull().default(\"admitted\"), // admitted, discharged\n  reason: text(\"reason\"),\n  diagnosis: text(\"diagnosis\"),\n  notes: text(\"notes\"),\n  dailyCost: real(\"daily_cost\").notNull().default(0),\n  totalCost: real(\"total_cost\").notNull().default(0),\n  initialDeposit: real(\"initial_deposit\").notNull().default(0),\n  additionalPayments: real(\"additional_payments\").notNull().default(0),\n  totalDiscount: real(\"total_discount\").notNull().default(0),\n  lastPaymentDate: text(\"last_payment_date\"),\n  lastPaymentAmount: real(\"last_payment_amount\").default(0),\n  lastDiscountDate: text(\"last_discount_date\"),\n  lastDiscountAmount: real(\"last_discount_amount\").default(0),\n  lastDiscountReason: text(\"last_discount_reason\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Admission Events - History log for each admission episode\nexport const admissionEvents = sqliteTable(\"admission_events\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  admissionId: text(\"admission_id\").notNull().references(() => admissions.id),\n  eventType: text(\"event_type\").notNull(), // 'admit', 'room_change', 'discharge'\n  eventTime: text(\"event_time\").notNull().default(sql`(datetime('now'))`),\n  roomId: text(\"room_id\"),\n  roomNumber: text(\"room_number\"),\n  wardType: text(\"ward_type\"),\n  notes: text(\"notes\"),\n  receiptNumber: text(\"receipt_number\"),\n  createdBy: text(\"created_by\").references(() => users.id),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Hospital settings for system configuration\nexport const hospitalSettings = sqliteTable(\"hospital_settings\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull().default(\"MedCare Pro Hospital\"),\n  address: text(\"address\").notNull().default(\"123 Healthcare Street, Medical District, City - 123456\"),\n  phone: text(\"phone\").notNull().default(\"+91 98765 43210\"),\n  email: text(\"email\").notNull().default(\"info@medcarepro.com\"),\n  registrationNumber: text(\"registration_number\"),\n  logoPath: text(\"logo_path\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Audit log for tracking all user actions\nexport const auditLog = sqliteTable(\"audit_log\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  userId: text(\"user_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(), // create, update, delete, view\n  tableName: text(\"table_name\").notNull(),\n  recordId: text(\"record_id\").notNull(),\n  oldValues: text(\"old_values\"), // JSON string of old values\n  newValues: text(\"new_values\"), // JSON string of new values\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Room/Service Management\nexport const roomTypes = sqliteTable(\"room_types\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  name: text(\"name\").notNull().unique(), // \"General Ward\", \"Private Room\", \"ICU\", \"Emergency\"\n  category: text(\"category\").notNull(), // \"ward\", \"icu\", \"emergency\", \"ot\", \"room\"\n  dailyCost: real(\"daily_cost\").notNull().default(0),\n  totalBeds: integer(\"total_beds\").notNull().default(0),\n  occupiedBeds: integer(\"occupied_beds\").notNull().default(0),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\nexport const rooms = sqliteTable(\"rooms\", {\n  id: text(\"id\").primaryKey().default(sql`(lower(hex(randomblob(16))))`),\n  roomNumber: text(\"room_number\").notNull().unique(),\n  roomTypeId: text(\"room_type_id\").notNull().references(() => roomTypes.id),\n  floor: text(\"floor\"),\n  building: text(\"building\"),\n  capacity: integer(\"capacity\").notNull().default(1),\n  isOccupied: integer(\"is_occupied\", { mode: \"boolean\" }).notNull().default(false),\n  isActive: integer(\"is_active\", { mode: \"boolean\" }).notNull().default(true),\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDoctorSchema = createInsertSchema(doctors).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  patientId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  name: z.string().min(1, \"Name is required\"),\n  age: z.number().min(1, \"Age must be greater than 0\").max(150, \"Invalid age\"),\n  gender: z.string().min(1, \"Gender is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n});\n\nexport const insertPatientVisitSchema = createInsertSchema(patientVisits).omit({\n  id: true,\n  visitId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBillSchema = createInsertSchema(bills).omit({\n  id: true,\n  billNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBillItemSchema = createInsertSchema(billItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPathologyOrderSchema = createInsertSchema(pathologyOrders).omit({\n  id: true,\n  orderId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientServiceSchema = createInsertSchema(patientServices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  patientId: z.string().min(1, \"Patient ID is required\"),\n  serviceType: z.string().min(1, \"Service type is required\"),\n  serviceName: z.string().min(1, \"Service name is required\"),\n  scheduledDate: z.string().min(1, \"Scheduled date is required\"),\n  scheduledTime: z.string().min(1, \"Scheduled time is required\"),\n  receiptNumber: z.string().optional(),\n});\n\nexport const insertAdmissionSchema = createInsertSchema(admissions).omit({\n  id: true,\n  admissionId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  patientId: z.string().min(1, \"Patient is required\"),\n  doctorId: z.string().min(1, \"Doctor is required\"),\n  currentWardType: z.string().min(1, \"Ward type is required\"),\n  admissionDate: z.string().min(1, \"Admission date is required\"),\n  reason: z.string().optional(),\n  dailyCost: z.number().min(0, \"Daily cost must be non-negative\"),\n  initialDeposit: z.number().min(0, \"Initial deposit must be non-negative\").optional(),\n});\n\nexport const insertAdmissionEventSchema = createInsertSchema(admissionEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPathologyTestSchema = createInsertSchema(pathologyTests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRoomTypeSchema = createInsertSchema(roomTypes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Insert schema for hospital settings\nexport const insertHospitalSettingsSchema = createInsertSchema(hospitalSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type InsertDoctor = z.infer<typeof insertDoctorSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type PatientVisit = typeof patientVisits.$inferSelect;\nexport type InsertPatientVisit = z.infer<typeof insertPatientVisitSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Bill = typeof bills.$inferSelect;\nexport type InsertBill = z.infer<typeof insertBillSchema>;\nexport type BillItem = typeof billItems.$inferSelect;\nexport type InsertBillItem = z.infer<typeof insertBillItemSchema>;\nexport type PathologyOrder = typeof pathologyOrders.$inferSelect;\nexport type InsertPathologyOrder = z.infer<typeof insertPathologyOrderSchema>;\nexport type PathologyTest = typeof pathologyTests.$inferSelect;\nexport type InsertPathologyTest = z.infer<typeof insertPathologyTestSchema>;\nexport type PatientService = typeof patientServices.$inferSelect;\nexport type InsertPatientService = z.infer<typeof insertPatientServiceSchema>;\nexport type Admission = typeof admissions.$inferSelect;\nexport type InsertAdmission = z.infer<typeof insertAdmissionSchema>;\nexport type AdmissionEvent = typeof admissionEvents.$inferSelect;\nexport type InsertAdmissionEvent = z.infer<typeof insertAdmissionEventSchema>;\nexport type RoomType = typeof roomTypes.$inferSelect;\nexport type InsertRoomType = z.infer<typeof insertRoomTypeSchema>;\nexport type Room = typeof rooms.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type HospitalSettings = typeof hospitalSettings.$inferSelect;\nexport type InsertHospitalSettings = z.infer<typeof insertHospitalSettingsSchema>;\n\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n\n\n\n// Update schema for PATCH (partial updates allowed)\nexport const updatePatientSchema = insertPatientSchema.partial();\nexport type UpdatePatient = z.infer<typeof updatePatientSchema>;","size_bytes":18641},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Billing from \"@/pages/billing\";\nimport Patients from \"@/pages/patients\";\nimport PatientDetail from \"@/pages/patient-detail\";\nimport Pathology from \"@/pages/pathology\";\nimport Doctors from \"@/pages/doctors\";\nimport ServiceManagement from \"@/pages/services\";\nimport OpdList from \"@/pages/opd-list\";\nimport LabTests from \"@/pages/lab-tests\";\nimport Admissions from \"@/pages/admissions\";\nimport BedOccupancy from \"@/pages/bed-occupancy\";\nimport CurrentlyAdmitted from \"@/pages/currently-admitted\";\nimport AdmittedToday from \"@/pages/admitted-today\";\nimport DischargedToday from \"@/pages/discharged-today\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useEffect } from \"react\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-muted/30\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n          <p className=\"text-sm text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Login />;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-muted/30\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <Component />\n      </main>\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/billing\" component={() => <ProtectedRoute component={Billing} />} />\n      <Route path=\"/patients\" component={() => <ProtectedRoute component={Patients} />} />\n      <Route path=\"/patients/:id\" component={() => <ProtectedRoute component={PatientDetail} />} />\n      <Route path=\"/pathology\" component={() => <ProtectedRoute component={Pathology} />} />\n      <Route path=\"/doctors\" component={() => <ProtectedRoute component={Doctors} />} />\n      <Route path=\"/services\" component={() => <ProtectedRoute component={ServiceManagement} />} />\n      <Route path=\"/admissions\" component={() => <ProtectedRoute component={Admissions} />} />\n      <Route path=\"/bed-occupancy\" component={() => <ProtectedRoute component={BedOccupancy} />} />\n      <Route path=\"/currently-admitted\" component={() => <ProtectedRoute component={CurrentlyAdmitted} />} />\n      <Route path=\"/admitted-today\" component={() => <ProtectedRoute component={AdmittedToday} />} />\n      <Route path=\"/discharged-today\" component={() => <ProtectedRoute component={DischargedToday} />} />\n      <Route path=\"/opd-list\" component={() => <ProtectedRoute component={OpdList} />} />\n      <Route path=\"/lab-tests\" component={() => <ProtectedRoute component={LabTests} />} />\n      <Route path=\"/settings\" component={() => <ProtectedRoute component={Settings} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Set up authorization header for all requests\n  useEffect(() => {\n    const token = localStorage.getItem(\"hospital_token\");\n    if (token) {\n      // This will be handled by queryClient interceptor\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4012},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(212 25% 16%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(212 25% 16%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(212 25% 16%);\n  --primary: hsl(208 88% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 8% 95%);\n  --secondary-foreground: hsl(212 25% 16%);\n  --muted: hsl(0 0% 97%);\n  --muted-foreground: hsl(210 8% 46%);\n  --accent: hsl(210 8% 95%);\n  --accent-foreground: hsl(208 88% 42%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 20% 90%);\n  --input: hsl(210 20% 95%);\n  --ring: hsl(208 88% 42%);\n  --chart-1: hsl(208 88% 42%);\n  --chart-2: hsl(155 100% 26%);\n  --chart-3: hsl(30 95% 54%);\n  --chart-4: hsl(147 62% 34%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(212 25% 16%);\n  --sidebar-primary: hsl(208 88% 42%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 8% 95%);\n  --sidebar-accent-foreground: hsl(208 88% 42%);\n  --sidebar-border: hsl(210 20% 90%);\n  --sidebar-ring: hsl(208 88% 42%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  \n  /* Hospital-specific colors */\n  --medical-blue: hsl(208 88% 42%);\n  --healthcare-green: hsl(155 62% 34%);\n  --alert-orange: hsl(14 95% 60%);\n  --light-gray: hsl(210 20% 98%);\n  --surface: hsl(0 0% 100%);\n  --text-dark: hsl(212 25% 16%);\n  --text-muted: hsl(210 8% 46%);\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(208 88% 52%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217 33% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 33% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 33% 17%);\n  --accent-foreground: hsl(208 88% 52%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(0 85% 97%);\n  --border: hsl(217 33% 17%);\n  --input: hsl(217 33% 17%);\n  --ring: hsl(208 88% 52%);\n  --chart-1: hsl(208 88% 52%);\n  --chart-2: hsl(155 100% 36%);\n  --chart-3: hsl(30 95% 64%);\n  --chart-4: hsl(147 62% 44%);\n  --chart-5: hsl(341 75% 61%);\n  --sidebar: hsl(222 84% 5%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(208 88% 52%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 33% 17%);\n  --sidebar-accent-foreground: hsl(208 88% 52%);\n  --sidebar-border: hsl(217 33% 17%);\n  --sidebar-ring: hsl(208 88% 52%);\n  \n  /* Hospital-specific dark colors */\n  --medical-blue: hsl(208 88% 52%);\n  --healthcare-green: hsl(155 62% 44%);\n  --alert-orange: hsl(14 95% 70%);\n  --light-gray: hsl(217 33% 12%);\n  --surface: hsl(222 84% 5%);\n  --text-dark: hsl(210 40% 98%);\n  --text-muted: hsl(215 20% 65%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .medical-blue {\n    color: var(--medical-blue);\n  }\n  \n  .bg-medical-blue {\n    background-color: var(--medical-blue);\n  }\n  \n  .healthcare-green {\n    color: var(--healthcare-green);\n  }\n  \n  .bg-healthcare-green {\n    background-color: var(--healthcare-green);\n  }\n  \n  .alert-orange {\n    color: var(--alert-orange);\n  }\n  \n  .bg-alert-orange {\n    background-color: var(--alert-orange);\n  }\n  \n  .text-medical-blue {\n    color: var(--medical-blue);\n  }\n  \n  .text-healthcare-green {\n    color: var(--healthcare-green);\n  }\n  \n  .text-alert-orange {\n    color: var(--alert-orange);\n  }\n}\n","size_bytes":3895},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/receipt-template.tsx":{"content":"\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Printer } from 'lucide-react';\n\ninterface ReceiptTemplateProps {\n  receiptData: {\n    type: 'service' | 'pathology' | 'admission' | 'payment' | 'discount';\n    id: string;\n    title: string;\n    date: string;\n    amount?: number;\n    description: string;\n    patientName: string;\n    patientId: string;\n    details?: Record<string, any>;\n  };\n  hospitalInfo: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    registrationNumber?: string;\n    logo?: string;\n  };\n  onPrint: () => void;\n}\n\nexport function ReceiptTemplate({ receiptData, hospitalInfo, onPrint }: ReceiptTemplateProps) {\n  const getReceiptTitle = (type: string, details?: Record<string, any>) => {\n    switch (type) {\n      case 'pathology':\n        return 'Pathology Receipt';\n      case 'service':\n        // Get the service category from details\n        const category = details?.category;\n        if (category) {\n          switch (category) {\n            case 'diagnostics':\n              return 'Diagnostic Service Receipt';\n            case 'procedures':\n              return 'Medical Procedure Receipt';\n            case 'operations':\n              return 'Surgical Operation Receipt';\n            case 'misc':\n              return 'Miscellaneous Service Receipt';\n            default:\n              return 'Service Receipt';\n          }\n        }\n        return 'Service Receipt';\n      case 'admission':\n        return 'Admission Receipt';\n      case 'payment':\n        return 'Payment Receipt';\n      case 'discount':\n        return 'Discount Receipt';\n      default:\n        return 'Receipt';\n    }\n  };\n\n  const getPatientAge = () => {\n    // Try to extract age from patient details if available\n    return receiptData.details?.patientAge || 'N/A';\n  };\n\n  const getPatientGender = () => {\n    // Try to extract gender from patient details if available\n    return receiptData.details?.patientGender || 'N/A';\n  };\n\n  const getDoctorName = () => {\n    // Try to extract doctor name from details if available\n    if (receiptData.details?.doctorName) {\n      const doctorName = receiptData.details.doctorName;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n    \n    // For pathology receipts, try to get doctor from the details\n    if (receiptData.type === 'pathology' && receiptData.details?.doctor) {\n      const doctorName = receiptData.details.doctor.name;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n    \n    // For service receipts, try to get doctor from the details\n    if (receiptData.type === 'service' && receiptData.details?.doctor) {\n      const doctorName = receiptData.details.doctor.name;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n    \n    // For admission receipts, try to get doctor from the details\n    if (receiptData.type === 'admission' && receiptData.details?.doctor) {\n      const doctorName = receiptData.details.doctor.name;\n      return doctorName.startsWith('Dr.') ? doctorName : `Dr. ${doctorName}`;\n    }\n    \n    // If no doctor information is available\n    return 'No Doctor Assigned';\n  };\n\n  const getReceiptNumber = () => {\n    // Always use the stored receipt number\n    return receiptData.details?.receiptNumber || 'RECEIPT-NOT-GENERATED';\n  };\n\n  const handlePrint = async () => {\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const receiptNumber = getReceiptNumber();\n\n    const receiptHtml = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Receipt - ${getReceiptTitle(receiptData.type, receiptData.details)}</title>\n          <style>\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            \n            body {\n              font-family: Arial, sans-serif;\n              line-height: 1.4;\n              color: #333;\n              background: white;\n              font-size: 14px;\n            }\n            \n            .receipt {\n              max-width: 800px;\n              margin: 0 auto;\n              padding: 20px;\n              display: flex;\n              flex-direction: column;\n            }\n            \n            /* Header - Logo and Hospital Name only */\n            .header {\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              margin-bottom: 20px;\n              padding-bottom: 15px;\n              border-bottom: 2px solid #333;\n            }\n            \n            .hospital-info {\n              display: flex;\n              align-items: center;\n              gap: 15px;\n            }\n            \n            .hospital-logo {\n              width: 60px;\n              height: 60px;\n              object-fit: contain;\n            }\n            \n            .hospital-name {\n              font-size: 24px;\n              font-weight: bold;\n              color: #333;\n            }\n            \n            /* Receipt Title */\n            .receipt-title {\n              text-align: center;\n              font-size: 18px;\n              font-weight: bold;\n              margin: 10px 0 5px 0;\n              text-transform: uppercase;\n              letter-spacing: 1px;\n            }\n            \n            /* Patient Information Box */\n            .patient-info-box {\n              border: 2px solid #333;\n              padding: 15px;\n              margin: 8px 0 5px 0;\n              background: #f9f9f9;\n            }\n            \n            .patient-line-1 {\n              display: flex;\n              margin-bottom: 8px;\n              font-weight: bold;\n              gap: 20px;\n              align-items: center;\n            }\n            \n            .patient-line-1 .name-section {\n              flex: 2;\n              min-width: 0;\n            }\n            \n            .patient-line-1 .age-section {\n              flex: 0 0 auto;\n              min-width: 80px;\n            }\n            \n            .patient-line-1 .sex-section {\n              flex: 0 0 auto;\n              min-width: 80px;\n            }\n            \n            .patient-line-1 .date-section {\n              flex: 0 0 auto;\n              min-width: 120px;\n              text-align: right;\n            }\n            \n            .patient-line-2 {\n              display: flex;\n              justify-content: space-between;\n              font-weight: bold;\n            }\n            \n            /* Bill Details */\n            .bill-section {\n              margin: 2px 0 5px 0;\n              flex-grow: 1;\n            }\n            \n            .bill-table {\n              width: 100%;\n              border-collapse: collapse;\n              margin: 5px 0;\n            }\n            \n            .bill-table th,\n            .bill-table td {\n              border: 1px solid #333;\n              padding: 8px;\n              text-align: left;\n            }\n            \n            .bill-table th {\n              background: #f0f0f0;\n              font-weight: bold;\n            }\n            \n            .amount-cell {\n              text-align: right !important;\n            }\n            \n            .total-row {\n              font-weight: bold;\n              background: #f0f0f0;\n            }\n            \n            .description-section {\n              margin: 5px 0;\n              padding: 8px;\n              background: #f9f9f9;\n              border: 1px solid #ddd;\n            }\n            \n            .description-title {\n              font-weight: bold;\n              margin-bottom: 5px;\n            }\n            \n            /* Signature Section */\n            .signature-section {\n              margin: 35px 0;\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n            }\n            \n            .signature-box {\n              text-align: center;\n              min-width: 200px;\n            }\n            \n            .signature-line {\n              border-bottom: 1px solid #333;\n              margin-bottom: 5px;\n              height: 40px;\n            }\n            \n            /* Footer */\n            .footer {\n              margin-top: 8px;\n              padding-top: 8px;\n              border-top: 2px solid #333;\n              text-align: center;\n              font-size: 12px;\n              line-height: 1.5;\n            }\n            \n            .footer-line {\n              margin-bottom: 3px;\n            }\n            \n            .receipt-id {\n              margin-top: 15px;\n              font-family: monospace;\n              font-size: 10px;\n              color: #666;\n            }\n            \n            @page {\n              margin: 0;\n              size: A4;\n            }\n            \n            @media print {\n              * {\n                -webkit-print-color-adjust: exact !important;\n                color-adjust: exact !important;\n              }\n              \n              html, body {\n                margin: 0 !important;\n                padding: 0 !important;\n                height: auto !important;\n                background: white !important;\n              }\n              \n              body {\n                padding: 10px !important;\n              }\n              \n              .receipt {\n                margin: 0 !important;\n                padding: 10px !important;\n                page-break-inside: avoid;\n              }\n              \n              .header {\n                margin-top: 0 !important;\n                padding-top: 0 !important;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"receipt\">\n            <!-- Header - Logo and Hospital Name Only -->\n            <div class=\"header\">\n              <div class=\"hospital-info\">\n                ${hospitalInfo.logo ? `\n                  <img src=\"${hospitalInfo.logo}\" alt=\"Hospital Logo\" class=\"hospital-logo\">\n                ` : ''}\n                <div class=\"hospital-name\">${hospitalInfo.name}</div>\n              </div>\n            </div>\n            \n            <!-- Receipt Title -->\n            <div class=\"receipt-title\">\n              ${getReceiptTitle(receiptData.type, receiptData.details)}\n            </div>\n            \n            <!-- Patient Information Box -->\n            <div class=\"patient-info-box\">\n              <div class=\"patient-line-1\">\n                <span class=\"name-section\">Name: ${receiptData.patientName} (${receiptData.patientId})</span>\n                <span class=\"age-section\">Age: ${getPatientAge()} yrs</span>\n                <span class=\"sex-section\">Sex: ${getPatientGender()}</span>\n                <span class=\"date-section\">Date: ${(() => {\n                  const date = new Date(receiptData.date);\n                  return date.toLocaleDateString('en-US', {\n                    year: 'numeric',\n                    month: 'short',\n                    day: 'numeric',\n                    timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n                  });\n                })()}</span>\n              </div>\n              <div class=\"patient-line-2\">\n                <span>Doctor: ${getDoctorName()}</span>\n                <span>Receipt No: ${receiptNumber}</span>\n              </div>\n            </div>\n            \n            <!-- Bill Section -->\n            <div class=\"bill-section\">\n              <table class=\"bill-table\">\n                <thead>\n                  <tr>\n                    <th style=\"width: 80%;\">Description</th>\n                    <th style=\"width: 20%; text-align: right !important;\">Amount (₹)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>${receiptData.title}</td>\n                    <td class=\"amount-cell\" style=\"text-align: right !important;\">${receiptData.amount ? receiptData.amount.toLocaleString() : '0'}</td>\n                  </tr>\n                  <tr class=\"total-row\">\n                    <td style=\"text-align: right; font-weight: bold;\">Total Amount:</td>\n                    <td class=\"amount-cell\" style=\"font-weight: bold; text-align: right !important;\">₹${receiptData.amount ? receiptData.amount.toLocaleString() : '0'}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            \n            <!-- Signature Section -->\n            <div class=\"signature-section\">\n              <div class=\"signature-box\" style=\"margin-left: auto;\">\n                <div class=\"signature-line\"></div>\n                <div>Authorized Signature & Stamp</div>\n              </div>\n            </div>\n            \n            <!-- Footer -->\n            <div class=\"footer\">\n              <div class=\"footer-line\">Address: ${hospitalInfo.address}</div>\n              <div class=\"footer-line\">Phone: ${hospitalInfo.phone} | Email: ${hospitalInfo.email}${hospitalInfo.registrationNumber ? ` | Reg. No.: ${hospitalInfo.registrationNumber}` : ''}</div>\n              <div class=\"receipt-id\">\n                Receipt ID: ${receiptNumber} | Generated on ${new Date().toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(receiptHtml);\n    printWindow.document.close();\n    printWindow.focus();\n    \n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 250);\n\n    onPrint();\n  };\n\n  return (\n    <Button\n      onClick={handlePrint}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"flex items-center justify-center text-blue-600 hover:text-blue-700 hover:bg-blue-50 h-full min-h-full w-12 px-3\"\n      title=\"Print Receipt\"\n    >\n      <Printer className=\"h-4 w-4\" />\n    </Button>\n  );\n}\n","size_bytes":13819},"client/src/components/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Bed, Microscope, Stethoscope } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface StatsCardsProps {\n  stats: {\n    opdPatients: number;\n    inpatients: number;\n    labTests: number;\n    diagnostics: number;\n  };\n}\n\nexport default function StatsCards({ stats }: StatsCardsProps) {\n  const statsData = [\n    {\n      title: \"OPD Patients\",\n      value: stats.opdPatients.toString(),\n      change: \"Today\",\n      changeType: \"neutral\" as const,\n      icon: Users,\n      bgColor: \"bg-medical-blue/10\",\n      iconColor: \"text-medical-blue\",\n      testId: \"stat-opd\",\n      clickable: true,\n      linkTo: \"/opd-list\"\n    },\n    {\n      title: \"In-patients\",\n      value: stats.inpatients.toString(),\n      change: \"Currently admitted\",\n      changeType: \"neutral\" as const,\n      icon: Bed,\n      bgColor: \"bg-healthcare-green/10\",\n      iconColor: \"text-healthcare-green\",\n      testId: \"stat-inpatients\",\n      clickable: true,\n      linkTo: \"/admissions\"\n    },\n    {\n      title: \"Lab Tests\",\n      value: stats.labTests.toString(),\n      change: \"Today\",\n      changeType: \"positive\" as const,\n      icon: Microscope,\n      bgColor: \"bg-purple-500/10\",\n      iconColor: \"text-purple-500\",\n      testId: \"stat-labs\",\n      clickable: true,\n      linkTo: \"/lab-tests\"\n    },\n    {\n      title: \"Diagnostics\",\n      value: stats.diagnostics.toString(),\n      change: \"Completed\",\n      changeType: \"positive\" as const,\n      icon: Stethoscope,\n      bgColor: \"bg-orange-500/10\",\n      iconColor: \"text-orange-500\",\n      testId: \"stat-diagnostics\",\n      clickable: true,\n      linkTo: \"/pathology\"\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n      {statsData.map((stat) => {\n        const CardWrapper = (stat as any).clickable ? \n          ({ children, ...props }: any) => (\n            <Link href={(stat as any).linkTo}>\n              <Card {...props} className={`shadow-sm cursor-pointer hover:shadow-md transition-shadow ${props.className || ''}`}>\n                {children}\n              </Card>\n            </Link>\n          ) : \n          ({ children, ...props }: any) => <Card {...props}>{children}</Card>;\n\n        return (\n          <CardWrapper key={stat.title} data-testid={stat.testId}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-text-muted text-sm font-medium\">{stat.title}</p>\n                  <p className=\"text-2xl font-bold text-text-dark mt-1\" data-testid={`${stat.testId}-value`}>\n                    {stat.value}\n                  </p>\n                  <p className={`text-sm font-medium mt-2 ${\n                    stat.changeType === \"positive\" ? \"text-healthcare-green\" :\n                    \"text-medical-blue\"\n                  }`}>\n                    {stat.change}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                  <stat.icon className={`w-6 h-6 ${stat.iconColor}`} />\n                </div>\n              </div>\n            </CardContent>\n          </CardWrapper>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3320},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { authApi, tokenStorage, type User } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = tokenStorage.get();\n      if (token) {\n        try {\n          const userData = await authApi.getMe();\n          setUser(userData);\n        } catch (error) {\n          tokenStorage.remove();\n        }\n      }\n      setIsLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const { token, user: userData } = await authApi.login(username, password);\n      tokenStorage.set(token);\n      setUser(userData);\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${userData.fullName}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    tokenStorage.remove();\n    setUser(null);\n    toast({\n      title: \"Logged out\",\n      description: \"You have been logged out successfully\",\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isLoading,\n      login,\n      logout,\n      isAuthenticated: !!user,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2103},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  fullName: string;\n  role: string;\n}\n\nexport interface LoginResponse {\n  token: string;\n  user: User;\n}\n\nexport const authApi = {\n  login: async (username: string, password: string): Promise<LoginResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n    return response.json();\n  },\n\n  register: async (userData: { username: string; password: string; fullName: string; role: string }): Promise<User> => {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n    return response.json();\n  },\n\n  getMe: async (): Promise<User> => {\n    const response = await apiRequest(\"GET\", \"/api/users/me\");\n    return response.json();\n  },\n};\n\nexport const tokenStorage = {\n  get: () => localStorage.getItem(\"hospital_token\"),\n  set: (token: string) => localStorage.setItem(\"hospital_token\", token),\n  remove: () => localStorage.removeItem(\"hospital_token\"),\n};\n","size_bytes":1029},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"hospital_token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"hospital_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1779},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admissions.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Bed, \n  User, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  UserCheck,\n  UserX\n} from \"lucide-react\";\nimport type { Admission, Patient, RoomType } from \"@shared/schema\";\n\nexport default function InPatientManagement() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch all admissions\n  const { data: admissions = [] } = useQuery<Admission[]>({\n    queryKey: [\"/api/admissions\"],\n  });\n\n  // Fetch patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Fetch bed occupancy data for IST-based calculation\n  const { data: bedOccupancyData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/bed-occupancy\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Fetch IST-based counts\n  const { data: currentlyAdmittedData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/currently-admitted\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: admittedTodayData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/admitted-today\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: dischargedTodayData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/discharged-today\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Calculate statistics from IST-based API data\n  const totalBeds = useMemo(() => {\n    return bedOccupancyData.reduce((sum, roomType) => sum + (roomType.totalBeds || 0), 0);\n  }, [bedOccupancyData]);\n\n  const occupiedBeds = useMemo(() => {\n    return bedOccupancyData.reduce((sum, roomType) => sum + (roomType.occupiedBeds || 0), 0);\n  }, [bedOccupancyData]);\n\n  const currentlyAdmitted = currentlyAdmittedData.length;\n  const admittedToday = admittedTodayData.length;\n  const dischargedToday = dischargedTodayData.length;\n\n  // Filter admissions based on search\n  const filteredAdmissions = useMemo(() => {\n    if (!searchQuery) return admissions;\n    \n    return admissions.filter(admission => {\n      const patient = patients.find(p => p.id === admission.patientId);\n      return (\n        patient?.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.patientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        admission.admissionId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        admission.currentWardType?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    });\n  }, [admissions, patients, searchQuery]);\n\n  const getPatientName = (patientId: string) => {\n    const patient = patients.find(p => p.id === patientId);\n    return patient?.name || \"Unknown Patient\";\n  };\n\n  const getPatientId = (patientId: string) => {\n    const patient = patients.find(p => p.id === patientId);\n    return patient?.patientId || \"N/A\";\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"admitted\": return \"default\";\n      case \"discharged\": return \"secondary\";\n      case \"transferred\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"In-Patient Management\" />\n      \n      <div className=\"p-6\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Link href=\"/bed-occupancy\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Bed className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Bed Occupancy</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{occupiedBeds}/{totalBeds}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/currently-admitted\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <User className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Currently Admitted</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{currentlyAdmitted}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/admitted-today\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <UserCheck className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Admitted Today</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{admittedToday}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/discharged-today\">\n            <Card className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <UserX className=\"h-8 w-8 text-red-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Discharged Today</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{dischargedToday}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search patients, admission ID, or ward type...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Admissions Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building2 className=\"h-5 w-5\" />\n              Patient Admissions\n            </CardTitle>\n            <CardDescription>\n              Manage all patient admissions and discharges\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredAdmissions.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Admission ID</TableHead>\n                    <TableHead>Patient</TableHead>\n                    <TableHead>Ward/Room Type</TableHead>\n                    <TableHead>Room Number</TableHead>\n                    <TableHead>Admission Date</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Daily Cost</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAdmissions.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell className=\"font-medium\">\n                        {admission.admissionId}\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{getPatientName(admission.patientId)}</div>\n                          <div className=\"text-sm text-gray-500\">ID: {getPatientId(admission.patientId)}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{admission.currentWardType || \"Not specified\"}</TableCell>\n                      <TableCell>{admission.currentRoomNumber || \"TBA\"}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3 text-gray-400\" />\n                          {new Date(admission.admissionDate).toLocaleDateString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getStatusBadgeVariant(admission.status)}>\n                          {admission.status.charAt(0).toUpperCase() + admission.status.slice(1)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>₹{admission.dailyCost.toLocaleString()}</TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Patient\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Bed className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No admissions match your search criteria.\" : \"No patient admissions found.\"}\n                </p>\n                <Link href=\"/patients\">\n                  <Button className=\"mt-4\">\n                    Admit New Patient\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10706},"client/src/pages/billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport TopBar from \"@/components/layout/topbar\";\nimport StatsCards from \"@/components/stats-cards\";\nimport PatientSearch from \"@/components/billing/patient-search\";\nimport ServiceSelector from \"@/components/billing/service-selector\";\nimport BillSummary from \"@/components/billing/bill-summary\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Patient, Service } from \"@shared/schema\";\n\ninterface BillItem {\n  serviceId: string;\n  service: Service;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\nexport default function Billing() {\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [billItems, setBillItems] = useState<BillItem[]>([]);\n  const [paymentMethod, setPaymentMethod] = useState<\"cash\" | \"card\" | \"upi\" | \"insurance\">(\"cash\");\n  const [isServiceModalOpen, setIsServiceModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: recentBills } = useQuery({\n    queryKey: [\"/api/bills\"],\n  });\n\n  const createBillMutation = useMutation({\n    mutationFn: async (billData: any) => {\n      const response = await fetch(\"/api/bills\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(billData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create bill\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      // Reset form\n      setSelectedPatient(null);\n      setBillItems([]);\n      setPaymentMethod(\"cash\");\n      \n      toast({\n        title: \"Bill created successfully\",\n        description: \"The bill has been generated and saved.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating bill\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addService = (service: Service) => {\n    const existingItem = billItems.find(item => item.serviceId === service.id);\n    \n    if (existingItem) {\n      setBillItems(items =>\n        items.map(item =>\n          item.serviceId === service.id\n            ? {\n                ...item,\n                quantity: item.quantity + 1,\n                totalPrice: (item.quantity + 1) * item.unitPrice,\n              }\n            : item\n        )\n      );\n    } else {\n      const newItem: BillItem = {\n        serviceId: service.id,\n        service,\n        quantity: 1,\n        unitPrice: service.price,\n        totalPrice: service.price,\n      };\n      setBillItems(items => [...items, newItem]);\n    }\n    \n    setIsServiceModalOpen(false);\n  };\n\n  const removeService = (serviceId: string) => {\n    setBillItems(items => items.filter(item => item.serviceId !== serviceId));\n  };\n\n  const updateQuantity = (serviceId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeService(serviceId);\n      return;\n    }\n    \n    setBillItems(items =>\n      items.map(item =>\n        item.serviceId === serviceId\n          ? {\n              ...item,\n              quantity,\n              totalPrice: quantity * item.unitPrice,\n            }\n          : item\n      )\n    );\n  };\n\n  const calculateBillTotals = () => {\n    const subtotal = billItems.reduce((sum, item) => sum + item.totalPrice, 0);\n    const taxAmount = subtotal * 0.18; // 18% tax\n    const discountAmount = 0; // Can be made dynamic\n    const totalAmount = subtotal + taxAmount - discountAmount;\n    \n    return { subtotal, taxAmount, discountAmount, totalAmount };\n  };\n\n  const handleGenerateBill = () => {\n    if (!selectedPatient || billItems.length === 0) {\n      toast({\n        title: \"Incomplete bill\",\n        description: \"Please select a patient and add services.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const { subtotal, taxAmount, discountAmount, totalAmount } = calculateBillTotals();\n    \n    const billData = {\n      bill: {\n        patientId: selectedPatient.id,\n        subtotal,\n        taxAmount,\n        discountAmount,\n        totalAmount,\n        paymentMethod,\n        paymentStatus: \"paid\",\n        paidAmount: totalAmount,\n      },\n      items: billItems.map(item => ({\n        serviceId: item.serviceId,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: item.totalPrice,\n      })),\n    };\n\n    createBillMutation.mutate(billData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Billing & Invoicing\"\n        searchPlaceholder=\"Search patients, bills...\"\n        onNewAction={() => setIsServiceModalOpen(true)}\n        newActionLabel=\"New Bill\"\n        showNotifications={true}\n        notificationCount={3}\n      />\n      \n      <div className=\"p-6 space-y-6\">\n        {!statsLoading && stats && <StatsCards stats={stats} />}\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Patient Selection & Bill Creation */}\n          <div className=\"lg:col-span-2\">\n            <PatientSearch\n              selectedPatient={selectedPatient}\n              onPatientSelect={setSelectedPatient}\n              billItems={billItems}\n              onAddService={() => setIsServiceModalOpen(true)}\n              onRemoveService={removeService}\n              onUpdateQuantity={updateQuantity}\n            />\n          </div>\n\n          {/* Bill Summary and Actions */}\n          <div>\n            <BillSummary\n              billItems={billItems}\n              paymentMethod={paymentMethod}\n              onPaymentMethodChange={setPaymentMethod}\n              onGenerateBill={handleGenerateBill}\n              isGenerating={createBillMutation.isPending}\n              recentBills={recentBills?.slice(0, 5) || []}\n              totals={calculateBillTotals()}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Service Selection Modal */}\n      <ServiceSelector\n        isOpen={isServiceModalOpen}\n        onClose={() => setIsServiceModalOpen(false)}\n        onSelectService={addService}\n      />\n    </div>\n  );\n}\n","size_bytes":6493},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport TopBar from \"@/components/layout/topbar\";\nimport StatsCards from \"@/components/stats-cards\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface DashboardStats {\n  opdPatients: number;\n  inpatients: number;\n  labTests: number;\n  diagnostics: number;\n}\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    staleTime: 0, // Always refetch for real-time data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/stats\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar \n          title=\"Dashboard & Reports\"\n          showNotifications={true}\n          notificationCount={3}\n        />\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-20 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Dashboard & Reports\"\n        showNotifications={true}\n        notificationCount={3}\n      />\n      \n      <div className=\"p-6 space-y-6\">\n        <StatsCards stats={stats || { opdPatients: 0, inpatients: 0, labTests: 0, diagnostics: 0 }} />\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-8 h-8 bg-medical-blue rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">B</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">New bill generated</p>\n                    <p className=\"text-xs text-text-muted\">BILL-2024-0089 for Rajesh Kumar</p>\n                  </div>\n                  <p className=\"text-xs text-text-muted\">2 min ago</p>\n                </div>\n                \n                <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-8 h-8 bg-healthcare-green rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">P</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">New patient registered</p>\n                    <p className=\"text-xs text-text-muted\">Priya Sharma - OPD</p>\n                  </div>\n                  <p className=\"text-xs text-text-muted\">15 min ago</p>\n                </div>\n                \n                <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">L</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Lab test completed</p>\n                    <p className=\"text-xs text-text-muted\">Blood test for Amit Singh</p>\n                  </div>\n                  <p className=\"text-xs text-text-muted\">1 hour ago</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <button className=\"p-4 bg-medical-blue text-white rounded-lg hover:bg-medical-blue/90 transition-colors\" data-testid=\"quick-new-bill\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">New Bill</div>\n                    <div className=\"text-sm opacity-90\">Create invoice</div>\n                  </div>\n                </button>\n                \n                <button className=\"p-4 bg-healthcare-green text-white rounded-lg hover:bg-healthcare-green/90 transition-colors\" data-testid=\"quick-new-patient\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">Add Patient</div>\n                    <div className=\"text-sm opacity-90\">Register new</div>\n                  </div>\n                </button>\n                \n                <button className=\"p-4 bg-purple-500 text-white rounded-lg hover:bg-purple-500/90 transition-colors\" data-testid=\"quick-new-test\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">Lab Test</div>\n                    <div className=\"text-sm opacity-90\">Order test</div>\n                  </div>\n                </button>\n                \n                <button className=\"p-4 bg-alert-orange text-white rounded-lg hover:bg-alert-orange/90 transition-colors\" data-testid=\"quick-view-pending\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">Pending</div>\n                    <div className=\"text-sm opacity-90\">View bills</div>\n                  </div>\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6099},"client/src/pages/doctors.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { UserPlus, Eye, Edit, Trash2, Stethoscope, IndianRupee } from \"lucide-react\";\nimport { insertDoctorSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Doctor } from \"@shared/schema\";\n\nexport default function Doctors() {\n  const [isNewDoctorOpen, setIsNewDoctorOpen] = useState(false);\n  const [isEditDoctorOpen, setIsEditDoctorOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isPermanentDeleteDialogOpen, setIsPermanentDeleteDialogOpen] = useState(false);\n  const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null);\n  const [doctorToDelete, setDoctorToDelete] = useState<Doctor | null>(null);\n  const [doctorToPermanentlyDelete, setDoctorToPermanentlyDelete] = useState<Doctor | null>(null);\n  const [deleteConfirmationText, setDeleteConfirmationText] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: doctors, isLoading } = useQuery({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  const { data: deletedDoctors, isLoading: isLoadingDeleted } = useQuery({\n    queryKey: [\"/api/doctors/deleted\"],\n  });\n\n  const createDoctorMutation = useMutation({\n    mutationFn: async (doctorData: any) => {\n      const response = await fetch(\"/api/doctors\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(doctorData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      setIsNewDoctorOpen(false);\n      form.reset();\n      toast({\n        title: \"Doctor added successfully\",\n        description: \"The doctor profile has been created.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error adding doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDoctorMutation = useMutation({\n    mutationFn: async ({ id, doctorData }: { id: string; doctorData: any }) => {\n      const response = await fetch(`/api/doctors/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(doctorData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      setIsEditDoctorOpen(false);\n      setSelectedDoctor(null);\n      editForm.reset();\n      toast({\n        title: \"Doctor updated successfully\",\n        description: \"The doctor profile has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error updating doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDoctorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/doctors/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors/deleted\"] });\n      toast({\n        title: \"Doctor deleted successfully\",\n        description: \"The doctor profile has been removed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error deleting doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const restoreDoctorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/doctors/${id}/restore`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to restore doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors/deleted\"] });\n      toast({\n        title: \"Doctor restored successfully\",\n        description: \"The doctor profile has been restored to active status.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error restoring doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const permanentDeleteDoctorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/doctors/${id}/permanent`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to permanently delete doctor\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctors/deleted\"] });\n      toast({\n        title: \"Doctor permanently deleted\",\n        description: \"The doctor profile has been permanently removed from the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error permanently deleting doctor\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertDoctorSchema),\n    defaultValues: {\n      name: \"\",\n      specialization: \"\",\n      qualification: \"\",\n      consultationFee: 0,\n      userId: undefined,\n    },\n  });\n\n  const editForm = useForm({\n    resolver: zodResolver(insertDoctorSchema),\n    defaultValues: {\n      name: \"\",\n      specialization: \"\",\n      qualification: \"\",\n      consultationFee: 0,\n      userId: undefined,\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createDoctorMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (selectedDoctor) {\n      updateDoctorMutation.mutate({ id: selectedDoctor.id, doctorData: data });\n    }\n  };\n\n  const handleEditDoctor = (doctor: Doctor) => {\n    setSelectedDoctor(doctor);\n    editForm.reset({\n      name: doctor.name,\n      specialization: doctor.specialization,\n      qualification: doctor.qualification,\n      consultationFee: doctor.consultationFee,\n      userId: doctor.userId,\n    });\n    setIsEditDoctorOpen(true);\n  };\n\n  const handleDeleteDoctor = (doctor: Doctor) => {\n    setDoctorToDelete(doctor);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteDoctor = () => {\n    if (doctorToDelete) {\n      deleteDoctorMutation.mutate(doctorToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setDoctorToDelete(null);\n    }\n  };\n\n  const handleRestoreDoctor = (doctorId: string) => {\n    restoreDoctorMutation.mutate(doctorId);\n  };\n\n  const handlePermanentDeleteDoctor = (doctor: Doctor) => {\n    setDoctorToPermanentlyDelete(doctor);\n    setDeleteConfirmationText(\"\");\n    setIsPermanentDeleteDialogOpen(true);\n  };\n\n  const confirmPermanentDeleteDoctor = () => {\n    if (doctorToPermanentlyDelete && deleteConfirmationText === \"delete\") {\n      permanentDeleteDoctorMutation.mutate(doctorToPermanentlyDelete.id);\n      setIsPermanentDeleteDialogOpen(false);\n      setDoctorToPermanentlyDelete(null);\n      setDeleteConfirmationText(\"\");\n    }\n  };\n\n  const filteredDoctors = doctors?.filter((doctor: Doctor) =>\n    doctor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doctor.specialization.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doctor.qualification.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const specializations = [\n    \"General Medicine\",\n    \"Cardiology\",\n    \"Neurology\",\n    \"Orthopedics\",\n    \"Dermatology\",\n    \"Pediatrics\",\n    \"Gynecology\",\n    \"Urology\",\n    \"Psychiatry\",\n    \"Radiology\",\n    \"Pathology\",\n    \"Anesthesiology\",\n    \"Emergency Medicine\",\n    \"Surgery\",\n    \"ENT\",\n    \"Ophthalmology\"\n  ];\n\n  const getSpecializationIcon = (specialization: string) => {\n    // Return appropriate icon based on specialization\n    return <Stethoscope className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Doctor Management\"\n        searchPlaceholder=\"Search doctors by name or specialization...\"\n        onSearch={setSearchQuery}\n        onNewAction={() => setIsNewDoctorOpen(true)}\n        newActionLabel=\"Add Doctor\"\n      />\n\n      <div className=\"p-6\">\n        <Tabs defaultValue=\"all-doctors\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"all-doctors\" data-testid=\"tab-all-doctors\">Active Doctors</TabsTrigger>\n            <TabsTrigger value=\"schedules\" data-testid=\"tab-schedules\">Schedules</TabsTrigger>\n            <TabsTrigger value=\"deleted-doctors\" data-testid=\"tab-deleted-doctors\">Inactive Doctors</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all-doctors\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Doctor Profiles</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Total: {filteredDoctors.length} doctors\n                </p>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Loading doctors...</p>\n                  </div>\n                ) : filteredDoctors.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Stethoscope className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No doctors found</p>\n                    <Button \n                      onClick={() => setIsNewDoctorOpen(true)}\n                      className=\"mt-4\"\n                      data-testid=\"button-first-doctor\"\n                    >\n                      Add your first doctor\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"doctors-grid\">\n                    {filteredDoctors.map((doctor: Doctor) => (\n                      <Card key={doctor.id} className=\"hover:shadow-md transition-shadow\" data-testid={`doctor-card-${doctor.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-12 h-12 bg-healthcare-green rounded-full flex items-center justify-center\">\n                                <span className=\"text-white font-medium text-sm\">\n                                  {doctor.name.split(' ').map(n => n[0]).join('')}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-lg\" data-testid={`doctor-name-${doctor.id}`}>\n                                  {doctor.name}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`doctor-specialization-${doctor.id}`}>\n                                  {doctor.specialization}\n                                </p>\n                              </div>\n                            </div>\n                            <Badge \n                              variant={doctor.isActive ? \"default\" : \"secondary\"}\n                              data-testid={`doctor-status-${doctor.id}`}\n                            >\n                              {doctor.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </div>\n\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getSpecializationIcon(doctor.specialization)}\n                              <span className=\"text-sm\" data-testid={`doctor-qualification-${doctor.id}`}>\n                                {doctor.qualification}\n                              </span>\n                            </div>\n\n                            <div className=\"flex items-center space-x-2\">\n                              <IndianRupee className=\"w-4 h-4 text-healthcare-green\" />\n                              <span className=\"text-sm font-medium\" data-testid={`doctor-fee-${doctor.id}`}>\n                                Consultation: {formatCurrency(doctor.consultationFee)}\n                              </span>\n                            </div>\n\n                            <div className=\"text-xs text-muted-foreground\">\n                              Joined: {formatDate(doctor.createdAt)}\n                            </div>\n                          </div>\n\n                          <div className=\"flex space-x-2 mt-4 pt-4 border-t\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"flex-1\"\n                              onClick={() => setSelectedDoctor(doctor)}\n                              data-testid={`button-view-${doctor.id}`}\n                            >\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              View\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"flex-1\"\n                              onClick={() => handleEditDoctor(doctor)}\n                              data-testid={`button-edit-${doctor.id}`}\n                            >\n                              <Edit className=\"w-4 h-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"flex-1 text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              onClick={() => handleDeleteDoctor(doctor)}\n                              data-testid={`button-delete-${doctor.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"deleted-doctors\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Inactive Doctors</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Doctors that have been deactivated can be restored here. Total: {deletedDoctors?.length || 0} inactive doctors\n                </p>\n              </CardHeader>\n              <CardContent>\n                {isLoadingDeleted ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Loading deleted doctors...</p>\n                  </div>\n                ) : (deletedDoctors?.length || 0) === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Stethoscope className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No inactive doctors found</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"deleted-doctors-grid\">\n                    {deletedDoctors?.map((doctor: Doctor) => (\n                      <Card key={doctor.id} className=\"opacity-75 hover:opacity-100 transition-opacity border-red-200\" data-testid={`deleted-doctor-card-${doctor.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-12 h-12 bg-gray-400 rounded-full flex items-center justify-center\">\n                                <span className=\"text-white font-medium text-sm\">\n                                  {doctor.name.split(' ').map(n => n[0]).join('')}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-lg text-gray-600\" data-testid={`deleted-doctor-name-${doctor.id}`}>\n                                  {doctor.name}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`deleted-doctor-specialization-${doctor.id}`}>\n                                  {doctor.specialization}\n                                </p>\n                              </div>\n                            </div>\n                            <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">\n                              Inactive\n                            </Badge>\n                          </div>\n\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getSpecializationIcon(doctor.specialization)}\n                              <span className=\"text-sm text-gray-600\" data-testid={`deleted-doctor-qualification-${doctor.id}`}>\n                                {doctor.qualification}\n                              </span>\n                            </div>\n\n                            <div className=\"flex items-center space-x-2\">\n                              <IndianRupee className=\"w-4 h-4 text-gray-500\" />\n                              <span className=\"text-sm font-medium text-gray-600\" data-testid={`deleted-doctor-fee-${doctor.id}`}>\n                                Consultation: {formatCurrency(doctor.consultationFee)}\n                              </span>\n                            </div>\n\n                            <div className=\"text-xs text-muted-foreground\">\n                              Deactivated: {formatDate(doctor.updatedAt)}\n                            </div>\n                          </div>\n\n                          <div className=\"flex flex-col space-y-2 mt-4 pt-4 border-t\">\n                            <Button \n                              variant=\"default\" \n                              size=\"sm\"\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              onClick={() => handleRestoreDoctor(doctor.id)}\n                              disabled={restoreDoctorMutation.isPending}\n                              data-testid={`button-restore-${doctor.id}`}\n                            >\n                              {restoreDoctorMutation.isPending ? \"Restoring...\" : \"Restore Doctor\"}\n                            </Button>\n                            <Button \n                              variant=\"destructive\" \n                              size=\"sm\"\n                              onClick={() => handlePermanentDeleteDoctor(doctor)}\n                              disabled={permanentDeleteDoctorMutation.isPending}\n                              data-testid={`button-permanent-delete-${doctor.id}`}\n                            >\n                              {permanentDeleteDoctorMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          \n\n          <TabsContent value=\"schedules\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Doctor Schedules</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Manage doctor availability and appointment slots\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">Schedule management feature coming soon</p>\n                  <Button className=\"mt-4\" disabled>\n                    Configure Schedules\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* New Doctor Dialog */}\n      <Dialog open={isNewDoctorOpen} onOpenChange={setIsNewDoctorOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-doctor-dialog\">\n          <DialogHeader>\n            <DialogTitle>Add New Doctor</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"Dr. John Doe\"\n                  data-testid=\"input-doctor-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"specialization\">Specialization *</Label>\n                <Select onValueChange={(value) => form.setValue(\"specialization\", value)}>\n                  <SelectTrigger data-testid=\"select-specialization\">\n                    <SelectValue placeholder=\"Select specialization\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {specializations.map((spec) => (\n                      <SelectItem key={spec} value={spec}>\n                        {spec}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.specialization && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.specialization.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"qualification\">Qualification *</Label>\n                <Input\n                  id=\"qualification\"\n                  {...form.register(\"qualification\")}\n                  placeholder=\"MBBS, MD, MS etc.\"\n                  data-testid=\"input-qualification\"\n                />\n                {form.formState.errors.qualification && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.qualification.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"consultationFee\">Consultation Fee (₹) *</Label>\n                <Input\n                  id=\"consultationFee\"\n                  type=\"number\"\n                  {...form.register(\"consultationFee\", { valueAsNumber: true })}\n                  placeholder=\"500\"\n                  data-testid=\"input-consultation-fee\"\n                />\n                {form.formState.errors.consultationFee && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.consultationFee.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewDoctorOpen(false)}\n                data-testid=\"button-cancel-doctor\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createDoctorMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-doctor\"\n              >\n                {createDoctorMutation.isPending ? \"Adding...\" : \"Add Doctor\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Doctor Details Dialog */}\n      {selectedDoctor && (\n        <Dialog open={!!selectedDoctor} onOpenChange={() => setSelectedDoctor(null)}>\n          <DialogContent className=\"max-w-2xl\" data-testid=\"doctor-details-dialog\">\n            <DialogHeader>\n              <DialogTitle>Doctor Profile - {selectedDoctor.name}</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-healthcare-green rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-medium text-lg\">\n                    {selectedDoctor.name.split(' ').map(n => n[0]).join('')}\n                  </span>\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold\" data-testid=\"detail-doctor-name\">\n                    {selectedDoctor.name}\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"detail-doctor-specialization\">\n                    {selectedDoctor.specialization}\n                  </p>\n                  <Badge \n                    variant={selectedDoctor.isActive ? \"default\" : \"secondary\"}\n                    data-testid=\"detail-doctor-status\"\n                  >\n                    {selectedDoctor.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Qualification</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-qualification\">\n                    {selectedDoctor.qualification}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Consultation Fee</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-consultation-fee\">\n                    {formatCurrency(selectedDoctor.consultationFee)}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Joined Date</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-joined-date\">\n                    {formatDate(selectedDoctor.createdAt)}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Last Updated</Label>\n                  <p className=\"font-medium\" data-testid=\"detail-updated-date\">\n                    {formatDate(selectedDoctor.updatedAt)}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <h4 className=\"font-medium mb-3\">Quick Actions</h4>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" data-testid=\"button-edit-profile\">\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Edit Profile\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-view-schedule\">\n                    View Schedule\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-view-patients\">\n                    View Patients\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Edit Doctor Dialog */}\n      <Dialog open={isEditDoctorOpen} onOpenChange={setIsEditDoctorOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"edit-doctor-dialog\">\n          <DialogHeader>\n            <DialogTitle>Edit Doctor Profile</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Full Name *</Label>\n                <Input\n                  id=\"edit-name\"\n                  {...editForm.register(\"name\")}\n                  placeholder=\"Dr. John Doe\"\n                  data-testid=\"input-edit-doctor-name\"\n                />\n                {editForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-specialization\">Specialization *</Label>\n                <Select \n                  value={editForm.watch(\"specialization\")}\n                  onValueChange={(value) => editForm.setValue(\"specialization\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-edit-specialization\">\n                    <SelectValue placeholder=\"Select specialization\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {specializations.map((spec) => (\n                      <SelectItem key={spec} value={spec}>\n                        {spec}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {editForm.formState.errors.specialization && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.specialization.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-qualification\">Qualification *</Label>\n                <Input\n                  id=\"edit-qualification\"\n                  {...editForm.register(\"qualification\")}\n                  placeholder=\"MBBS, MD, MS etc.\"\n                  data-testid=\"input-edit-qualification\"\n                />\n                {editForm.formState.errors.qualification && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.qualification.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-consultationFee\">Consultation Fee (₹) *</Label>\n                <Input\n                  id=\"edit-consultationFee\"\n                  type=\"number\"\n                  {...editForm.register(\"consultationFee\", { valueAsNumber: true })}\n                  placeholder=\"500\"\n                  data-testid=\"input-edit-consultation-fee\"\n                />\n                {editForm.formState.errors.consultationFee && (\n                  <p className=\"text-sm text-destructive\">{editForm.formState.errors.consultationFee.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDoctorOpen(false)}\n                data-testid=\"button-cancel-edit-doctor\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateDoctorMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-edit-doctor\"\n              >\n                {updateDoctorMutation.isPending ? \"Updating...\" : \"Update Doctor\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"delete-doctor-dialog\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Doctor</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {doctorToDelete?.name}? This action cannot be undone.\n              All associated appointments and records will remain but will no longer be linked to this doctor.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDeleteDoctor}\n              disabled={deleteDoctorMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteDoctorMutation.isPending ? \"Deleting...\" : \"Delete Doctor\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Permanent Delete Confirmation Dialog */}\n      <Dialog open={isPermanentDeleteDialogOpen} onOpenChange={setIsPermanentDeleteDialogOpen}>\n        <DialogContent className=\"max-w-md\" data-testid=\"permanent-delete-doctor-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-red-600\">Permanently Delete Doctor</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-sm text-red-800 font-medium mb-2\">⚠️ Warning: This action is irreversible</p>\n              <p className=\"text-sm text-red-700\">\n                You are about to permanently delete <strong>{doctorToPermanentlyDelete?.name}</strong> from the system. \n                This will completely remove all doctor data and cannot be undone.\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"delete-confirmation\" className=\"text-sm font-medium\">\n                Type \"delete\" to confirm permanent deletion:\n              </Label>\n              <Input\n                id=\"delete-confirmation\"\n                value={deleteConfirmationText}\n                onChange={(e) => setDeleteConfirmationText(e.target.value)}\n                placeholder=\"Type 'delete' here\"\n                className=\"text-center\"\n                data-testid=\"input-delete-confirmation\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsPermanentDeleteDialogOpen(false);\n                setDoctorToPermanentlyDelete(null);\n                setDeleteConfirmationText(\"\");\n              }}\n              data-testid=\"button-cancel-permanent-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmPermanentDeleteDoctor}\n              disabled={deleteConfirmationText !== \"delete\" || permanentDeleteDoctorMutation.isPending}\n              data-testid=\"button-confirm-permanent-delete\"\n            >\n              {permanentDeleteDoctorMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":38067},"client/src/pages/lab-tests.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Calendar, \n  Clock, \n  Search, \n  User, \n  TestTube,\n  Phone,\n  MapPin,\n  Filter,\n  Eye\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { PathologyOrder, Patient, Doctor } from \"@shared/schema\";\n\nexport default function LabTests() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedDoctor, setSelectedDoctor] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n\n  // Fetch all pathology orders\n  const { data: pathologyOrders = [], isLoading } = useQuery({\n    queryKey: [\"/api/pathology\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  // Fetch patients for order details\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Fetch doctors for filtering\n  const { data: doctors = [] } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Group lab tests by status\n  const labTestsByStatus = useMemo(() => {\n    const filtered = pathologyOrders.filter((orderData: any) => {\n      if (!orderData?.order) return false;\n      const order = orderData.order;\n      const patient = orderData.patient;\n\n      const matchesSearch = searchQuery === \"\" || \n        order.orderId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.patientId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.phone?.includes(searchQuery);\n\n      const matchesDoctor = selectedDoctor === \"all\" || order.doctorId === selectedDoctor || \n        (selectedDoctor === \"external\" && !order.doctorId);\n      const matchesStatus = selectedStatus === \"all\" || order.status === selectedStatus;\n      const matchesDate = selectedDate === \"\" || order.orderedDate === selectedDate;\n\n      return matchesSearch && matchesDoctor && matchesStatus && matchesDate;\n    });\n\n    const grouped = filtered.reduce((groups, orderData) => {\n      const order = orderData.order;\n      const status = order.status || \"ordered\";\n      if (!groups[status]) {\n        groups[status] = [];\n      }\n      groups[status].push(orderData);\n      return groups;\n    }, {} as Record<string, any[]>);\n\n    // Sort orders within each status group by ordered date\n    Object.values(grouped).forEach(orders => {\n      orders.sort((a, b) => {\n        const dateA = new Date(a.order.orderedDate).getTime();\n        const dateB = new Date(b.order.orderedDate).getTime();\n        return dateB - dateA; // Most recent first\n      });\n    });\n\n    return grouped;\n  }, [pathologyOrders, searchQuery, selectedDoctor, selectedStatus, selectedDate]);\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"External Patient\";\n    const doctor = doctors.find(d => d.id === doctorId);\n    return doctor ? `Dr. ${doctor.name}` : \"Unknown Doctor\";\n  };\n\n  const getPatientDetails = (patientId: string) => {\n    return patients.find(p => p.id === patientId);\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"ordered\": return \"secondary\";\n      case \"collected\": return \"default\";\n      case \"processing\": return \"outline\";\n      case \"completed\": return \"default\";\n      default: return \"outline\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'collected':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'ordered':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const totalLabCount = pathologyOrders.length;\n  // Use Indian timezone (UTC+5:30) for consistent date calculation\n  const now = new Date();\n  const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n  const today = indianTime.getFullYear() + '-' + \n    String(indianTime.getMonth() + 1).padStart(2, '0') + '-' + \n    String(indianTime.getDate()).padStart(2, '0');\n  const todayLabCount = pathologyOrders.filter((orderData: any) => \n    orderData?.order?.orderedDate === today\n  ).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <p>Loading lab tests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Lab Tests</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and view all pathology orders by status\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <Calendar className=\"w-4 h-4 mr-1\" />\n            Today: {todayLabCount}\n          </Badge>\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <TestTube className=\"w-4 h-4 mr-1\" />\n            Total: {totalLabCount}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by order ID, name, patient ID, or phone...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-lab-tests\"\n              />\n            </div>\n\n            <Select value={selectedDoctor} onValueChange={setSelectedDoctor}>\n              <SelectTrigger data-testid=\"filter-doctor\">\n                <SelectValue placeholder=\"Filter by doctor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Doctors</SelectItem>\n                {doctors.map((doctor: Doctor) => (\n                  <SelectItem key={doctor.id} value={doctor.id}>\n                    {doctor.name} - {doctor.specialization}\n                  </SelectItem>\n                ))}\n                <SelectItem value=\"external\">External Patients</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"filter-status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"ordered\">Ordered</SelectItem>\n                <SelectItem value=\"collected\">Collected</SelectItem>\n                <SelectItem value=\"processing\">Processing</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              data-testid=\"filter-date\"\n            />\n\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedDoctor(\"all\");\n                setSelectedStatus(\"all\");\n                setSelectedDate(\"\");\n              }}\n              data-testid=\"clear-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Clear\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lab Tests by Status */}\n      {Object.keys(labTestsByStatus).length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <TestTube className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No lab tests found matching your criteria.</p>\n            <Link href=\"/pathology\">\n              <Button className=\"mt-4\">Order New Test</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(labTestsByStatus).map(([status, orders]) => (\n            <Card key={status}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TestTube className=\"w-5 h-5\" />\n                  {status.charAt(0).toUpperCase() + status.slice(1)} Tests\n                  <Badge variant=\"outline\">{orders.length} orders</Badge>\n                </CardTitle>\n                <CardDescription>\n                  Lab tests with {status} status\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {orders.map((orderData: any) => {\n                    const order = orderData.order;\n                    const patient = orderData.patient;\n                    const doctor = orderData.doctor;\n                    const orderedDate = new Date(order.orderedDate);\n\n                    return (\n                      <div\n                        key={order.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <User className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">\n                                {patient?.name || \"Unknown Patient\"}\n                              </span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {order.orderId}\n                              </Badge>\n                            </div>\n\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {formatDate(order.orderedDate)}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <TestTube className=\"w-3 h-3\" />\n                                {getDoctorName(order.doctorId)}\n                              </div>\n                              {patient?.phone && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {patient.phone}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-3\">\n                          <Badge \n                            className={getStatusColor(order.status)}\n                            variant=\"secondary\"\n                            data-testid={`status-${order.id}`}\n                          >\n                            {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                          </Badge>\n\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">₹{order.totalPrice}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Total Amount\n                            </div>\n                          </div>\n\n                          <Link href={`/pathology`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`view-order-${order.id}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13106},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Hospital, Loader2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !password) return;\n\n    setIsLoading(true);\n    try {\n      await login(username, password);\n      setLocation(\"/\");\n    } catch (error) {\n      // Error handling is done in the login function\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-medical-blue/5 to-healthcare-green/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-medical-blue rounded-2xl flex items-center justify-center\">\n            <Hospital className=\"w-8 h-8 text-white\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl font-bold text-text-dark\">MedCare Pro</CardTitle>\n            <CardDescription className=\"text-text-muted\">\n              Hospital Management System\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" data-testid=\"label-username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Enter your username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                disabled={isLoading}\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" data-testid=\"label-password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={isLoading}\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-medical-blue hover:bg-medical-blue/90\"\n              disabled={isLoading || !username || !password}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign In\"\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n            <p className=\"text-sm text-muted-foreground mb-2\">Demo Credentials:</p>\n            <div className=\"text-xs space-y-1\">\n              <div><strong>Admin:</strong> admin / admin123</div>\n              <div><strong>Doctor:</strong> doctor / doctor123</div>\n              <div><strong>Billing:</strong> billing / billing123</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3868},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/opd-list.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Calendar, \n  Clock, \n  Search, \n  User, \n  Stethoscope,\n  Phone,\n  MapPin,\n  Filter\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { PatientService, Patient, Doctor } from \"@shared/schema\";\n\nexport default function OpdList() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedDoctor, setSelectedDoctor] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n\n  // Fetch all OPD services\n  const { data: opdServices = [], isLoading } = useQuery<PatientService[]>({\n    queryKey: [\"/api/patient-services\", \"opd\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/patient-services?serviceType=opd\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch OPD services\");\n      return response.json();\n    },\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  // Fetch patients for service details\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Fetch doctors for filtering\n  const { data: doctors = [] } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Group OPD services by doctor\n  const opdServicesByDoctor = useMemo(() => {\n    const filtered = opdServices.filter(service => {\n      const patient = patients.find(p => p.id === service.patientId);\n      const matchesSearch = searchQuery === \"\" || \n        patient?.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.patientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        patient?.phone.includes(searchQuery);\n      \n      const matchesDoctor = selectedDoctor === \"all\" || service.doctorId === selectedDoctor;\n      const matchesStatus = selectedStatus === \"all\" || service.status === selectedStatus;\n      const matchesDate = selectedDate === \"\" || service.scheduledDate === selectedDate;\n\n      return matchesSearch && matchesDoctor && matchesStatus && matchesDate;\n    });\n\n    const grouped = filtered.reduce((groups, service) => {\n      const doctorId = service.doctorId || \"unassigned\";\n      if (!groups[doctorId]) {\n        groups[doctorId] = [];\n      }\n      groups[doctorId].push(service);\n      return groups;\n    }, {} as Record<string, PatientService[]>);\n\n    // Sort services within each doctor group by scheduled date and time\n    Object.values(grouped).forEach(services => {\n      services.sort((a, b) => {\n        const dateCompare = new Date(`${a.scheduledDate}T${a.scheduledTime || '00:00'}`).getTime() - \n                           new Date(`${b.scheduledDate}T${b.scheduledTime || '00:00'}`).getTime();\n        return dateCompare;\n      });\n    });\n\n    return grouped;\n  }, [opdServices, patients, searchQuery, selectedDoctor, selectedStatus, selectedDate]);\n\n  const getDoctorName = (doctorId: string) => {\n    if (doctorId === \"unassigned\") return \"Unassigned\";\n    const doctor = doctors.find(d => d.id === doctorId);\n    return doctor ? doctor.name : \"Unknown Doctor\";\n  };\n\n  const getDoctorSpecialization = (doctorId: string) => {\n    if (doctorId === \"unassigned\") return \"No specialization\";\n    const doctor = doctors.find(d => d.id === doctorId);\n    return doctor?.specialization || \"Unknown\";\n  };\n\n  const getPatientDetails = (patientId: string) => {\n    return patients.find(p => p.id === patientId);\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"default\";\n      case \"in-progress\": return \"secondary\";\n      case \"completed\": return \"default\";\n      case \"cancelled\": return \"destructive\";\n      default: return \"outline\";\n    }\n  };\n\n  const totalOpdCount = opdServices.length;\n  // Use Indian timezone (UTC+5:30) for consistent date calculation\n  const now = new Date();\n  const indianTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n  const today = indianTime.getFullYear() + '-' + \n    String(indianTime.getMonth() + 1).padStart(2, '0') + '-' + \n    String(indianTime.getDate()).padStart(2, '0');\n  const todayOpdCount = opdServices.filter(service => \n    service.scheduledDate === today && service.serviceType === 'opd'\n  ).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <p>Loading OPD appointments...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">OPD Appointments</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and view all OPD consultations by doctor\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <Calendar className=\"w-4 h-4 mr-1\" />\n            Today: {todayOpdCount}\n          </Badge>\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            <User className=\"w-4 h-4 mr-1\" />\n            Total: {totalOpdCount}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name, ID, or phone...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-opd-patients\"\n              />\n            </div>\n            \n            <Select value={selectedDoctor} onValueChange={setSelectedDoctor}>\n              <SelectTrigger data-testid=\"filter-doctor\">\n                <SelectValue placeholder=\"Filter by doctor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Doctors</SelectItem>\n                {doctors.map(doctor => (\n                  <SelectItem key={doctor.id} value={doctor.id}>\n                    {doctor.name}\n                  </SelectItem>\n                ))}\n                <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"filter-status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              data-testid=\"filter-date\"\n            />\n\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedDoctor(\"all\");\n                setSelectedStatus(\"all\");\n                setSelectedDate(\"\");\n              }}\n              data-testid=\"clear-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Clear\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* OPD Services by Doctor */}\n      {Object.keys(opdServicesByDoctor).length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Stethoscope className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No OPD appointments found matching your criteria.</p>\n            <Link href=\"/patients\">\n              <Button className=\"mt-4\">Schedule New OPD</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(opdServicesByDoctor).map(([doctorId, services]) => (\n            <Card key={doctorId}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Stethoscope className=\"w-5 h-5\" />\n                  {getDoctorName(doctorId)}\n                  <Badge variant=\"outline\">{services.length} patients</Badge>\n                </CardTitle>\n                <CardDescription>\n                  {getDoctorSpecialization(doctorId)}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {services.map(service => {\n                    const patient = getPatientDetails(service.patientId);\n                    const scheduledDateTime = new Date(`${service.scheduledDate}T${service.scheduledTime || '00:00'}`);\n                    \n                    return (\n                      <div\n                        key={service.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <User className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">\n                                {patient?.name || \"Unknown Patient\"}\n                              </span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {patient?.patientId || \"N/A\"}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {scheduledDateTime.toLocaleDateString('en-US', {\n                                  month: 'short',\n                                  day: 'numeric',\n                                  year: 'numeric'\n                                })}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                {scheduledDateTime.toLocaleTimeString('en-US', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </div>\n                              {patient?.phone && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  {patient.phone}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-3\">\n                          <Badge \n                            variant={getStatusBadgeVariant(service.status)}\n                            data-testid={`status-${service.id}`}\n                          >\n                            {service.status.charAt(0).toUpperCase() + service.status.slice(1)}\n                          </Badge>\n                          \n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">₹{service.price}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Consultation Fee\n                            </div>\n                          </div>\n                          \n                          <Link href={`/patients/${service.patientId}`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`view-patient-${service.id}`}>\n                              View\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13388},"client/src/pages/pathology.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\nimport { TestTube, Eye, Search, Plus, ShoppingCart, Check, ChevronsUpDown } from \"lucide-react\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { insertPathologyOrderSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { PathologyOrder, Patient, Doctor } from \"@shared/schema\";\n\n// Patient Search Combobox Component\nfunction PatientSearchCombobox({ value, onValueChange, patients }: {\n  value: string;\n  onValueChange: (value: string) => void;\n  patients: any[];\n}) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const filteredPatients = (patients || []).filter((patient: any) => {\n    if (!searchValue.trim()) return true; // Show all patients when no search\n    const searchLower = searchValue.toLowerCase().trim();\n    return (\n      patient.name?.toLowerCase().includes(searchLower) ||\n      patient.patientId?.toLowerCase().includes(searchLower) ||\n      patient.phone?.includes(searchValue.trim()) ||\n      patient.email?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const selectedPatient = patients?.find((patient: any) => patient.id === value);\n\n  const formatPatientDisplay = (patient: any) => {\n    return `${patient.name}, ${patient.age} ${patient.gender} (${patient.patientId})`;\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between text-left font-normal\"\n          data-testid=\"button-select-patient\"\n        >\n          {selectedPatient ? formatPatientDisplay(selectedPatient) : \"Search and select patient...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\" style={{ width: \"var(--radix-popover-trigger-width)\" }}>\n        <Command shouldFilter={false}>\n          <CommandInput \n            placeholder=\"Type to search patients...\" \n            value={searchValue}\n            onValueChange={setSearchValue}\n            data-testid=\"input-search-patient\"\n          />\n          <CommandList className=\"max-h-[300px] overflow-y-auto\">\n            <CommandEmpty>No patients found.</CommandEmpty>\n            <CommandGroup>\n              {filteredPatients.map((patient: any) => (\n                <CommandItem\n                  key={patient.id}\n                  value={patient.name}\n                  onSelect={() => {\n                    onValueChange(patient.id);\n                    setOpen(false);\n                    setSearchValue(\"\");\n                  }}\n                  data-testid={`option-patient-${patient.id}`}\n                  className=\"cursor-pointer\"\n                >\n                  <Check\n                    className={`mr-2 h-4 w-4 ${\n                      value === patient.id ? \"opacity-100\" : \"opacity-0\"\n                    }`}\n                  />\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-medium\">{patient.name}</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {patient.age} years, {patient.gender} • {patient.patientId}\n                    </span>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n// Order Details Dialog Component\nfunction OrderDetailsDialog({ order, onClose }: { order: any, onClose: () => void }) {\n  const { data: orderDetails } = useQuery({\n    queryKey: [\"/api/pathology\", order.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/pathology/${order.id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch order details\");\n      return response.json();\n    },\n  });\n\n  const getPatientName = (patientId: string) => {\n    return orderDetails?.patient?.name || \"Unknown Patient\";\n  };\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"External Patient\";\n    return orderDetails?.doctor?.name || \"Unknown Doctor\";\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'collected':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'ordered':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>Order Details - {order.orderId}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"max-h-[calc(90vh-120px)] overflow-y-auto\">\n          <div className=\"space-y-4 px-6 pb-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Patient</Label>\n                <p className=\"text-sm text-muted-foreground\">{getPatientName(order.patientId)}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Doctor</Label>\n                <p className=\"text-sm text-muted-foreground\">{getDoctorName(order.doctorId)}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Status</Label>\n                <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                  {order.status}\n                </Badge>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Date Ordered</Label>\n                <p className=\"text-sm text-muted-foreground\">{formatDate(order.orderedDate)}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Total Price</Label>\n                <p className=\"text-sm text-muted-foreground\">₹{order.totalPrice}</p>\n              </div>\n            </div>\n            {order.remarks && (\n              <div>\n                <Label className=\"text-sm font-medium\">Remarks</Label>\n                <p className=\"text-sm text-muted-foreground\">{order.remarks}</p>\n              </div>\n            )}\n            \n            <div className=\"mt-6\">\n              <Label className=\"text-sm font-medium\">Tests in this Order ({orderDetails?.tests?.length || 0} tests)</Label>\n              <div className=\"mt-2 border rounded-lg max-h-[300px] overflow-y-auto\">\n                <Table>\n                  <TableHeader className=\"sticky top-0 bg-background z-10\">\n                    <TableRow>\n                      <TableHead className=\"bg-background\">Test Name</TableHead>\n                      <TableHead className=\"bg-background\">Category</TableHead>\n                      <TableHead className=\"bg-background\">Status</TableHead>\n                      <TableHead className=\"bg-background\">Price (₹)</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {orderDetails?.tests ? (\n                      orderDetails.tests.map((test: any, index: number) => (\n                        <TableRow key={test.id} className={index % 2 === 0 ? \"bg-gray-50/50\" : \"\"}>\n                          <TableCell className=\"font-medium\">{test.testName}</TableCell>\n                          <TableCell>{test.testCategory}</TableCell>\n                          <TableCell>\n                            <Badge className={getStatusColor(test.status)} variant=\"secondary\">\n                              {test.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>₹{test.price}</TableCell>\n                        </TableRow>\n                      ))\n                    ) : (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center text-muted-foreground py-8\">\n                          Loading test details...\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Pathology() {\n  // Get URL parameters for pre-selected patient\n  const urlParams = new URLSearchParams(window.location.search);\n  const preSelectedPatientId = urlParams.get('patientId');\n  const preSelectedPatientName = urlParams.get('patientName');\n\n  const [isNewTestOpen, setIsNewTestOpen] = useState(!!preSelectedPatientId);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedCatalogTests, setSelectedCatalogTests] = useState<any[]>([]);\n  const [catalogSearchQuery, setCatalogSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: pathologyOrders = [], isLoading } = useQuery({\n    queryKey: [\"/api/pathology\"],\n  });\n\n  const { data: testCatalog = [] } = useQuery({\n    queryKey: [\"/api/pathology/catalog\"],\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/pathology/catalog/categories\"],\n  });\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: doctors } = useQuery({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string, status: string }) => {\n      const response = await fetch(`/api/pathology/${orderId}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({ status }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to update order status\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pathology\"] });\n      toast({\n        title: \"Status updated\",\n        description: \"The order status has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating status\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Sending order data:\", data);\n      const response = await fetch(\"/api/pathology\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error(\"Order creation failed:\", errorData);\n        throw new Error(`Failed to create pathology order: ${errorData}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pathology\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pathology/patient\", preSelectedPatientId] });\n      setIsNewTestOpen(false);\n      setSelectedCatalogTests([]);\n      form.reset();\n      toast({\n        title: \"Order placed successfully\",\n        description: \"The pathology order has been placed.\",\n      });\n      \n      // Redirect back to patient page if came from there\n      if (preSelectedPatientId) {\n        setTimeout(() => {\n          window.location.href = `/patients/${preSelectedPatientId}#pathology`;\n        }, 500);\n      }\n    },\n    onError: (error) => {\n      console.error(\"Order mutation error:\", error);\n      toast({\n        title: \"Error placing order\",\n        description: `Please try again. ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertPathologyOrderSchema),\n    defaultValues: {\n      patientId: preSelectedPatientId || \"\",\n      doctorId: \"\",\n      orderedDate: (() => {\n        // Use local timezone for pathology order date\n        const now = new Date();\n        return now.getFullYear() + '-' + \n          String(now.getMonth() + 1).padStart(2, '0') + '-' + \n          String(now.getDate()).padStart(2, '0');\n      })(),\n      remarks: \"\",\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    if (selectedCatalogTests.length === 0) {\n      toast({\n        title: \"No tests selected\",\n        description: \"Please select at least one test from the catalog.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create single order with multiple tests\n    const orderData = {\n      patientId: data.patientId,\n      doctorId: data.doctorId === \"external\" || data.doctorId === \"\" ? null : data.doctorId, // Make doctor optional\n      orderedDate: data.orderedDate,\n      remarks: data.remarks,\n    };\n\n    const tests = selectedCatalogTests.map(test => ({\n      testName: test.test_name,\n      testCategory: test.category,\n      price: test.price,\n    }));\n\n    createOrderMutation.mutate({ orderData, tests });\n  };\n\n  const filteredOrders = (pathologyOrders || []).filter((orderData: any) => {\n    if (!orderData?.order) return false;\n    const order = orderData.order;\n    const patient = orderData.patient;\n    const matchesSearch = order.orderId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         patient?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         patient?.patientId?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const filteredCatalog = (testCatalog || []).filter((test: any) => {\n    const matchesCategory = selectedCategory === \"all\" || test.category === selectedCategory;\n    const matchesSearch = test.test_name?.toLowerCase().includes(catalogSearchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'collected':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'ordered':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const getPatientName = (patientId: string) => {\n    const patient = (patients || []).find((p: Patient) => p.id === patientId);\n    return patient?.name || \"Unknown Patient\";\n  };\n\n  const getDoctorName = (doctorId: string | null) => {\n    if (!doctorId) return \"External Patient\";\n    const doctor = (doctors || []).find((d: Doctor) => d.id === doctorId);\n    return doctor?.name || \"Unknown Doctor\";\n  };\n\n  const toggleTestSelection = (test: any) => {\n    const isSelected = selectedCatalogTests.some(t => t.test_name === test.test_name);\n    if (isSelected) {\n      setSelectedCatalogTests(prev => prev.filter(t => t.test_name !== test.test_name));\n    } else {\n      setSelectedCatalogTests(prev => [...prev, test]);\n    }\n  };\n\n  const getTotalPrice = () => {\n    return selectedCatalogTests.reduce((total, test) => total + test.price, 0);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Pathology Tests\"\n        searchPlaceholder=\"Search tests by name or ID...\"\n        onSearch={setSearchQuery}\n        onNewAction={() => setIsNewTestOpen(true)}\n        newActionLabel=\"Order Test\"\n      />\n      \n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Pathology Orders</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Total: {filteredOrders.length} orders\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"filter-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"ordered\">Ordered</SelectItem>\n                    <SelectItem value=\"collected\">Collected</SelectItem>\n                    <SelectItem value=\"processing\">Processing</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                <p className=\"text-sm text-muted-foreground mt-2\">Loading tests...</p>\n              </div>\n            ) : filteredOrders.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <TestTube className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No orders found</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  No pathology orders match your current search criteria.\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Order ID</TableHead>\n                    <TableHead>Patient</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Date Ordered</TableHead>\n                    <TableHead>Total Price</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredOrders.map((orderData: any) => {\n                    const order = orderData.order;\n                    const patient = orderData.patient;\n                    const doctor = orderData.doctor;\n                    return (\n                      <TableRow key={order.id} data-testid={`order-row-${order.id}`}>\n                        <TableCell className=\"font-medium\">{order.orderId}</TableCell>\n                        <TableCell>{patient?.name || \"Unknown Patient\"}</TableCell>\n                        <TableCell>{doctor?.name || \"External Patient\"}</TableCell>\n                        <TableCell>{formatDate(order.orderedDate)}</TableCell>\n                        <TableCell>₹{order.totalPrice}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                            {order.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setSelectedOrder(order)}\n                              data-testid={`view-order-${order.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Select \n                              value={order.status} \n                              onValueChange={(newStatus) => updateOrderStatusMutation.mutate({ orderId: order.id, status: newStatus })}\n                              disabled={updateOrderStatusMutation.isPending}\n                            >\n                              <SelectTrigger className=\"w-32\" data-testid={`status-select-${order.id}`}>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"ordered\">Ordered</SelectItem>\n                                <SelectItem value=\"collected\">Collected</SelectItem>\n                                <SelectItem value=\"processing\">Processing</SelectItem>\n                                <SelectItem value=\"completed\">Completed</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Order New Test Dialog */}\n      <Dialog open={isNewTestOpen} onOpenChange={setIsNewTestOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Order Pathology Tests</DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"patientId\">Patient *</Label>\n                <PatientSearchCombobox\n                  value={form.watch(\"patientId\")}\n                  onValueChange={(value) => form.setValue(\"patientId\", value)}\n                  patients={patients || []}\n                />\n                {form.formState.errors.patientId && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.patientId.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"doctorId\">Doctor (Optional for External Patients)</Label>\n                <Select \n                  onValueChange={(value) => form.setValue(\"doctorId\", value)}\n                  data-testid=\"select-doctor\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select doctor (optional)\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"external\">External Patient (No Doctor)</SelectItem>\n                    {(doctors || []).map((doctor: Doctor) => (\n                      <SelectItem key={doctor.id} value={doctor.id}>\n                        {doctor.name} - {doctor.specialization}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Select Tests from Catalog</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {(categories || []).map((category: string) => (\n                        <SelectItem key={category} value={category}>{category}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search tests by name...\"\n                      value={catalogSearchQuery}\n                      onChange={(e) => setCatalogSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"search-catalog-tests\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg max-h-64 overflow-y-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">Select</TableHead>\n                      <TableHead>Test Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Price (₹)</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredCatalog.map((test: any, index: number) => {\n                      const isSelected = selectedCatalogTests.some(t => t.test_name === test.test_name);\n                      return (\n                        <TableRow \n                          key={`${test.category}-${test.test_name}-${index}`}\n                          className={isSelected ? \"bg-blue-50\" : \"\"}\n                        >\n                          <TableCell>\n                            <input\n                              type=\"checkbox\"\n                              checked={isSelected}\n                              onChange={() => toggleTestSelection(test)}\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            />\n                          </TableCell>\n                          <TableCell className=\"font-medium\">{test.test_name}</TableCell>\n                          <TableCell>{test.category}</TableCell>\n                          <TableCell>₹{test.price}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {selectedCatalogTests.length > 0 && (\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Selected Tests ({selectedCatalogTests.length})</h4>\n                  <div className=\"space-y-1\">\n                    {selectedCatalogTests.map((test, index) => (\n                      <div key={index} className=\"flex justify-between text-sm\">\n                        <span>{test.test_name}</span>\n                        <span>₹{test.price}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"border-t border-blue-200 mt-2 pt-2 font-medium text-blue-900\">\n                    Total: ₹{getTotalPrice()}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"remarks\">Remarks</Label>\n              <Textarea\n                {...form.register(\"remarks\")}\n                placeholder=\"Enter any additional remarks or instructions\"\n                data-testid=\"input-remarks\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewTestOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createOrderMutation.isPending || selectedCatalogTests.length === 0}\n                data-testid=\"button-order-tests\"\n              >\n                {createOrderMutation.isPending ? \"Ordering...\" : `Order ${selectedCatalogTests.length} Test(s)`}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Order Details Dialog */}\n      {selectedOrder && <OrderDetailsDialog order={selectedOrder} onClose={() => setSelectedOrder(null)} />}\n    </div>\n  );\n}","size_bytes":30066},"client/src/pages/patient-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  User, \n  Calendar, \n  Phone, \n  Mail, \n  MapPin, \n  Stethoscope, \n  TestTube, \n  X, \n  Heart, \n  Bed,\n  FileText,\n  ClipboardList,\n  Plus,\n  Eye,\n  Clock,\n  Minus,\n  Edit,\n  Settings,\n  Printer,\n  Search\n} from \"lucide-react\";\nimport { insertPatientServiceSchema, insertAdmissionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ReceiptTemplate } from \"@/components/receipt-template\";\nimport type { Patient, PatientService, Admission, AdmissionEvent, Doctor } from \"@shared/schema\";\n\nexport default function PatientDetail() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const patientId = params.id;\n\n  const [isServiceDialogOpen, setIsServiceDialogOpen] = useState(false);\n  const [isAdmissionDialogOpen, setIsAdmissionDialogOpen] = useState(false);\n  const [isDischargeDialogOpen, setIsDischargeDialogOpen] = useState(false);\n  const [isRoomUpdateDialogOpen, setIsRoomUpdateDialogOpen] = useState(false);\n  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [selectedAdmissionForPayment, setSelectedAdmissionForPayment] = useState(\"\");\n  const [selectedServiceType, setSelectedServiceType] = useState<string>(\"\");\n  const [selectedServiceCategory, setSelectedServiceCategory] = useState<string>(\"\");\n  const [isDiscountDialogOpen, setIsDiscountDialogOpen] = useState(false);\n  const [discountAmount, setDiscountAmount] = useState(\"\");\n  const [discountReason, setDiscountReason] = useState(\"\");\n  const [serviceSearchQuery, setServiceSearchQuery] = useState(\"\");\n\n  // Fetch hospital settings for receipts\n  const { data: hospitalSettings } = useQuery({\n    queryKey: [\"/api/settings/hospital\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/settings/hospital\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch hospital settings\");\n      return response.json();\n    },\n  });\n\n  // Hospital info for receipts\n  const hospitalInfo = {\n    name: hospitalSettings?.name || \"MedCare Pro Hospital\",\n    address: hospitalSettings?.address || \"123 Healthcare Street, Medical District, City - 123456\",\n    phone: hospitalSettings?.phone || \"+91 98765 43210\",\n    email: hospitalSettings?.email || \"info@medcarepro.com\",\n    registrationNumber: hospitalSettings?.registrationNumber || \"\",\n    logo: hospitalSettings?.logoPath || undefined\n  };\n\n  // Helper function to determine service type for receipt numbering\n  const getServiceType = (eventType: string, event: any) => {\n    switch (eventType) {\n      case 'service':\n        // Check if it's OPD service\n        if (event.serviceType === 'opd' || event.serviceName === 'OPD Consultation') {\n          return 'opd';\n        }\n        // Check specific service categories\n        const category = event.category?.toLowerCase();\n        if (category === 'discharge' || event.description?.toLowerCase().includes('discharge')) {\n          return 'discharge';\n        }\n        if (category === 'room_transfer' || event.description?.toLowerCase().includes('transfer')) {\n          return 'room_transfer';\n        }\n        return 'service';\n      case 'pathology':\n        return 'pathology';\n      case 'admission':\n        return 'admission';\n      case 'payment':\n        return 'payment';\n      case 'discount':\n        return 'discount';\n      default:\n        return eventType;\n    }\n  };\n\n  // Helper function to get daily count for receipt numbering from API\n  const getDailyCountFromAPI = async (eventType: string, eventDate: string, currentEvent: any): Promise<number> => {\n    try {\n      const serviceType = getServiceType(eventType, currentEvent);\n      const response = await fetch(`/api/receipts/daily-count/${serviceType}/${eventDate}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) {\n        console.error('Failed to get daily count from API');\n        return 1;\n      }\n\n      const data = await response.json();\n      return data.count;\n    } catch (error) {\n      console.error('Error fetching daily count:', error);\n      return 1;\n    }\n  };\n\n\n\n  const generateReceiptData = (event: any, eventType: string) => {\n    // Helper function to get receipt number from different sources\n    const getReceiptNumber = () => {\n      // For services, always use the stored receiptNumber\n      if (eventType === 'service' && event.receiptNumber) {\n        return event.receiptNumber;\n      }\n\n      // For pathology, try to get from order data\n      if (eventType === 'pathology') {\n        if (event.rawData?.order?.receiptNumber) {\n          return event.rawData.order.receiptNumber;\n        }\n        if (event.order?.receiptNumber) {\n          return event.order.receiptNumber;\n        }\n        if (event.receiptNumber) {\n          return event.receiptNumber;\n        }\n      }\n\n      // For admission events, try to get from admission event data\n      if (eventType === 'admission_event') {\n        if (event.rawData?.event?.receiptNumber) {\n          return event.rawData.event.receiptNumber;\n        }\n        if (event.receiptNumber) {\n          return event.receiptNumber;\n        }\n      }\n\n      // For admission fallback, try to get from admission data\n      if (eventType === 'admission') {\n        if (event.rawData?.admission?.receiptNumber) {\n          return event.rawData.admission.receiptNumber;\n        }\n        if (event.receiptNumber) {\n          return event.receiptNumber;\n        }\n      }\n\n      // For other event types, try direct access\n      if (event.receiptNumber) {\n        return event.receiptNumber;\n      }\n\n      return 'RECEIPT-NOT-FOUND';\n    };\n\n    // Helper function to get doctor name from doctor ID\n    const getDoctorName = () => {\n      // First try to get doctor name from event directly\n      if (event.doctorName) {\n        return event.doctorName;\n      }\n\n      // Try to get from nested doctor object\n      if (event.doctor?.name) {\n        return event.doctor.name;\n      }\n\n      // Try to resolve doctor ID from the doctors array\n      if (event.doctorId && doctors && doctors.length > 0) {\n        const doctor = doctors.find((d: Doctor) => d.id === event.doctorId);\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      // Try to get from rawData for pathology orders\n      if (eventType === 'pathology' && event.rawData?.order?.doctorId) {\n        const doctor = doctors.find((d: Doctor) => d.id === event.rawData.order.doctorId);\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      // Try to get from rawData for admission events\n      if (eventType === 'admission_event' && event.rawData?.event?.doctorId) {\n        const doctor = doctors.find((d: Doctor) => d.id === event.rawData.event.doctorId);\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      // Try to get from rawData for admission fallback\n      if (eventType === 'admission' && event.rawData?.admission?.doctorId) {\n        const doctor = doctors.find((d: Doctor) => d.id === event.rawData.admission.doctorId);\n        if (doctor) {\n          return doctor.name;\n        }\n      }\n\n      return 'No Doctor Assigned';\n    };\n\n    // Base receipt data structure\n    const baseReceiptData = {\n      type: eventType as 'service' | 'pathology' | 'admission' | 'payment' | 'discount',\n      id: event.id,\n      title: event.title || event.serviceName || event.testName || event.description || 'Service',\n      date: event.sortTimestamp,\n      amount: event.amount || event.price || event.totalPrice || 0,\n      description: event.description || event.serviceName || event.testName || '',\n      patientName: patient?.name || 'Unknown Patient',\n      patientId: patient?.patientId || 'Unknown ID',\n      details: {\n        ...event,\n        patientAge: patient?.age,\n        patientGender: patient?.gender,\n        doctorName: getDoctorName(),\n        receiptNumber: getReceiptNumber()\n      }\n    };\n\n    return baseReceiptData;\n  };\n\n  // Fetch patient details\n  const { data: patient } = useQuery<Patient>({\n    queryKey: [\"/api/patients\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/patients/${patientId}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patient\");\n      return response.json();\n    },\n  });\n\n  // Fetch patient services history\n  const { data: services } = useQuery<PatientService[]>({\n    queryKey: [\"/api/patient-services\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/patient-services?patientId=${patientId}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patient services\");\n      return response.json();\n    },\n  });\n\n  // Fetch all services for service selection\n  const { data: allServices } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/services\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch services\");\n      return response.json();\n    },\n  });\n\n  // Fetch patient admissions history\n  const { data: admissions = [] } = useQuery({\n    queryKey: [\"/api/admissions\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/admissions?patientId=${patientId}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patient admissions\");\n      return response.json();\n    },\n  });\n\n  // Fetch pathology orders for this patient\n  const { data: pathologyOrders = [] } = useQuery({\n    queryKey: [\"/api/pathology/patient\", patientId],\n    queryFn: async () => {\n      const response = await fetch(`/api/pathology/patient/${patientId}`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch pathology orders\");\n      return response.json();\n    },\n    refetchInterval: 5000, // Refetch every 5 seconds to get latest orders\n  });\n\n  // Fetch admission events for detailed history\n  const { data: admissionEventsMap = {} } = useQuery({\n    queryKey: [\"/api/admission-events\", patientId],\n    queryFn: async () => {\n      const eventsMap: Record<string, AdmissionEvent[]> = {};\n\n      if (admissions && admissions.length > 0) {\n        await Promise.all(\n          admissions.map(async (admission: Admission) => {\n            try {\n              const response = await fetch(`/api/admissions/${admission.id}/events`, {\n                headers: {\n                  \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n                },\n              });\n              if (response.ok) {\n                const events = await response.json();\n                eventsMap[admission.id] = events;\n              }\n            } catch (error) {\n              console.error(`Failed to fetch events for admission ${admission.id}:`, error);\n            }\n          })\n        );\n      }\n\n      return eventsMap;\n    },\n    enabled: !!admissions && admissions.length > 0,\n  });\n\n  // Fetch doctors for service assignment\n  const { data: doctors = [] } = useQuery<Doctor[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  // Fetch room types for admission form\n  const { data: roomTypes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/room-types\"],\n  });\n\n  // Fetch rooms for admission form\n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  // Fetch all current admissions to check room occupancy in real-time\n  const { data: allCurrentAdmissions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/inpatients/currently-admitted\"],\n  });\n\n  const serviceForm = useForm({\n    mode: \"onChange\",\n    defaultValues: {\n      patientId: patientId || \"\",\n      serviceType: \"\",\n      serviceName: \"\",\n      scheduledDate: \"\", // Will be set dynamically when dialog opens\n      scheduledTime: \"\", // Will be set dynamically when dialog opens\n      doctorId: \"\",\n      notes: \"\",\n      price: 0,\n    },\n  });\n\n  const admissionForm = useForm({\n    // Remove zodResolver to handle validation manually since reason is now optional\n    defaultValues: {\n      patientId: patientId,\n      doctorId: \"\",\n      currentWardType: \"\",\n      currentRoomNumber: \"\",\n      admissionDate: \"\", // Will be set dynamically when dialog opens\n      reason: \"\",\n      diagnosis: \"\",\n      notes: \"\",\n      dailyCost: 0,\n      initialDeposit: 0,\n    },\n  });\n\n  const roomUpdateForm = useForm({\n    defaultValues: {\n      roomNumber: \"\",\n      wardType: \"\",\n    },\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Generate receipt number before sending to API with correct format\n      const serviceType = getServiceType('service', data);\n      const eventDate = new Date(data.scheduledDate).toISOString().split('T')[0];\n      const count = await getDailyCountFromAPI('service', eventDate, data);\n\n      // Format: YYMMDD-TYPE-NNNN (correct format)\n      const dateObj = new Date(eventDate);\n      const yymmdd = dateObj.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n\n      let typeCode = '';\n      if (serviceType === 'opd') {\n        typeCode = 'OPD';\n      } else {\n        typeCode = 'SER';\n      }\n\n      const receiptNumber = `${yymmdd}-${typeCode}-${String(count).padStart(4, '0')}`;\n\n      const serviceDataWithReceipt = {\n        ...data,\n        receiptNumber: receiptNumber,\n      };\n\n      const response = await fetch(\"/api/patient-services\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(serviceDataWithReceipt),\n      });\n      if (!response.ok) throw new Error(\"Failed to create service\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patient-services\", patientId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n      setIsServiceDialogOpen(false);\n      setSelectedServiceType(\"\");\n      setSelectedServiceCategory(\"\");\n      serviceForm.reset({\n        patientId: patientId || \"\",\n        serviceType: \"\",\n        serviceName: \"\",\n        scheduledDate: \"\",\n        scheduledTime: \"\",\n        doctorId: \"\",\n        notes: \"\",\n        price: 0,\n      });\n      toast({\n        title: \"Service scheduled successfully\",\n        description: \"The service has been added to the patient's schedule.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error scheduling service\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createAdmissionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/admissions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create admission\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\", patientId] });\n      setIsAdmissionDialogOpen(false);\n      admissionForm.reset();\n      toast({\n        title: \"Admission created successfully\",\n        description: \"The patient has been admitted.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Admission creation error:\", error);\n      \n      // Handle room occupancy error specifically\n      let errorMessage = \"Please try again.\";\n      if (error.message && error.message.includes(\"already occupied\")) {\n        errorMessage = error.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Error creating admission\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onServiceSubmit = (data: any) => {\n    console.log(\"=== FORM SUBMISSION DEBUG ===\");\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Selected service type:\", selectedServiceType);\n    console.log(\"Selected service category:\", selectedServiceCategory);\n    console.log(\"Form errors:\", serviceForm.formState.errors);\n    console.log(\"Form is valid:\", serviceForm.formState.isValid);\n    console.log(\"Doctors available:\", doctors);\n\n    // Custom validation for Select fields that aren't properly registered\n    let hasErrors = false;\n\n    // Validate doctor selection\n    if (!data.doctorId || data.doctorId === \"none\") {\n      serviceForm.setError(\"doctorId\", { \n        type: \"required\", \n        message: selectedServiceType === \"opd\" ? \"Doctor Required - please select a consulting doctor\" : \"Doctor Required - please select a doctor\" \n      });\n      hasErrors = true;\n    } else {\n      serviceForm.clearErrors(\"doctorId\");\n    }\n\n    // For non-OPD services, validate service selection and price\n    if (selectedServiceType !== \"opd\") {\n      if (!data.serviceType || !data.serviceName) {\n        serviceForm.setError(\"serviceType\", { \n          type: \"required\", \n          message: \"Service Required - please select a service\" \n        });\n        hasErrors = true;\n      } else {\n        serviceForm.clearErrors(\"serviceType\");\n      }\n\n      // Validate price field for non-OPD services\n      if (!data.price || data.price <= 0) {\n        serviceForm.setError(\"price\", { \n          type: \"required\", \n          message: \"Price is required and must be greater than 0\" \n        });\n        hasErrors = true;\n      } else {\n        serviceForm.clearErrors(\"price\");\n      }\n    }\n\n    // If there are validation errors, don't submit\n    if (hasErrors) {\n      return;\n    }\n\n    let serviceData;\n\n    if (selectedServiceType === \"opd\") {\n      const selectedDoctor = doctors.find((d: Doctor) => d.id === data.doctorId);\n      const consultationFee = selectedDoctor?.consultationFee || 0;\n\n      serviceData = {\n        ...data,\n        serviceId: `SRV-${Date.now()}`,\n        serviceName: \"OPD Consultation\",\n        serviceType: \"opd\",\n        price: consultationFee,\n        doctorId: data.doctorId,\n      };\n    } else {\n      serviceData = {\n        ...data,\n        serviceId: `SRV-${Date.now()}`,\n        // Convert \"none\" back to empty string for the API\n        doctorId: data.doctorId === \"none\" ? \"\" : data.doctorId,\n      };\n    }\n\n    console.log(\"Final service data to submit:\", serviceData);\n    console.log(\"About to call mutation...\");\n\n    try {\n      createServiceMutation.mutate(serviceData);\n      console.log(\"Mutation called successfully\");\n    } catch (error) {\n      console.error(\"Error calling mutation:\", error);\n      toast({\n        title: \"Submission Error\",\n        description: \"Failed to submit form. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onAdmissionSubmit = (data: any) => {\n    // Validate required fields (reason is now optional)\n    const requiredFields = ['doctorId', 'currentWardType', 'admissionDate', 'dailyCost'];\n    const missingFields = requiredFields.filter(field => !data[field] || data[field] === '');\n\n    if (missingFields.length > 0) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: `Please fill in all required fields: ${missingFields.join(', ')}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const admissionData = {\n      ...data,\n      admissionId: `ADM-${Date.now()}`,\n    };\n    createAdmissionMutation.mutate(admissionData);\n  };\n\n  const dischargePatientMutation = useMutation({\n    mutationFn: async (currentAdmissionId: string) => {\n      const response = await fetch(`/api/admissions/${currentAdmissionId}/discharge`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n\n      if (!response.ok) throw new Error(\"Failed to discharge patient\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admission-events\"] });\n      setIsDischargeDialogOpen(false);\n      toast({\n        title: \"Patient discharged successfully\",\n        description: \"The patient has been discharged and the event has been recorded.\",\n      });\n    },\n  });\n\n  const updateRoomMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const currentAdmission = admissions?.find((adm: any) => adm.status === 'admitted');\n      if (!currentAdmission) throw new Error(\"No active admission found\");\n\n      const response = await fetch(`/api/admissions/${currentAdmission.id}/transfer`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({\n          roomNumber: data.roomNumber,\n          wardType: data.wardType,\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to transfer room\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admission-events\"] });\n      setIsRoomUpdateDialogOpen(false);\n      roomUpdateForm.reset();\n      toast({\n        title: \"Room transfer completed\",\n        description: \"Patient has been transferred to the new room.\",\n      });\n    },\n  });\n\n  const addPaymentMutation = useMutation({\n    mutationFn: async (data: { admissionId: string, amount: number }) => {\n      const admission = admissions?.find((adm: any) => adm.id === data.admissionId);\n      if (!admission) throw new Error(\"Admission not found\");\n\n      const currentAdditionalPayments = admission.additionalPayments || 0;\n      const newTotal = currentAdditionalPayments + data.amount;\n\n      const response = await fetch(`/api/admissions/${data.admissionId}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({ \n          additionalPayments: newTotal,\n          lastPaymentDate: new Date().toISOString(),\n          lastPaymentAmount: data.amount\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to add payment\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\"] });\n      setIsPaymentDialogOpen(false);\n      setPaymentAmount(\"\");\n      setSelectedAdmissionForPayment(\"\");\n      toast({\n        title: \"Payment added successfully\",\n        description: \"The payment has been recorded.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error adding payment\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addDiscountMutation = useMutation({\n    mutationFn: async (data: { admissionId: string, amount: number, reason: string }) => {\n      const admission = admissions?.find((adm: any) => adm.id === data.admissionId);\n      if (!admission) throw new Error(\"Admission not found\");\n\n      const currentDiscounts = admission.totalDiscount || 0;\n      const newTotal = currentDiscounts + data.amount;\n\n      const response = await fetch(`/api/admissions/${data.admissionId}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify({ \n          totalDiscount: newTotal,\n          lastDiscountDate: new Date().toISOString(),\n          lastDiscountAmount: data.amount,\n          lastDiscountReason: data.reason\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to add discount\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admissions\", patientId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n      setIsDiscountDialogOpen(false);\n      setDiscountAmount(\"\");\n      setDiscountReason(\"\");\n      toast({\n        title: \"Discount added successfully\",\n        description: \"The discount has been applied.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error adding discount\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onDischargePatient = () => {\n    const currentAdmission = admissions?.find((adm: any) => adm.status === 'admitted');\n    if (currentAdmission) {\n      dischargePatientMutation.mutate(currentAdmission.id);\n    }\n  };\n\n  const onRoomUpdate = (data: any) => {\n    // Validate required fields\n    const requiredFields = ['wardType', 'roomNumber'];\n    const missingFields = requiredFields.filter(field => !data[field] || data[field] === '');\n\n    if (missingFields.length > 0) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: `Please fill in all required fields: ${missingFields.join(', ')}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateRoomMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in-progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'scheduled':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n\n    // Handle different date formats and ensure local timezone\n    const date = new Date(dateString);\n\n    // Check if date is valid\n    if (isNaN(date.getTime())) return \"N/A\";\n\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\", \n      day: \"numeric\",\n      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    });\n  };\n\n  // Service categories mapping (matching service management)\n  const serviceCategories = [\n    { key: 'diagnostics', label: 'Diagnostic Services', icon: Heart },\n    { key: 'procedures', label: 'Medical Procedures', icon: Stethoscope },\n    { key: 'operations', label: 'Surgical Operations', icon: X },\n    { key: 'misc', label: 'Miscellaneous Services', icon: Settings }\n  ];\n\n  // Filter services by category and search query\n  const getFilteredServices = (category: string) => {\n    if (!allServices) return [];\n    \n    let filtered = allServices.filter(s => s.isActive);\n    \n    // Filter by category\n    if (category && category !== \"all\") {\n      filtered = filtered.filter(s => s.category === category);\n    }\n    \n    // Filter by search query\n    if (serviceSearchQuery.trim()) {\n      filtered = filtered.filter(s => \n        s.name.toLowerCase().includes(serviceSearchQuery.toLowerCase()) ||\n        (s.description && s.description.toLowerCase().includes(serviceSearchQuery.toLowerCase()))\n      );\n    }\n    \n    return filtered;\n  };\n\n\n  if (!patient) {\n    return <div className=\"flex items-center justify-center h-64\">Loading patient details...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title={`Patient: ${patient.name}`}\n      />\n\n      <div className=\"p-6\">\n        {/* Patient Info Header */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Patient Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-3 gap-6\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Name</p>\n                <p className=\"font-medium\">{patient.name}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Age</p>\n                <p className=\"font-medium\">{patient.age} years</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Gender</p>\n                <p className=\"font-medium capitalize\">{patient.gender}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Phone</p>\n                <p className=\"font-medium\">{patient.phone}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Patient ID</p>\n                <p className=\"font-medium\">{patient.patientId}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Emergency Contact</p>\n                <p className=\"font-medium\">{patient.emergencyContact || \"N/A\"}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-medium\">{patient.email || \"N/A\"}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Address</p>\n                <p className=\"font-medium\">{patient.address || \"N/A\"}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Room No</p>\n                <p className=\"font-medium\">\n                  {(() => {\n                    const currentAdmission = admissions?.find((adm: any) => adm.status === 'admitted');\n                    return currentAdmission?.currentRoomNumber || \"N/A\";\n                  })()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-3\">\n              <Button \n                onClick={() => {\n                  console.log(\"=== SCHEDULE OPD CLICKED ===\");\n\n                  // Set current LOCAL date and time when opening the dialog\n                  const now = new Date();\n                  const currentDate = now.getFullYear() + '-' + \n                    String(now.getMonth() + 1).padStart(2, '0') + '-' + \n                    String(now.getDate()).padStart(2, '0');\n                  const currentTime = String(now.getHours()).padStart(2, '0') + ':' + \n                    String(now.getMinutes()).padStart(2, '0');\n\n                  setSelectedServiceType(\"opd\");\n                  setSelectedServiceCategory(\"\");\n                  serviceForm.reset({\n                    patientId: patientId || \"\",\n                    serviceType: \"opd\",\n                    serviceName: \"OPD Consultation\",\n                    scheduledDate: currentDate,\n                    scheduledTime: currentTime,\n                    doctorId: \"\",\n                    notes: \"\",\n                    price: 0,\n                  });\n\n                  console.log(`Set current date/time: ${currentDate} ${currentTime}`);\n                  setIsServiceDialogOpen(true);\n                }}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-schedule-opd\"\n              >\n                <Stethoscope className=\"h-4 w-4\" />\n                Schedule OPD\n              </Button>\n\n              <Button \n                onClick={() => navigate(`/pathology?patientId=${patientId}&patientName=${encodeURIComponent(patient?.name || '')}`)}\n                variant=\"outline\"\n                className=\"flex items-center gap-2 bg-pink-600 hover:bg-pink-700 text-white\"\n                data-testid=\"button-pathology-tests\"\n              >\n                <TestTube className=\"h-4 w-4\" />\n                Order Pathology Tests\n              </Button>\n\n              <Button \n                onClick={() => {\n                  // Set current LOCAL date and time when opening service dialog\n                  const now = new Date();\n                  const currentDate = now.getFullYear() + '-' + \n                    String(now.getMonth() + 1).padStart(2, '0') + '-' + \n                    String(now.getDate()).padStart(2, '0');\n                  const currentTime = String(now.getHours()).padStart(2, '0') + ':' + \n                    String(now.getMinutes()).padStart(2, '0');\n\n                  // Reset service type and category for general service\n                  setSelectedServiceType(\"\");\n                  setSelectedServiceCategory(\"\");\n                  // Reset form completely first\n                  serviceForm.reset({\n                    patientId: patientId || \"\",\n                    serviceType: \"\",\n                    serviceName: \"\",\n                    scheduledDate: currentDate,\n                    scheduledTime: currentTime,\n                    doctorId: \"\",\n                    notes: \"\",\n                    price: 0,\n                  });\n\n                  setIsServiceDialogOpen(true);\n                }}\n                variant=\"outline\"\n                className=\"flex items-center gap-2 bg-purple-500 hover:bg-purple-600 text-white\"\n                data-testid=\"button-add-medical-service\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Service\n              </Button>\n\n              {/* Admission/Discharge Button */}\n              {(() => {\n                const currentAdmission = admissions?.find((adm: any) => adm.status === 'admitted');\n\n                if (currentAdmission) {\n                  // Patient is admitted - show discharge button\n                  return (\n                    <Button \n                      onClick={() => setIsDischargeDialogOpen(true)}\n                      className=\"flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white\"\n                      data-testid=\"button-discharge-patient\"\n                    >\n                      <Bed className=\"h-4 w-4\" />\n                      Discharge Patient\n                    </Button>\n                  );\n                } else {\n                  // Patient is not admitted - show admit button\n                  return (\n                    <Button \n                      onClick={() => {\n                        // Set current LOCAL date when opening admission dialog\n                        const now = new Date();\n                        const currentDate = now.getFullYear() + '-' + \n                          String(now.getMonth() + 1).padStart(2, '0') + '-' + \n                          String(now.getDate()).padStart(2, '0');\n\n                        admissionForm.setValue(\"admissionDate\", currentDate);\n                        setIsAdmissionDialogOpen(true);\n                      }}\n                      className=\"flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white\"\n                      data-testid=\"button-admit-patient\"\n                    >\n                      <Bed className=\"h-4 w-4\" />\n                      Admit Patient\n                    </Button>\n                  );\n                }\n              })()}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Financial Monitoring */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n                </svg>\n                Financial Summary\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => {\n                    setDiscountAmount(\"\");\n                    setDiscountReason(\"\");\n                    setIsDiscountDialogOpen(true);\n                  }}\n                  className=\"flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white\"\n                >\n                  <Minus className=\"h-4 w-4\" />\n                  Add Discount\n                </Button>\n                <Button\n                  size=\"sm\"\n                  onClick={() => {\n                    setPaymentAmount(\"\");\n                    setSelectedAdmissionForPayment(\"\");\n                    setIsPaymentDialogOpen(true);\n                  }}\n                  className=\"flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Payment\n                </Button>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-3 gap-6\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Charges</p>\n                <p className=\"text-2xl font-bold text-blue-700\">\n                  ₹{(() => {\n                    let totalCharges = 0;\n                    const allAdmissions = admissions || [];\n\n                    // Add room charges from all admissions\n                    allAdmissions.forEach((admission: any) => {\n                      const admissionDate = new Date(admission.admissionDate);\n                      const endDate = admission.dischargeDate ? new Date(admission.dischargeDate) : new Date();\n                      const daysDiff = Math.max(1, Math.ceil((endDate.getTime() - admissionDate.getTime()) / (1000 * 3600 * 24)));\n                      totalCharges += (admission.dailyCost || 0) * daysDiff;\n                    });\n\n                    // Add service charges\n                    if (services) {\n                      totalCharges += services.reduce((sum: number, service: any) => sum + (service.price || 0), 0);\n                    }\n\n                    // Add pathology order charges\n                    if (pathologyOrders) {\n                      totalCharges += pathologyOrders.reduce((sum: number, orderData: any) => {\n                        const order = orderData.order || orderData;\n                        return sum + (order.totalPrice || 0);\n                      }, 0);\n                    }\n\n                    return totalCharges.toLocaleString();\n                  })()}\n                </p>\n              </div>\n\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Paid</p>\n                <p className=\"text-2xl font-bold text-green-700\">\n                  ₹{(() => {\n                    // Get all admissions for this patient (including discharged ones)\n                    const allAdmissions = admissions || [];\n                    const totalPaid = allAdmissions.reduce((sum: number, adm: any) => {\n                      return sum + (adm.initialDeposit || 0) + (adm.additionalPayments || 0);\n                    }, 0);\n                    return totalPaid.toLocaleString();\n                  })()}\n                </p>\n              </div>\n\n              <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Balance</p>\n                <p className=\"text-2xl font-bold text-orange-700\">\n                  ₹{(() => {\n                    let totalCharges = 0;\n                    const allAdmissions = admissions || [];\n\n                    // Calculate total charges from all admissions\n                    allAdmissions.forEach((admission: any) => {\n                      const admissionDate = new Date(admission.admissionDate);\n                      const endDate = admission.dischargeDate ? new Date(admission.dischargeDate) : new Date();\n                      const daysDiff = Math.max(1, Math.ceil((endDate.getTime() - admissionDate.getTime()) / (1000 * 3600 * 24)));\n                      totalCharges += (admission.dailyCost || 0) * daysDiff;\n                    });\n\n                    if (services) {\n                      totalCharges += services.reduce((sum: number, service: any) => sum + (service.price || 0), 0);\n                    }\n\n                    // Add pathology order charges\n                    if (pathologyOrders) {\n                      totalCharges += pathologyOrders.reduce((sum: number, orderData: any) => {\n                        const order = orderData.order || orderData;\n                        return sum + (order.totalPrice || 0);\n                      }, 0);\n                    }\n\n                    // Calculate total paid from all admissions\n                    const totalPaid = allAdmissions.reduce((sum: number, adm: any) => {\n                      return sum + (adm.initialDeposit || 0) + (adm.additionalPayments || 0);\n                    }, 0);\n\n                    // Calculate total discounts from all admissions\n                    const totalDiscounts = allAdmissions.reduce((sum: number, adm: any) => {\n                      return sum + (adm.totalDiscount || 0);\n                    }, 0);\n\n                    const balance = totalCharges - totalPaid - totalDiscounts;\n\n                    return balance.toLocaleString();\n                  })()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Patient History Tabs */}\n        <Tabs defaultValue={window.location.hash === '#pathology' ? 'pathology' : 'services'} className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"services\">Services</TabsTrigger>\n            <TabsTrigger value=\"admissions\">Admissions</TabsTrigger>\n            <TabsTrigger value=\"pathology\">Pathology</TabsTrigger>\n            <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"services\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Service History</CardTitle>\n                <Button\n                  onClick={() => {\n                    // Set current LOCAL date and time when opening any service dialog\n                    const now = new Date();\n                    const currentDate = now.getFullYear() + '-' + \n                      String(now.getMonth() + 1).padStart(2, '0') + '-' + \n                      String(now.getDate()).padStart(2, '0');\n                    const currentTime = String(now.getHours()).padStart(2, '0') + ':' + \n                      String(now.getMinutes()).padStart(2, '0');\n\n                    // Reset service type and category\n                    setSelectedServiceType(\"\");\n                    setSelectedServiceCategory(\"\");\n                    // Reset form completely first\n                    serviceForm.reset({\n                      patientId: patientId || \"\",\n                      serviceType: \"\",\n                      serviceName: \"\",\n                      scheduledDate: currentDate,\n                      scheduledTime: currentTime,\n                      doctorId: \"\",\n                      notes: \"\",\n                      price: 0,\n                    });\n\n                    setIsServiceDialogOpen(true);\n                  }}\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-add-service\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Service\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {services && services.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Service</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Doctor</TableHead>\n                        <TableHead>Scheduled Date</TableHead>\n                        <TableHead>Price</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {services.map((service: any) => {\n                        // Find doctor name from doctors array using doctorId\n                        const doctor = doctors.find((d: Doctor) => d.id === service.doctorId);\n                        const doctorName = doctor ? doctor.name : (service.doctorId ? \"Unknown Doctor\" : \"No Doctor Assigned\");\n\n                        return (\n                          <TableRow key={service.id}>\n                            <TableCell className=\"font-medium\">{service.serviceName}</TableCell>\n                            <TableCell className=\"capitalize\">{service.serviceType}</TableCell>\n                            <TableCell>{doctorName}</TableCell>\n                            <TableCell>\n                              {formatDate(service.scheduledDate)}\n                              {service.scheduledTime && (\n                                <span className=\"text-muted-foreground ml-2\">\n                                  at {service.scheduledTime}\n                                </span>\n                              )}\n                            </TableCell>\n                            <TableCell>₹{service.price}</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-sm text-muted-foreground\">No services scheduled</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"admissions\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Admission History</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  {(() => {\n                    // Check if patient is currently admitted\n                    const currentAdmission = admissions?.find((adm: any) => adm.status === 'admitted');\n\n                    if (currentAdmission) {\n                      return (\n                        <>\n                          <div className=\"flex items-center gap-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg text-sm\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                            Admitted - Room {currentAdmission.roomNumber}\n                          </div>\n                          <Button \n                            onClick={() => setIsDischargeDialogOpen(true)}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex items-center gap-2 text-red-600 hover:text-red-700\"\n                            data-testid=\"button-discharge-patient\"\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                            Discharge Patient\n                          </Button>\n                          <Button \n                            onClick={() => setIsRoomUpdateDialogOpen(true)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex items-center gap-2\"\n                            data-testid=\"button-update-room\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                            Update Room\n                          </Button>\n                        </>\n                      );\n                    } else {\n                      return (\n                        <Button\n                          onClick={() => {\n                            // Set current LOCAL date when opening admission dialog  \n                            const now = new Date();\n                            const currentDate = now.getFullYear() + '-' + \n                              String(now.getMonth() + 1).padStart(2, '0') + '-' + \n                              String(now.getDate()).padStart(2, '0');\n\n                            admissionForm.setValue(\"admissionDate\", currentDate);\n                            setIsAdmissionDialogOpen(true);\n                          }}\n                          size=\"sm\"\n                          className=\"flex items-center gap-2\"\n                          data-testid=\"button-add-admission\"\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                          New Admission\n                        </Button>\n                      );\n                    }\n                  })()}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {admissions && admissions.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {admissions.map((admission: any) => {\n                      const events = admissionEventsMap[admission.id] || [];\n                      const doctor = doctors.find((d: Doctor) => d.id === admission.doctorId);\n\n                      return (\n                        <div key={admission.id} className=\"border rounded-lg p-4\">\n                          {/* Admission Episode Header */}\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center gap-4\">\n                              <h3 className=\"font-semibold text-lg\">{admission.admissionId}</h3>\n                              <Badge \n                                className={\n                                  admission.status === 'admitted' \n                                    ? 'bg-green-100 text-green-800' \n                                    : 'bg-gray-100 text-gray-800'\n                                }\n                                variant=\"secondary\"\n                              >\n                                {admission.status}\n                              </Badge>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {doctor ? doctor.name : \"No Doctor Assigned\"}\n                            </div>\n                          </div>\n\n                          {/* Admission Summary */}\n                          <div className=\"grid grid-cols-3 gap-4 mb-4 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">Current Room:</span>\n                              <div className=\"font-medium\">\n                                {admission.currentWardType && admission.currentRoomNumber \n                                  ? `${admission.currentWardType} (${admission.currentRoomNumber})`\n                                  : \"Not assigned\"\n                                }\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Admission Date:</span>\n                              <div className=\"font-medium\">\n                                {(() => {\n                                  // Handle SQLite datetime format as local time\n                                  let admissionDateStr = admission.admissionDate;\n                                  if (admissionDateStr.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)) {\n                                    admissionDateStr = admissionDateStr.replace(' ', 'T');\n                                  }\n                                  return new Date(admissionDateStr).toLocaleString('en-US', {\n                                    year: 'numeric',\n                                    month: 'short',\n                                    day: 'numeric',\n                                    hour: '2-digit',\n                                    minute: '2-digit',\n                                    hour12: true\n                                  });\n                                })()}\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">\n                                {admission.status === 'discharged' ? 'Discharge Date:' : 'Days Admitted:'}\n                              </span>\n                              <div className=\"font-medium\">\n                                {admission.dischargeDate ? \n                                  (() => {\n                                    // Handle SQLite datetime format as local time\n                                    let dischargeDateStr = admission.dischargeDate;\n                                    if (dischargeDateStr.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)) {\n                                      dischargeDateStr = dischargeDateStr.replace(' ', 'T');\n                                    }\n                                    return new Date(dischargeDateStr).toLocaleString('en-US', {\n                                      year: 'numeric',\n                                      month: 'short',\n                                      day: 'numeric',\n                                      hour: '2-digit',\n                                      minute: '2-digit',\n                                      hour12: true\n                                    });\n                                  })() :\n                                  (() => {\n                                    // Calculate days using local time\n                                    let admissionDateStr = admission.admissionDate;\n                                    if (admissionDateStr.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)) {\n                                      admissionDateStr = admissionDateStr.replace(' ', 'T');\n                                    }\n                                    return Math.ceil((new Date().getTime() - new Date(admissionDateStr).getTime()) / (1000 * 3600 * 24));\n                                  })()\n                                }\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Event Timeline */}\n                          {events.length > 0 && (\n                            <div>\n                              <h4 className=\"font-medium mb-2 text-sm text-muted-foreground\">Event History:</h4>\n                              <div className=\"space-y-2\">\n                                {events.map((event: AdmissionEvent) => (\n                                  <div key={event.id} className=\"flex items-start gap-3 text-sm\">\n                                    <div className={`w-2 h-2 rounded-full mt-2 ${\n                                      event.eventType === 'admit' ? 'bg-green-500' :\n                                      event.eventType === 'room_change' ? 'bg-blue-500' :\n                                      'bg-gray-500'\n                                    }`} />\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <span className=\"font-medium capitalize\">\n                                          {event.eventType.replace('_', ' ')}\n                                          {event.roomNumber && event.wardType && \n                                            ` - ${event.wardType} (${event.roomNumber})`\n                                          }\n                                        </span>\n                                        <span className=\"text-muted-foreground text-xs\">\n                                          {new Date(event.eventTime).toLocaleString('en-IN', {\n                                            month: 'short',\n                                            day: 'numeric',\n                                            hour: '2-digit',\n                                            minute: '2-digit',\n                                            hour12: true\n                                          })}\n                                        </span>\n                                      </div>\n                                      {event.notes && (\n                                        <div className=\"text-muted-foreground text-xs mt-1\">\n                                          {event.notes}\n                                        </div>\n                                      )}\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-sm text-muted-foreground\">No admissions recorded</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"pathology\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Pathology Orders</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {pathologyOrders && pathologyOrders.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Order ID</TableHead>\n                        <TableHead>Ordered Date</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Total Price</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {pathologyOrders.map((orderData: any) => {\n                        // Handle both direct order objects and nested order structure\n                        const order = orderData.order || orderData;\n                        if (!order || !order.orderId) return null;\n\n                        return (\n                          <TableRow key={order.id}>\n                            <TableCell className=\"font-medium\">{order.orderId}</TableCell>\n                            <TableCell>{formatDate(order.orderedDate)}</TableCell>\n                            <TableCell>\n                              <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                                {order.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>₹{order.totalPrice || 0}</TableCell>\n                            <TableCell>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => navigate(`/pathology`)}\n                                data-testid={`view-pathology-${order.id}`}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-sm text-muted-foreground\">No pathology orders found</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"timeline\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Patient Timeline</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(() => {\n                    console.log(\"=== TIMELINE DEBUG START ===\");\n\n                    // Helper function to normalize dates consistently\n                    const normalizeDate = (dateInput: any, source: string, id?: string): { date: string; timestamp: number } => {\n                      let dateStr: string;\n\n                      // Handle null/undefined\n                      if (!dateInput) {\n                        console.warn(`No date provided for ${source} ${id || 'unknown'}, using current time`);\n                        const now = new Date();\n                        return { date: now.toISOString(), timestamp: now.getTime() };\n                      }\n\n                      // Convert to string if it's not already\n                      if (typeof dateInput === 'string') {\n                        dateStr = dateInput;\n                      } else if (dateInput instanceof Date) {\n                        dateStr = dateInput.toISOString();\n                      } else {\n                        dateStr = String(dateInput);\n                      }\n\n                      console.log(`Normalizing date for ${source} ${id || 'unknown'}: \"${dateStr}\"`);\n\n                      // For registration dates, use the same UTC handling as other events\n                      if (source === 'registration') {\n                        // Handle SQLite datetime format: \"YYYY-MM-DD HH:MM:SS\" - convert to UTC\n                        if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)) {\n                          dateStr = dateStr.replace(' ', 'T') + 'Z';\n                          console.log(`Converted SQLite format (UTC) to: \"${dateStr}\"`);\n                        }\n                        // Handle date only format: \"YYYY-MM-DD\" - convert to UTC\n                        else if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n                          dateStr = dateStr + 'T00:00:00Z';\n                          console.log(`Converted date-only format (UTC) to: \"${dateStr}\"`);\n                        }\n                        // Handle datetime without timezone - add Z for UTC\n                        else if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/) && !dateStr.includes('Z') && !dateStr.includes('+')) {\n                          dateStr = dateStr + 'Z';\n                          console.log(`Added timezone to: \"${dateStr}\"`);\n                        }\n\n                        // Parse the date\n                        const parsed = new Date(dateStr);\n                        if (isNaN(parsed.getTime())) {\n                          console.error(`Failed to parse registration date \"${dateStr}\", using current time`);\n                          const now = new Date();\n                          return { date: now.toISOString(), timestamp: now.getTime() };\n                        }\n\n                        const timestamp = parsed.getTime();\n                        console.log(`Final normalized registration date: \"${dateStr}\" -> timestamp: ${timestamp} (${new Date(timestamp).toLocaleString()})`);\n\n                        return { date: dateStr, timestamp };\n                      }\n\n                      // For other sources (services, admissions, etc), use existing logic\n                      // Handle SQLite datetime format: \"YYYY-MM-DD HH:MM:SS\"\n                      if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/)) {\n                        dateStr = dateStr.replace(' ', 'T') + 'Z';\n                        console.log(`Converted SQLite format to: \"${dateStr}\"`);\n                      }\n                      // Handle date only format: \"YYYY-MM-DD\"\n                      else if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n                        dateStr = dateStr + 'T00:00:00Z';\n                        console.log(`Converted date-only format to: \"${dateStr}\"`);\n                      }\n                      // Handle datetime without timezone\n                      else if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/) && !dateStr.includes('Z') && !dateStr.includes('+')) {\n                        dateStr = dateStr + 'Z';\n                        console.log(`Added timezone to: \"${dateStr}\"`);\n                      }\n\n                      // Parse the date\n                      const parsed = new Date(dateStr);\n                      if (isNaN(parsed.getTime())) {\n                        console.error(`Failed to parse date \"${dateStr}\" for ${source} ${id || 'unknown'}, using current time`);\n                        const now = new Date();\n                        return { date: now.toISOString(), timestamp: now.getTime() };\n                      }\n\n                      const timestamp = parsed.getTime();\n                      console.log(`Final normalized date for ${source} ${id || 'unknown'}: \"${dateStr}\" -> timestamp: ${timestamp} (${new Date(timestamp).toLocaleString()})`);\n\n                      return { date: dateStr, timestamp };\n                    };\n\n                    // Create timeline events array\n                    const timelineEvents = [];\n\n                    // Add registration event with IST correction\n                    const regNormalized = normalizeDate(patient.createdAt, 'registration');\n                    // Subtract 5.5 hours (19800000 ms) to correct the timezone display\n                    const istTimestamp = regNormalized.timestamp - (5.5 * 60 * 60 * 1000);\n                    timelineEvents.push({\n                      id: 'registration',\n                      type: 'registration',\n                      title: 'Patient Registered',\n                      date: regNormalized.date,\n                      description: `Patient ID: ${patient.patientId}`,\n                      color: 'bg-blue-500',\n                      sortTimestamp: istTimestamp\n                    });\n\n                    // Add services with proper date normalization\n                    if (services && services.length > 0) {\n                      console.log(\"Processing services for timeline:\", services.length);\n                      services.forEach((service: any) => {\n                        // Priority: createdAt > constructed date from scheduled fields\n                        let primaryDate = service.createdAt;\n                        if (!primaryDate && service.scheduledDate) {\n                          if (service.scheduledTime) {\n                            primaryDate = `${service.scheduledDate}T${service.scheduledTime}:00`;\n                          } else {\n                            primaryDate = `${service.scheduledDate}T00:00:00`;\n                          }\n                        }\n\n                        const serviceNormalized = normalizeDate(primaryDate, 'service', service.id);\n\n                        timelineEvents.push({\n                          id: service.id,\n                          type: 'service',\n                          title: service.serviceName,\n                          date: serviceNormalized.date,\n                          description: `Status: ${service.status} • Cost: ₹${service.price || 0}`,\n                          color: 'bg-green-500',\n                          sortTimestamp: serviceNormalized.timestamp,\n                          rawData: { service, primaryDate }, // Debug info\n                          // Include all service fields directly in the event for receipt access\n                          receiptNumber: service.receiptNumber,\n                          serviceName: service.serviceName,\n                          price: service.price,\n                          serviceType: service.serviceType,\n                          doctorId: service.doctorId\n                        });\n                      });\n                    }\n\n                    // Add admission events\n                    if (admissions && admissions.length > 0) {\n                      console.log(\"Processing admissions for timeline:\", admissions.length);\n                      admissions.forEach((admission: any) => {\n                        const events = admissionEventsMap[admission.id] || [];\n                        const doctor = doctors.find((d: Doctor) => d.id === admission.doctorId);\n                        const doctorName = doctor ? doctor.name : \"No Doctor Assigned\";\n\n                        console.log(`Processing admission ${admission.id} with ${events.length} events`);\n\n                        // Add events from admission events table\n                        events.forEach((event: AdmissionEvent) => {\n                          // Priority: eventTime > createdAt\n                          const primaryDate = event.eventTime || event.createdAt;\n                          const eventNormalized = normalizeDate(primaryDate, 'admission_event', event.id);\n\n                          let title = '';\n                          let color = 'bg-orange-500';\n                          let description = '';\n\n                          switch (event.eventType) {\n                            case 'admit':\n                              title = 'Patient Admitted';\n                              color = 'bg-green-500';\n                              if (event.roomNumber && event.wardType) {\n                                description = `Room: ${event.roomNumber} (${event.wardType})`;\n                              }\n                              break;\n                            case 'room_change':\n                              title = 'Room Transfer';\n                              color = 'bg-blue-500';\n                              if (event.roomNumber && event.wardType) {\n                                description = `Moved to: ${event.roomNumber} (${event.wardType})`;\n                              }\n                              break;\n                            case 'discharge':\n                              title = 'Patient Discharged';\n                              color = 'bg-gray-500';\n                              if (event.roomNumber && event.wardType) {\n                                description = `From: ${event.roomNumber} (${event.wardType})`;\n                              }\n                              break;\n                            default:\n                              title = `Admission ${event.eventType.replace('_', ' ')}`;\n                              if (event.roomNumber && event.wardType) {\n                                description = `Room: ${event.roomNumber} (${event.wardType})`;\n                              }\n                          }\n\n                          timelineEvents.push({\n                            id: `${admission.id}-${event.id}`,\n                            type: 'admission_event',\n                            title: title,\n                            date: eventNormalized.date,\n                            description: description,\n                            color: color,\n                            sortTimestamp: eventNormalized.timestamp,\n                            rawData: { event, primaryDate }, // Debug info\n                            doctorName: doctorName, // Add doctorName directly to the event\n                            receiptNumber: event.receiptNumber // Include receipt number from event\n                          });\n                        });\n\n                        // If no events exist, create a basic admission entry as fallback\n                        if (events.length === 0) {\n                          const primaryDate = admission.createdAt || admission.admissionDate;\n                          const admissionNormalized = normalizeDate(primaryDate, 'admission_fallback', admission.id);\n\n                          timelineEvents.push({\n                            id: `${admission.id}-fallback`,\n                            type: 'admission',\n                            title: 'Patient Admission',\n                            date: admissionNormalized.date,\n                            description: (() => {\n                              const wardDisplay = admission.currentWardType || admission.wardType;\n                              const parts = [];\n                              if (admission.reason) parts.push(`Reason: ${admission.reason}`);\n                              parts.push(`Doctor: ${doctorName}`);\n                              parts.push(`Ward: ${wardDisplay}`);\n                              parts.push(`Room: ${admission.currentRoomNumber || admission.roomNumber || 'N/A'}`);\n                              return parts.join(' • ');\n                            })(),\n                            color: 'bg-orange-500',\n                            sortTimestamp: admissionNormalized.timestamp,\n                            rawData: { admission, primaryDate, doctorName }, // Include doctor info for receipt\n                            doctorName: doctorName // Add doctorName directly to the event\n                          });\n                        }\n                      });\n                    }\n\n                    // Add payment and discount entries from admissions\n                    if (admissions && admissions.length > 0) {\n                      console.log(\"Processing payment and discount entries for timeline\");\n                      admissions.forEach((admission: any) => {\n                        // Add payment entries\n                        if (admission.lastPaymentDate && admission.lastPaymentAmount) {\n                          const paymentNormalized = normalizeDate(admission.lastPaymentDate, 'payment', admission.id);\n\n                          timelineEvents.push({\n                            id: `payment-${admission.id}`,\n                            type: 'payment',\n                            title: 'Payment Received',\n                            date: paymentNormalized.date,\n                            description: `Amount: ₹${admission.lastPaymentAmount}`,\n                            color: 'bg-green-600',\n                            sortTimestamp: paymentNormalized.timestamp\n                          });\n                        }\n\n                        // Add discount entries  \n                        if (admission.lastDiscountDate && admission.lastDiscountAmount) {\n                          const discountNormalized = normalizeDate(admission.lastDiscountDate, 'discount', admission.id);\n\n                          timelineEvents.push({\n                            id: `discount-${admission.id}`,\n                            type: 'discount',\n                            title: 'Discount Applied',\n                            date: discountNormalized.date,\n                            description: `Amount: ₹${admission.lastDiscountAmount}${admission.lastDiscountReason ? ` • Reason: ${admission.lastDiscountReason}` : ''}`,\n                            color: 'bg-red-500',\n                            sortTimestamp: discountNormalized.timestamp\n                          });\n                        }\n                      });\n                    }\n\n                    // Add pathology orders\n                    if (pathologyOrders && pathologyOrders.length > 0) {\n                      console.log(\"Processing pathology orders for timeline:\", pathologyOrders.length);\n                      pathologyOrders.forEach((orderData: any) => {\n                        // Handle both the nested structure from the API and direct order objects\n                        const order = orderData.order || orderData;\n                        if (!order) {\n                          console.warn(\"No order found in pathology data:\", orderData);\n                          return;\n                        }\n\n                        // Priority: createdAt > orderedDate\n                        const primaryDate = order.createdAt || order.orderedDate;\n                        const pathologyNormalized = normalizeDate(primaryDate, 'pathology', order.id);\n\n                        // Count tests - handle both nested tests array and direct tests\n                        let testCount = 0;\n                        if (orderData.tests && Array.isArray(orderData.tests)) {\n                          testCount = orderData.tests.length;\n                        } else if (order.tests && Array.isArray(order.tests)) {\n                          testCount = order.tests.length;\n                        }\n\n                        const pathologyEvent = {\n                          id: order.id || `pathology-${Date.now()}`,\n                          type: 'pathology',\n                          title: `Pathology Order: ${order.orderId || 'Unknown Order'}`,\n                          date: pathologyNormalized.date,\n                          description: `Status: ${order.status || 'ordered'} • Cost: ₹${order.totalPrice || 0}`,\n                          color: 'bg-purple-500',\n                          sortTimestamp: pathologyNormalized.timestamp,\n                          extraInfo: order.completedDate ? `Completed: ${new Date(order.completedDate).toLocaleString('en-US', {\n                            year: 'numeric',\n                            month: 'short',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit',\n                            hour12: true,\n                            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n                          })}` : null,\n                          rawData: { order, primaryDate }, // Debug info\n                          // Include order fields directly for receipt access\n                          receiptNumber: order.receiptNumber,\n                          orderId: order.orderId,\n                          totalPrice: order.totalPrice,\n                          orderedDate: order.orderedDate\n                        };\n\n                        timelineEvents.push(pathologyEvent);\n                      });\n                    }\n\n                    // Sort events chronologically (earliest first) using consistent timestamp\n                    console.log(\"Timeline events before sorting:\", timelineEvents.map(e => ({\n                      id: e.id,\n                      title: e.title,\n                      timestamp: e.sortTimestamp,\n                      date: e.date,\n                      localTime: new Date(e.sortTimestamp).toLocaleString()\n                    })));\n\n                    timelineEvents.sort((a, b) => {\n                      // Primary sort by timestamp (ascending - earliest first)\n                      const timestampDiff = a.sortTimestamp - b.sortTimestamp;\n\n                      if (timestampDiff !== 0) {\n                        return timestampDiff;\n                      }\n\n                      // Secondary sort by ID for stable sorting when timestamps are identical\n                      return a.id.localeCompare(b.id);\n                    });\n\n                    console.log(\"Timeline events after sorting:\", timelineEvents.map(e => ({\n                      id: e.id,\n                      title: e.title,\n                      timestamp: e.sortTimestamp,\n                      date: e.date,\n                      localTime: new Date(e.sortTimestamp).toLocaleString()\n                    })));\n\n                    console.log(\"=== TIMELINE DEBUG END ===\");\n\n                    return timelineEvents.length > 0 ? timelineEvents.map((event) => (\n                      <div key={event.id} className={event.type === 'registration' ? 'w-full' : 'flex items-stretch gap-3'}>\n                        <div className={`${event.type === 'registration' ? 'w-full' : 'flex-1'} flex items-start gap-3 p-3 border rounded-lg`}>\n                          <div className={`w-3 h-3 ${event.color} rounded-full mt-1`} />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between\">\n                              <p className=\"font-medium\">{event.title}</p>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {(() => {\n                                  // For registration events, use the IST-corrected timestamp\n                                  // For other events, use the original timestamp as they're already in local time\n                                  const displayTimestamp = event.type === 'registration' \n                                    ? event.sortTimestamp  // Already IST-corrected above\n                                    : event.sortTimestamp;\n                                  \n                                  return new Date(displayTimestamp).toLocaleString('en-US', {\n                                    year: 'numeric',\n                                    month: 'short',\n                                    day: 'numeric',\n                                    hour: '2-digit',\n                                    minute: '2-digit',\n                                    hour12: true\n                                  });\n                                })()}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {event.description}\n                            </p>\n                            {(event as any).extraInfo && (\n                              <p className=\"text-sm text-green-600\">\n                                {(event as any).extraInfo}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        {event.type !== 'registration' && (\n                          <div className=\"flex items-stretch\">\n                            <div className=\"flex items-center h-full\">\n                              <ReceiptTemplate\n                                receiptData={generateReceiptData(event, event.type)}\n                                hospitalInfo={hospitalInfo}\n                                onPrint={() => {\n                                  toast({\n                                    title: \"Receipt printed\",\n                                    description: \"Receipt has been sent to printer.\",\n                                  });\n                                }}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )) : (\n                      <div className=\"text-center text-muted-foreground py-8\">\n                        <p>Patient timeline will show services, admissions, and pathology orders as they are added.</p>\n                      </div>\n                    );\n                  })()}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Service Dialog */}\n      <Dialog open={isServiceDialogOpen} onOpenChange={setIsServiceDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedServiceType === \"opd\" ? \"Schedule OPD Consultation\" : \"Schedule Patient Service\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={serviceForm.handleSubmit(onServiceSubmit)} className=\"space-y-4\">\n            {selectedServiceType !== \"opd\" && (\n              <div className=\"space-y-4\">\n                {/* Search and Category Row */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Search Services</Label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search services by name...\"\n                        value={serviceSearchQuery}\n                        onChange={(e) => {\n                          setServiceSearchQuery(e.target.value);\n                          // Reset service selection when search changes\n                          serviceForm.setValue(\"serviceType\", \"\");\n                          serviceForm.setValue(\"serviceName\", \"\");\n                          serviceForm.setValue(\"price\", 0);\n                        }}\n                        className=\"pl-10\"\n                        data-testid=\"search-services\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Service Category</Label>\n                    <Select \n                      value={selectedServiceCategory || \"all\"}\n                      onValueChange={(value) => {\n                        setSelectedServiceCategory(value === \"all\" ? \"\" : value);\n                        // Reset service selection when category changes\n                        serviceForm.setValue(\"serviceType\", \"\");\n                        serviceForm.setValue(\"serviceName\", \"\");\n                        serviceForm.setValue(\"price\", 0);\n                      }}\n                      data-testid=\"select-service-category\"\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select service category (optional)\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Categories</SelectItem>\n                        {serviceCategories.map((category) => (\n                          <SelectItem key={category.key} value={category.key}>\n                            <div className=\"flex items-center gap-2\">\n                              <category.icon className=\"h-4 w-4\" />\n                              {category.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Service Name *</Label>\n                  <Select \n                    value={serviceForm.watch(\"serviceType\")}\n                    onValueChange={(value) => {\n                      serviceForm.setValue(\"serviceType\", value);\n\n                      // Check if it's from API services or legacy services\n                      const selectedService = getFilteredServices(selectedServiceCategory).find(s => s.id === value);\n                      if (selectedService) {\n                        serviceForm.setValue(\"serviceName\", selectedService.name);\n                        serviceForm.setValue(\"price\", selectedService.price || 0);\n                        // Clear the error when a valid service is selected\n                        serviceForm.clearErrors(\"serviceType\");\n                      }\n                    }}\n                    data-testid=\"select-service-name\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select service\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {getFilteredServices(selectedServiceCategory).map((service) => (\n                        <SelectItem key={service.id} value={service.id}>\n                          {service.name}\n                          {service.description && (\n                            <span className=\"text-muted-foreground ml-2\">\n                              - {service.description}\n                            </span>\n                          )}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {serviceForm.formState.errors.serviceType && (\n                    <p className=\"text-sm text-red-600\">\n                      {serviceForm.formState.errors.serviceType.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {selectedServiceType === \"opd\" && (\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <p className=\"text-sm text-blue-800 font-medium\">OPD Consultation</p>\n                {(() => {\n                  const selectedDoctorId = serviceForm.watch(\"doctorId\");\n                  const selectedDoctor = doctors.find((d: Doctor) => d.id === selectedDoctorId);\n                  const consultationFee = selectedDoctorId && selectedDoctorId !== \"none\" && selectedDoctor ? selectedDoctor.consultationFee : 0;\n\n                  return (\n                    <p className=\"text-sm text-blue-600\">\n                      Consultation fee: ₹{consultationFee}\n                      {(!selectedDoctorId || selectedDoctorId === \"none\") && <span className=\"text-blue-500 ml-1\">(Select doctor to see fee)</span>}\n                    </p>\n                  );\n                })()}\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>{selectedServiceType === \"opd\" ? \"Consulting Doctor *\" : \"Assigned Doctor *\"}</Label>\n                <Select \n                  value={serviceForm.watch(\"doctorId\")}\n                  onValueChange={(value) => {\n                    serviceForm.setValue(\"doctorId\", value);\n                    // Clear the error when a valid doctor is selected\n                    if (value && value !== \"none\") {\n                      serviceForm.clearErrors(\"doctorId\");\n                    }\n                  }}\n                  data-testid=\"select-service-doctor\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={selectedServiceType === \"opd\" ? \"Select consulting doctor (required)\" : \"Select doctor (required)\"} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {selectedServiceType !== \"opd\" && <SelectItem value=\"none\">No doctor assigned</SelectItem>}\n                    {doctors.map((doctor: Doctor) => (\n                      <SelectItem key={doctor.id} value={doctor.id}>\n                        {doctor.name} - {doctor.specialization}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {serviceForm.formState.errors.doctorId && (\n                  <p className=\"text-sm text-red-600\">\n                    {serviceForm.formState.errors.doctorId.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Scheduled Date *</Label>\n                <Input\n                  type=\"date\"\n                  {...serviceForm.register(\"scheduledDate\", { required: \"Scheduled date is required\" })}\n                  data-testid=\"input-service-date\"\n                />\n                {serviceForm.formState.errors.scheduledDate && (\n                  <p className=\"text-sm text-red-600\">\n                    {serviceForm.formState.errors.scheduledDate.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Scheduled Time *</Label>\n                <Input\n                  type=\"time\"\n                  {...serviceForm.register(\"scheduledTime\", { required: \"Scheduled time is required\" })}\n                  data-testid=\"input-service-time\"\n                />\n                {serviceForm.formState.errors.scheduledTime && (\n                  <p className=\"text-sm text-red-600\">\n                    {serviceForm.formState.errors.scheduledTime.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {selectedServiceType !== \"opd\" && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Price (₹) *</Label>\n                  <Input\n                    type=\"number\"\n                    {...serviceForm.register(\"price\", { \n                      valueAsNumber: true, \n                      required: \"Price is required\",\n                      min: { value: 0, message: \"Price must be at least 0\" }\n                    })}\n                    data-testid=\"input-service-price\"\n                    readOnly={(() => {\n                      const selectedService = getFilteredServices(selectedServiceCategory).find(s => s.id === serviceForm.watch(\"serviceType\"));\n                      return selectedService && selectedService.price > 0;\n                    })()}\n                    className={(() => {\n                      const selectedService = getFilteredServices(selectedServiceCategory).find(s => s.id === serviceForm.watch(\"serviceType\"));\n                      return selectedService && selectedService.price > 0 ? \"bg-gray-50\" : \"\";\n                    })()}\n                  />\n                  {serviceForm.formState.errors.price && (\n                    <p className=\"text-sm text-red-600\">\n                      {serviceForm.formState.errors.price.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label>Notes</Label>\n              <Textarea\n                {...serviceForm.register(\"notes\")}\n                placeholder=\"Additional notes about the service...\"\n                data-testid=\"textarea-service-notes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsServiceDialogOpen(false);\n                  setSelectedServiceType(\"\");\n                  setSelectedServiceCategory(\"\");\n                  setServiceSearchQuery(\"\");\n                  serviceForm.reset({\n                    patientId: patientId || \"\",\n                    serviceType: \"\",\n                    serviceName: \"\",\n                    scheduledDate: \"\",\n                    scheduledTime: \"\",\n                    doctorId: \"\",\n                    notes: \"\",\n                    price: 0,\n                  });\n                }}\n                data-testid=\"button-cancel-service\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createServiceMutation.isPending}\n                data-testid=\"button-schedule-service\"\n              >\n                {createServiceMutation.isPending \n                  ? \"Scheduling...\" \n                  : selectedServiceType === \"opd\" \n                    ? \"Schedule OPD\" \n                    : \"Schedule Service\"\n                }\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Admission Dialog */}\n      <Dialog open={isAdmissionDialogOpen} onOpenChange={setIsAdmissionDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Admit Patient</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={admissionForm.handleSubmit(onAdmissionSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Doctor *</Label>\n                <Select \n                  value={admissionForm.watch(\"doctorId\")}\n                  onValueChange={(value) => admissionForm.setValue(\"doctorId\", value)}\n                  data-testid=\"select-admission-doctor\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select attending doctor\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {doctors.map((doctor: Doctor) => (\n                      <SelectItem key={doctor.id} value={doctor.id}>\n                        {doctor.name} - {doctor.specialization}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Ward/Room Type *</Label>\n                <Select \n                  value={admissionForm.watch(\"currentWardType\")}\n                  onValueChange={(value) => {\n                    admissionForm.setValue(\"currentWardType\", value);\n                    admissionForm.setValue(\"currentRoomNumber\", \"\"); // Clear room selection when ward type changes\n                    // Auto-set daily cost based on selected room type\n                    const selectedRoomType = roomTypes.find((rt: any) => rt.name === value);\n                    if (selectedRoomType) {\n                      admissionForm.setValue(\"dailyCost\", selectedRoomType.dailyCost);\n                    }\n                  }}\n                  data-testid=\"select-ward-type\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select ward/room type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roomTypes.map((roomType: any) => (\n                      <SelectItem key={roomType.id} value={roomType.name}>\n                        {roomType.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Room Number *</Label>\n                <Select\n                  value={admissionForm.watch(\"currentRoomNumber\")}\n                  onValueChange={(value) => admissionForm.setValue(\"currentRoomNumber\", value)}\n                  disabled={!admissionForm.watch(\"currentWardType\")}\n                  data-testid=\"select-room-number\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={admissionForm.watch(\"currentWardType\") ? \"Select available room\" : \"Select ward type first\"} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(() => {\n                      const selectedWardType = admissionForm.watch(\"currentWardType\");\n                      const selectedRoomType = roomTypes.find((rt: any) => rt.name === selectedWardType);\n\n                      if (!selectedRoomType) return null;\n\n                      // Get all rooms for this room type\n                      const allRoomsForType = rooms.filter((room: any) => \n                        room.roomTypeId === selectedRoomType.id && \n                        room.isActive\n                      );\n\n                      if (allRoomsForType.length === 0) {\n                        return (\n                          <SelectItem value=\"\" disabled>\n                            No rooms available in {selectedWardType}\n                          </SelectItem>\n                        );\n                      }\n\n                      // Check which rooms are actually occupied based on current admissions\n                      const occupiedRoomNumbers = new Set(\n                        allCurrentAdmissions\n                          .filter((admission: any) => \n                            admission.currentWardType === selectedWardType && \n                            admission.status === 'admitted'\n                          )\n                          .map((admission: any) => admission.currentRoomNumber)\n                      );\n\n                      return allRoomsForType.map((room: any) => {\n                        const isOccupied = occupiedRoomNumbers.has(room.roomNumber);\n                        \n                        return (\n                          <SelectItem \n                            key={room.id} \n                            value={room.roomNumber}\n                            disabled={isOccupied}\n                            className={isOccupied ? \"text-gray-400 bg-gray-100 cursor-not-allowed\" : \"\"}\n                          >\n                            {room.roomNumber}{isOccupied ? \" (Occupied)\" : \"\"}\n                          </SelectItem>\n                        );\n                      });\n                    })()}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Admission Date *</Label>\n                <Input\n                  type=\"date\"\n                  {...admissionForm.register(\"admissionDate\")}\n                  data-testid=\"input-admission-date\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Reason for Admission</Label>\n              <Input\n                {...admissionForm.register(\"reason\")}\n                placeholder=\"Brief reason for admission (optional)\"\n                data-testid=\"input-admission-reason\"\n              />\n            </div>\n\n\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Daily Cost (₹) *</Label>\n                <Input\n                  type=\"number\"\n                  {...admissionForm.register(\"dailyCost\", { valueAsNumber: true })}\n                  placeholder=\"Daily ward cost\"\n                  data-testid=\"input-daily-cost\"\n                  readOnly={!!admissionForm.watch(\"currentWardType\")}\n                  className={admissionForm.watch(\"currentWardType\") ? \"bg-gray-50\" : \"\"}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Initial Deposit (₹)</Label>\n                <Input\n                  type=\"number\"\n                  {...admissionForm.register(\"initialDeposit\", { valueAsNumber: true })}\n                  placeholder=\"Initial deposit amount\"\n                  data-testid=\"input-initial-deposit\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Notes</Label>\n              <Textarea\n                {...admissionForm.register(\"notes\")}\n                placeholder=\"Additional notes...\"\n                data-testid=\"textarea-admission-notes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsAdmissionDialogOpen(false)}\n                data-testid=\"button-cancel-admission\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createAdmissionMutation.isPending}\n                data-testid=\"button-admit\"\n              >\n                {createAdmissionMutation.isPending ? \"Admitting...\" : \"Admit Patient\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Discharge Dialog */}\n      <Dialog open={isDischargeDialogOpen} onOpenChange={setIsDischargeDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Discharge Patient</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"py-4\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Are you sure you want to discharge this patient? This action will mark the admission as completed and set the discharge date to now.\n            </p>\n\n            {(() => {\n              const currentAdmission = admissions?.find((adm: any) => adm.status === 'admitted');\n              if (currentAdmission) {\n                return (\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <p className=\"text-sm\"><strong>Room:</strong> {currentAdmission.roomNumber}</p>\n                    <p className=\"text-sm\"><strong>Ward Type:</strong> {currentAdmission.wardType}</p>\n                    <p className=\"text-sm\"><strong>Admission Date:</strong> {formatDate(currentAdmission.admissionDate)}</p>\n                  </div>\n                );\n              }\n              return null;\n            })()}\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsDischargeDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={onDischargePatient}\n              disabled={dischargePatientMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              {dischargePatientMutation.isPending ? \"Discharging...\" : \"Discharge Patient\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Room Update Dialog */}\n      <Dialog open={isRoomUpdateDialogOpen} onOpenChange={setIsRoomUpdateDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Update Room Assignment</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={roomUpdateForm.handleSubmit(onRoomUpdate)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Ward Type *</Label>\n              <Select \n                value={roomUpdateForm.watch(\"wardType\")}\n                onValueChange={(value) => {\n                  roomUpdateForm.setValue(\"wardType\", value);\n                  roomUpdateForm.setValue(\"roomNumber\", \"\"); // Clear room selection when ward type changes\n                }}\n                data-testid=\"select-update-ward-type\"\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select ward type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {roomTypes.map((roomType: any) => (\n                    <SelectItem key={roomType.id} value={roomType.name}>\n                      {roomType.name} ({roomType.category}) - ₹{roomType.dailyCost}/day\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Room Number *</Label>\n              <Select\n                value={roomUpdateForm.watch(\"roomNumber\")}\n                onValueChange={(value) => roomUpdateForm.setValue(\"roomNumber\", value)}\n                disabled={!roomUpdateForm.watch(\"wardType\")}\n                data-testid=\"select-update-room-number\"\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder={roomUpdateForm.watch(\"wardType\") ? \"Select available room\" : \"Select ward type first\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {(() => {\n                    const selectedWardType = roomUpdateForm.watch(\"wardType\");\n                    const selectedRoomType = roomTypes.find((rt: any) => rt.name === selectedWardType);\n\n                    if (!selectedRoomType) return null;\n\n                    const availableRooms = rooms.filter((room: any) => \n                      room.roomTypeId === selectedRoomType.id && \n                      !room.isOccupied && \n                      room.isActive\n                    );\n\n                    if (availableRooms.length === 0) {\n                      return (\n                        <SelectItem value=\"\" disabled>\n                          No available rooms in {selectedWardType}\n                        </SelectItem>\n                      );\n                    }\n\n                    return availableRooms.map((room: any) => (\n                      <SelectItem key={room.id} value={room.roomNumber}>\n                        {room.roomNumber}\n                      </SelectItem>\n                    ));\n                  })()}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsRoomUpdateDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateRoomMutation.isPending}\n              >\n                {updateRoomMutation.isPending ? \"Updating...\" : \"Update Room\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Payment Dialog */}\n      <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Payment</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"py-4\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Payment Amount *</Label>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  placeholder=\"Enter payment amount\"\n                  data-testid=\"input-payment-amount\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Payment Method</Label>\n                <Select defaultValue=\"cash\">\n                  <SelectTrigger data-testid=\"select-payment-method\">\n                    <SelectValue placeholder=\"Select payment method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"card\">Card</SelectItem>\n                    <SelectItem value=\"upi\">UPI</SelectItem>\n                    <SelectItem value=\"bank-transfer\">Bank Transfer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsPaymentDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                const selectedAdmissionId = admissions?.find((adm: any) => adm.status === 'admitted')?.id || admissions?.[0]?.id;\n                const amount = parseFloat(paymentAmount);\n                if (selectedAdmissionId && amount > 0) {\n                  addPaymentMutation.mutate({ \n                    admissionId: selectedAdmissionId, \n                    amount: amount \n                  });\n                }\n              }}\n              disabled={addPaymentMutation.isPending || !paymentAmount || parseFloat(paymentAmount) <= 0}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              {addPaymentMutation.isPending ? \"Adding Payment...\" : \"Add Payment\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Discount Dialog */}\n      <Dialog open={isDiscountDialogOpen} onOpenChange={setIsDiscountDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Discount</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"py-4\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Discount Amount *</Label>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={discountAmount}\n                  onChange={(e) => setDiscountAmount(e.target.value)}\n                  placeholder=\"Enter discount amount\"\n                  data-testid=\"input-discount-amount\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Reason for Discount</Label>\n                <Input\n                  type=\"text\"\n                  value={discountReason}\n                  onChange={(e) => setDiscountReason(e.target.value)}\n                  placeholder=\"Enter reason for discount (optional)\"\n                  data-testid=\"input-discount-reason\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsDiscountDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"Discount button clicked\");\n                console.log(\"Available admissions:\", admissions);\n                console.log(\"Discount amount:\", discountAmount);\n                console.log(\"Discount reason:\", discountReason);\n\n                const selectedAdmissionId = admissions?.find((adm: any) => adm.status === 'admitted')?.id || admissions?.[0]?.id;\n                const amount = parseFloat(discountAmount);\n\n                console.log(\"Selected admission ID:\", selectedAdmissionId);\n                console.log(\"Parsed amount:\", amount);\n\n                if (selectedAdmissionId && amount > 0) {\n                  console.log(\"Calling discount mutation\");\n                  addDiscountMutation.mutate({ \n                    admissionId: selectedAdmissionId, \n                    amount: amount,\n                    reason: discountReason.trim() || \"Manual discount\"\n                  });\n                } else {\n                  console.log(\"Invalid data for discount\");\n                  toast({\n                    title: \"Error\",\n                    description: \"Please enter a valid discount amount and ensure there's an admission record.\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n              disabled={addDiscountMutation.isPending || !discountAmount || parseFloat(discountAmount) <= 0}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              {addDiscountMutation.isPending ? \"Adding Discount...\" : \"Add Discount\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":116395},"client/src/pages/patients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { UserPlus, Edit, Eye } from \"lucide-react\";\nimport { insertPatientSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Patient } from \"@shared/schema\";\n\nexport default function Patients() {\n  const [, navigate] = useLocation();\n  const [isNewPatientOpen, setIsNewPatientOpen] = useState(false);\n  const [isEditPatientOpen, setIsEditPatientOpen] = useState(false);\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: patients = [], isLoading } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (patientData: any) => {\n      const response = await fetch(\"/api/patients\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(patientData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create patient\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      setIsNewPatientOpen(false);\n      form.reset({\n        name: \"\",\n        age: 0,\n        gender: \"\",\n        phone: \"\",\n        address: \"\",\n        email: \"\",\n        emergencyContact: \"\",\n      });\n      toast({\n        title: \"Patient created successfully\",\n        description: \"The patient has been registered in the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating patient\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePatientMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      // Remove empty string fields\n      const filteredUpdates = Object.fromEntries(\n        Object.entries(updates).filter(\n          ([_, value]) => value !== \"\" && value !== undefined && value !== null\n        )\n      );\n\n      const response = await fetch(`/api/patients/${id}`, {\n        method: \"PATCH\", // PATCH for partial updates\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(filteredUpdates),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update patient\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      setIsEditPatientOpen(false);\n      toast({\n        title: \"Patient updated successfully\",\n        description: \"The patient record has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error updating patient\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertPatientSchema),\n    defaultValues: {\n      name: \"\",\n      age: undefined,\n      gender: \"\",\n      phone: \"\",\n      address: \"\",\n      email: \"\",\n      emergencyContact: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  const editForm = useForm({\n    resolver: zodResolver(insertPatientSchema),\n    defaultValues: {\n      name: \"\",\n      age: undefined,\n      gender: \"\",\n      phone: \"\",\n      address: \"\",\n      email: \"\",\n      emergencyContact: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n\n  const onSubmit = (data: any) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    \n    // Validate required fields explicitly\n    if (!data.name?.trim()) {\n      form.setError(\"name\", { message: \"Name is required\" });\n      return;\n    }\n    if (!data.age || data.age <= 0) {\n      form.setError(\"age\", { message: \"Valid age is required\" });\n      return;\n    }\n    if (!data.gender?.trim()) {\n      form.setError(\"gender\", { message: \"Gender is required\" });\n      return;\n    }\n    if (!data.phone?.trim()) {\n      form.setError(\"phone\", { message: \"Phone number is required\" });\n      return;\n    }\n    \n    createPatientMutation.mutate(data);\n  };\n\n  const filteredPatients = patients.filter((patient: Patient) =>\n    patient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.patientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    patient.phone.includes(searchQuery)\n  );\n\n  const formatDate = (dateString: string) => {\n    // Parse the ISO string and apply the same correction as patient detail timeline\n    const date = new Date(dateString);\n    // Subtract 5.5 hours to correct the timezone display (same as patient detail)\n    const correctedTimestamp = date.getTime() - (5.5 * 60 * 60 * 1000);\n    const correctedDate = new Date(correctedTimestamp);\n    \n    // Format without timezone to avoid double conversion\n    return correctedDate.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Patient Registration\"\n        searchPlaceholder=\"Search patients by name, ID, or phone...\"\n        onSearch={setSearchQuery}\n        onNewAction={() => setIsNewPatientOpen(true)}\n        newActionLabel=\"New Patient\"\n      />\n      \n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>All Patients</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Total: {filteredPatients.length} patients\n            </p>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                <p className=\"text-sm text-muted-foreground mt-2\">Loading patients...</p>\n              </div>\n            ) : filteredPatients.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No patients found</p>\n                <Button \n                  onClick={() => setIsNewPatientOpen(true)}\n                  className=\"mt-4\"\n                  data-testid=\"button-first-patient\"\n                >\n                  Register your first patient\n                </Button>\n              </div>\n            ) : (\n              <Table data-testid=\"patients-table\">\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient ID</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Age/Gender</TableHead>\n                    <TableHead>Phone</TableHead>\n                    <TableHead>Registered</TableHead>\n                    {/* <TableHead>Status</TableHead> */}\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredPatients.map((patient: Patient) => (\n                    <TableRow key={patient.id} data-testid={`patient-row-${patient.id}`}>\n                      <TableCell className=\"font-medium\" data-testid={`patient-id-${patient.id}`}>\n                        {patient.patientId}\n                      </TableCell>\n                      <TableCell data-testid={`patient-name-${patient.id}`}>\n                        {patient.name}\n                      </TableCell>\n                      <TableCell data-testid={`patient-age-gender-${patient.id}`}>\n                        {patient.age}y, {patient.gender}\n                      </TableCell>\n                      <TableCell data-testid={`patient-phone-${patient.id}`}>\n                        {patient.phone}\n                      </TableCell>\n                      <TableCell data-testid={`patient-registered-${patient.id}`}>\n                        {formatDate(patient.createdAt)}\n                      </TableCell>\n                      {/* <TableCell>\n                        <Badge \n                          variant={patient.isActive ? \"default\" : \"secondary\"}\n                          data-testid={`patient-status-${patient.id}`}\n                        >\n                          {patient.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell> */}\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => navigate(`/patients/${patient.id}`)}\n                            data-testid={`button-view-${patient.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedPatient(patient);\n                              editForm.reset(patient);   // prefill fields\n                              setIsEditPatientOpen(true);\n                            }}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* New Patient Dialog */}\n      <Dialog open={isNewPatientOpen} onOpenChange={setIsNewPatientOpen}>\n\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-patient-dialog\">\n          <DialogHeader>\n            <DialogTitle>Register New Patient</DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"Enter patient's full name\"\n                  data-testid=\"input-patient-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"age\">Age *</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  {...form.register(\"age\", { valueAsNumber: true })}\n                  placeholder=\"Enter age\"\n                  data-testid=\"input-patient-age\"\n                />\n                {form.formState.errors.age && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.age.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">Gender *</Label>\n                <Select \n                  value={form.watch(\"gender\")}\n                  onValueChange={(value) => form.setValue(\"gender\", value, { shouldValidate: true })}\n                >\n                  <SelectTrigger data-testid=\"select-patient-gender\">\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.gender && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.gender.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+91 XXXXX XXXXX\"\n                  data-testid=\"input-patient-phone\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                placeholder=\"patient@example.com\"\n                data-testid=\"input-patient-email\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                {...form.register(\"address\")}\n                placeholder=\"Enter complete address\"\n                rows={3}\n                data-testid=\"input-patient-address\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n              <Input\n                id=\"emergencyContact\"\n                {...form.register(\"emergencyContact\")}\n                placeholder=\"+91 XXXXX XXXXX\"\n                data-testid=\"input-patient-emergency\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewPatientOpen(false)}\n                data-testid=\"button-cancel-patient\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createPatientMutation.isPending || !form.formState.isValid}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-patient\"\n              >\n                {createPatientMutation.isPending ? \"Saving...\" : \"Register Patient\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n\n      {/* Edit Patient Dialog */}\n      <Dialog open={isEditPatientOpen} onOpenChange={setIsEditPatientOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"edit-patient-dialog\">\n          <DialogHeader>\n            <DialogTitle>Edit Patient: {selectedPatient?.name}</DialogTitle>\n          </DialogHeader>\n          \n          <form\n            onSubmit={editForm.handleSubmit((data) => {\n              if (!selectedPatient) return;\n              updatePatientMutation.mutate(\n                { id: selectedPatient.id, updates: data },\n                {\n                  onSuccess: () => {\n                    setIsEditPatientOpen(false);\n                    editForm.reset();\n                  },\n                }\n              );\n            })}\n            className=\"space-y-4\"\n          >\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...editForm.register(\"name\")}\n                  placeholder=\"Enter patient's full name\"\n                />\n                {editForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.name.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"age\">Age *</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  {...editForm.register(\"age\", { valueAsNumber: true })}\n                  placeholder=\"Enter age\"\n                />\n                {editForm.formState.errors.age && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.age.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">Gender *</Label>\n                <Select\n                  value={editForm.watch(\"gender\")}\n                  onValueChange={(value) =>\n                    editForm.setValue(\"gender\", value, { shouldValidate: true })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                {editForm.formState.errors.gender && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.gender.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...editForm.register(\"phone\")}\n                  placeholder=\"+91 XXXXX XXXXX\"\n                />\n                {editForm.formState.errors.phone && (\n                  <p className=\"text-sm text-destructive\">\n                    {editForm.formState.errors.phone.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...editForm.register(\"email\")}\n                placeholder=\"patient@example.com\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                {...editForm.register(\"address\")}\n                placeholder=\"Enter complete address\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n              <Input\n                id=\"emergencyContact\"\n                {...editForm.register(\"emergencyContact\")}\n                placeholder=\"+91 XXXXX XXXXX\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditPatientOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={\n                  updatePatientMutation.isPending ||\n                  !editForm.formState.isValid\n                }\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n              >\n                {updatePatientMutation.isPending ? \"Saving...\" : \"Update Patient\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":20911},"client/src/pages/services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Building2, \n  Plus, \n  Edit, \n  Trash2, \n  Bed,\n  Home,\n  Activity,\n  AlertTriangle,\n  Heart,\n  Stethoscope,\n  Syringe,\n  Scissors,\n  Settings\n} from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { RoomType, Room, Service } from \"@shared/schema\";\n\nexport default function ServiceManagement() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"rooms\");\n  const [roomsSubTab, setRoomsSubTab] = useState(\"room-types\");\n  const [selectedRoomTypeId, setSelectedRoomTypeId] = useState<string>(\"\");\n  const [isRoomTypeDialogOpen, setIsRoomTypeDialogOpen] = useState(false);\n  const [isRoomDialogOpen, setIsRoomDialogOpen] = useState(false);\n  const [isServiceDialogOpen, setIsServiceDialogOpen] = useState(false);\n  const [editingRoomType, setEditingRoomType] = useState<RoomType | null>(null);\n  const [editingRoom, setEditingRoom] = useState<Room | null>(null);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [serviceDoctors, setServiceDoctors] = useState<{id: string, share: number}[]>([]);\n\n  // Fetch room types\n  const { data: roomTypes = [] } = useQuery<RoomType[]>({\n    queryKey: [\"/api/room-types\"],\n  });\n\n  // Fetch rooms\n  const { data: rooms = [] } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  // Fetch services\n  const { data: services = [] } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  // Fetch doctors for service assignment\n  const { data: doctors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/doctors\"],\n  });\n\n  const roomTypeForm = useForm({\n    defaultValues: {\n      name: \"\",\n      category: \"\",\n      dailyCost: 0,\n      totalBeds: 0,\n      isActive: true,\n    },\n  });\n\n  const roomForm = useForm({\n    defaultValues: {\n      roomNumber: \"\",\n      roomTypeId: \"\",\n      floor: \"\",\n      building: \"\",\n      capacity: 1,\n      isOccupied: false,\n      isActive: true,\n      notes: \"\",\n    },\n  });\n\n  const serviceForm = useForm({\n    defaultValues: {\n      name: \"\",\n      category: \"\",\n      price: 0,\n      description: \"\",\n      isActive: true,\n      doctors: [],\n    },\n  });\n\n  const createRoomTypeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const isEditing = editingRoomType !== null;\n      const url = isEditing ? `/api/room-types/${editingRoomType.id}` : \"/api/room-types\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to ${isEditing ? 'update' : 'create'} room type: ${errorText}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      setIsRoomTypeDialogOpen(false);\n      roomTypeForm.reset();\n      const wasEditing = editingRoomType !== null;\n      setEditingRoomType(null);\n      toast({\n        title: \"Success\",\n        description: `Room type ${wasEditing ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save room type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createRoomMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/rooms\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create room\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      setIsRoomDialogOpen(false);\n      roomForm.reset();\n      setEditingRoom(null);\n      toast({\n        title: \"Success\",\n        description: \"Room saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save room\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const isEditing = editingService !== null;\n      const url = isEditing ? `/api/services/${editingService.id}` : \"/api/services\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to ${isEditing ? 'update' : 'create'} service: ${errorText}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setIsServiceDialogOpen(false);\n      serviceForm.reset();\n      const wasEditing = editingService !== null;\n      setEditingService(null);\n      setServiceDoctors([]);\n      toast({\n        title: \"Success\",\n        description: `Service ${wasEditing ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (serviceId: string) => {\n      const response = await fetch(`/api/services/${serviceId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete service\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRoomTypeMutation = useMutation({\n    mutationFn: async (roomTypeId: string) => {\n      const response = await fetch(`/api/room-types/${roomTypeId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to delete room type: ${errorText}`);\n      }\n      // For 204 responses, there might not be JSON content\n      if (response.status === 204) {\n        return { success: true };\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      toast({\n        title: \"Success\",\n        description: \"Room type deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete room type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRoomMutation = useMutation({\n    mutationFn: async (roomId: string) => {\n      const response = await fetch(`/api/rooms/${roomId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to delete room: ${errorText}`);\n      }\n      // For 204 responses, there might not be JSON content\n      if (response.status === 204) {\n        return { success: true };\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      toast({\n        title: \"Success\",\n        description: \"Room deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete room\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onRoomTypeSubmit = (data: any) => {\n    createRoomTypeMutation.mutate(data);\n  };\n\n  const onRoomSubmit = (data: any) => {\n    createRoomMutation.mutate(data);\n  };\n\n  const onServiceSubmit = (data: any) => {\n    // For non-rooms services, allow price to be 0 if not provided\n    const serviceData = {\n      ...data,\n      category: activeTab,\n      price: activeTab !== 'rooms' && (!data.price || data.price === '') ? 0 : data.price,\n      // Remove doctors field from service data as it's not part of the service schema\n    };\n    createServiceMutation.mutate(serviceData);\n  };\n\n  const openRoomTypeDialog = (roomType?: RoomType) => {\n    if (roomType) {\n      setEditingRoomType(roomType);\n      roomTypeForm.reset({\n        name: roomType.name,\n        category: roomType.category,\n        dailyCost: roomType.dailyCost,\n        totalBeds: roomType.totalBeds || 0,\n        isActive: roomType.isActive,\n      });\n    } else {\n      setEditingRoomType(null);\n      roomTypeForm.reset();\n    }\n    setIsRoomTypeDialogOpen(true);\n  };\n\n  const openRoomDialog = (room?: Room) => {\n    if (room) {\n      setEditingRoom(room);\n      roomForm.reset({\n        roomNumber: room.roomNumber,\n        roomTypeId: room.roomTypeId,\n        floor: room.floor || \"\",\n        building: room.building || \"\",\n        capacity: room.capacity,\n        isOccupied: room.isOccupied,\n        isActive: room.isActive,\n        notes: room.notes || \"\",\n      });\n    } else {\n      setEditingRoom(null);\n      roomForm.reset({\n        roomNumber: \"\",\n        roomTypeId: selectedRoomTypeId || \"\",\n        floor: \"\",\n        building: \"\",\n        capacity: 1,\n        isOccupied: false,\n        isActive: true,\n        notes: \"\",\n      });\n    }\n    setIsRoomDialogOpen(true);\n  };\n\n  const openServiceDialog = (service?: Service) => {\n    if (service) {\n      setEditingService(service);\n      serviceForm.reset({\n        name: service.name,\n        category: service.category,\n        price: service.price,\n        description: service.description || \"\",\n        isActive: service.isActive,\n        doctors: [],\n      });\n      setServiceDoctors([]);\n    } else {\n      setEditingService(null);\n      serviceForm.reset({\n        name: \"\",\n        category: activeTab,\n        price: 0,\n        description: \"\",\n        isActive: true,\n        doctors: [],\n      });\n      setServiceDoctors([]);\n    }\n    setIsServiceDialogOpen(true);\n  };\n\n  const addDoctorToService = () => {\n    setServiceDoctors(prev => [...prev, { id: \"\", share: 0 }]);\n  };\n\n  const removeDoctorFromService = (index: number) => {\n    setServiceDoctors(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateDoctorShare = (index: number, field: \"id\" | \"share\", value: string | number) => {\n    setServiceDoctors(prev => prev.map((doctor, i) => \n      i === index ? { ...doctor, [field]: value } : doctor\n    ));\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'ward':\n        return <Home className=\"h-4 w-4\" />;\n      case 'icu':\n        return <Activity className=\"h-4 w-4\" />;\n      case 'emergency':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'ot':\n        return <Building2 className=\"h-4 w-4\" />;\n      case 'room':\n        return <Bed className=\"h-4 w-4\" />;\n      default:\n        return <Bed className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'ward':\n        return 'bg-blue-100 text-blue-800';\n      case 'icu':\n        return 'bg-red-100 text-red-800';\n      case 'emergency':\n        return 'bg-orange-100 text-orange-800';\n      case 'ot':\n        return 'bg-purple-100 text-purple-800';\n      case 'room':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getServiceCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'diagnostics':\n        return <Heart className=\"h-4 w-4\" />;\n      case 'procedures':\n        return <Stethoscope className=\"h-4 w-4\" />;\n      case 'operations':\n        return <Scissors className=\"h-4 w-4\" />;\n      case 'misc':\n        return <Settings className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getServiceCategoryColor = (category: string) => {\n    switch (category) {\n      case 'diagnostics':\n        return 'bg-pink-100 text-pink-800';\n      case 'procedures':\n        return 'bg-green-100 text-green-800';\n      case 'operations':\n        return 'bg-indigo-100 text-indigo-800';\n      case 'misc':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-blue-100 text-blue-800';\n    }\n  };\n\n  const getTabIcon = (tab: string) => {\n    switch (tab) {\n      case 'rooms':\n        return <Building2 className=\"h-4 w-4\" />;\n      case 'diagnostics':\n        return <Heart className=\"h-4 w-4\" />;\n      case 'procedures':\n        return <Stethoscope className=\"h-4 w-4\" />;\n      case 'operations':\n        return <Scissors className=\"h-4 w-4\" />;\n      case 'misc':\n        return <Settings className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const serviceCategories = [\n    { key: 'rooms', label: 'Rooms & Accommodation', icon: Building2 },\n    { key: 'diagnostics', label: 'Diagnostic Services', icon: Heart },\n    { key: 'procedures', label: 'Medical Procedures', icon: Stethoscope },\n    { key: 'operations', label: 'Surgical Operations', icon: Scissors },\n    { key: 'misc', label: 'Miscellaneous Services', icon: Settings }\n  ];\n\n  const filteredServices = services.filter(service => service.category === activeTab);\n\n  const occupiedRooms = rooms.filter(room => room.isOccupied).length;\n  const availableRooms = rooms.filter(room => !room.isOccupied && room.isActive).length;\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar \n        title=\"Service Management\"\n      />\n      \n      <div className=\"p-6\">\n        {/* Service Category Navigation */}\n        <div className=\"mb-6\">\n          <div className=\"flex flex-wrap gap-2\">\n            {serviceCategories.map((category) => {\n              const Icon = category.icon;\n              return (\n                <Button\n                  key={category.key}\n                  onClick={() => setActiveTab(category.key)}\n                  variant={activeTab === category.key ? \"default\" : \"outline\"}\n                  className=\"flex items-center gap-2\"\n                  data-testid={`tab-${category.key}`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  {category.label}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n\n\n        {/* Content based on active tab */}\n        {activeTab === 'rooms' ? (\n          <div className=\"space-y-4\">\n            {/* Main Rooms Navigation */}\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              <Button\n                onClick={() => {setRoomsSubTab(\"room-types\"); setSelectedRoomTypeId(\"\");}}\n                variant={roomsSubTab === \"room-types\" ? \"default\" : \"outline\"}\n                className=\"flex items-center gap-2\"\n              >\n                <Building2 className=\"h-4 w-4\" />\n                Room Types\n              </Button>\n              <Button\n                onClick={() => {setRoomsSubTab(\"rooms\"); setSelectedRoomTypeId(\"\");}}\n                variant={roomsSubTab === \"rooms\" ? \"default\" : \"outline\"}\n                className=\"flex items-center gap-2\"\n              >\n                <Bed className=\"h-4 w-4\" />\n                All Rooms\n              </Button>\n            </div>\n\n            {/* Room Types Section */}\n            {roomsSubTab === \"room-types\" && (\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Room Types</CardTitle>\n                  <Button\n                    onClick={() => openRoomTypeDialog()}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-room-type\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    Add Room Type\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  {roomTypes.length > 0 ? (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Daily Cost</TableHead>\n                          <TableHead>Total Beds</TableHead>\n                          <TableHead>Occupied Beds</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {roomTypes.map((roomType) => (\n                          <TableRow key={roomType.id}>\n                            <TableCell className=\"font-medium\">{roomType.name}</TableCell>\n                            <TableCell>\n                              <Badge className={getCategoryColor(roomType.category)} variant=\"secondary\">\n                                <div className=\"flex items-center gap-1\">\n                                  {getCategoryIcon(roomType.category)}\n                                  {roomType.category}\n                                </div>\n                              </Badge>\n                            </TableCell>\n                            <TableCell>₹{roomType.dailyCost.toLocaleString()}</TableCell>\n                            <TableCell>{roomType.totalBeds || 0}</TableCell>\n                            <TableCell>{roomType.occupiedBeds || 0}</TableCell>\n                            <TableCell>\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  onClick={() => openRoomTypeDialog(roomType)}\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  onClick={() => {\n                                    if (confirm(`Are you sure you want to delete \"${roomType.name}\"? This action cannot be undone.`)) {\n                                      deleteRoomTypeMutation.mutate(roomType.id);\n                                    }\n                                  }}\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                  disabled={deleteRoomTypeMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">No room types defined yet</p>\n                      <Button\n                        onClick={() => openRoomTypeDialog()}\n                        className=\"mt-4\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add First Room Type\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Rooms Section */}\n            {roomsSubTab === \"rooms\" && (\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Individual Rooms {selectedRoomTypeId && `- ${roomTypes.find(rt => rt.id === selectedRoomTypeId)?.name}`}</CardTitle>\n                  <Button\n                    onClick={() => openRoomDialog()}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-room\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    Add Room\n                  </Button>\n                </CardHeader>\n                \n                {/* Sub-navigation for Rooms */}\n                <div className=\"px-6 pb-4\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Button\n                      onClick={() => setSelectedRoomTypeId(\"\")}\n                      variant={selectedRoomTypeId === \"\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Bed className=\"h-4 w-4\" />\n                      All Rooms\n                    </Button>\n                    {roomTypes.map((roomType) => (\n                      <Button\n                        key={roomType.id}\n                        onClick={() => setSelectedRoomTypeId(roomType.id)}\n                        variant={selectedRoomTypeId === roomType.id ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"flex items-center gap-2\"\n                      >\n                        {getCategoryIcon(roomType.category)}\n                        {roomType.name}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n                <CardContent>\n                  {(() => {\n                    const filteredRooms = selectedRoomTypeId \n                      ? rooms.filter(room => room.roomTypeId === selectedRoomTypeId)\n                      : rooms;\n                    \n                    return filteredRooms.length > 0 ? (\n                      <div className=\"grid grid-cols-6 gap-4\">\n                        {filteredRooms.map((room) => (\n                          <div\n                            key={room.id}\n                            className=\"bg-white border border-gray-200 rounded-lg p-3 flex items-center justify-between shadow-sm hover:shadow-md transition-shadow\"\n                            style={{ aspectRatio: '3/1' }}\n                          >\n                            <div className=\"flex flex-col justify-center\">\n                              <span className=\"font-medium text-sm text-gray-900\">\n                                {room.roomNumber}\n                              </span>\n                            </div>\n                            <Button\n                              onClick={() => {\n                                if (confirm(`Are you sure you want to delete room \"${room.roomNumber}\"? This action cannot be undone.`)) {\n                                  deleteRoomMutation.mutate(room.id);\n                                }\n                              }}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 h-6 w-6 p-0\"\n                              disabled={deleteRoomMutation.isPending}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Bed className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-500\">\n                          {selectedRoomTypeId ? `No ${roomTypes.find(rt => rt.id === selectedRoomTypeId)?.name} rooms defined yet` : `No individual rooms defined yet`}\n                        </p>\n                        <Button\n                          onClick={() => openRoomDialog()}\n                          className=\"mt-4\"\n                        >\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Room\n                        </Button>\n                      </div>\n                    );\n                  })()}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        ) : (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                {getServiceCategoryIcon(activeTab)}\n                {serviceCategories.find(cat => cat.key === activeTab)?.label}\n              </CardTitle>\n              <Button\n                onClick={() => openServiceDialog()}\n                className=\"flex items-center gap-2\"\n                data-testid={`button-add-${activeTab}`}\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Service\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {filteredServices.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Service Name</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredServices.map((service) => (\n                      <TableRow key={service.id}>\n                        <TableCell className=\"font-medium\">{service.name}</TableCell>\n                        <TableCell>\n                          {(service.category !== 'rooms' && service.price === 0) \n                            ? <Badge variant=\"outline\" className=\"text-purple-700 border-purple-300\">Variable</Badge>\n                            : `₹${service.price.toLocaleString()}`\n                          }\n                        </TableCell>\n                        <TableCell>{service.description || \"N/A\"}</TableCell>\n                        <TableCell>\n                          <Badge \n                            className={service.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'} \n                            variant=\"secondary\"\n                          >\n                            {service.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              onClick={() => openServiceDialog(service)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              onClick={() => {\n                                if (confirm(`Are you sure you want to delete \"${service.name}\"? This action cannot be undone.`)) {\n                                  deleteServiceMutation.mutate(service.id);\n                                }\n                              }}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              disabled={deleteServiceMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-8\">\n                  {getServiceCategoryIcon(activeTab)}\n                  <p className=\"text-gray-500 mt-4\">No {activeTab} services defined yet</p>\n                  <Button\n                    onClick={() => openServiceDialog()}\n                    className=\"mt-4\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add First Service\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Room Type Dialog */}\n        <Dialog open={isRoomTypeDialogOpen} onOpenChange={setIsRoomTypeDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingRoomType ? 'Edit Room Type' : 'Add Room Type'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={roomTypeForm.handleSubmit(onRoomTypeSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Room Type Name *</Label>\n                  <Input\n                    {...roomTypeForm.register(\"name\")}\n                    placeholder=\"e.g., General Ward\"\n                    data-testid=\"input-room-type-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Category *</Label>\n                  <Select\n                    value={roomTypeForm.watch(\"category\")}\n                    onValueChange={(value) => roomTypeForm.setValue(\"category\", value)}\n                    data-testid=\"select-room-category\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ward\">Ward</SelectItem>\n                      <SelectItem value=\"icu\">ICU</SelectItem>\n                      <SelectItem value=\"emergency\">Emergency</SelectItem>\n                      <SelectItem value=\"ot\">Operation Theater</SelectItem>\n                      <SelectItem value=\"room\">Room</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Daily Cost (₹) *</Label>\n                <Input\n                  type=\"number\"\n                  {...roomTypeForm.register(\"dailyCost\", { valueAsNumber: true })}\n                  placeholder=\"Enter daily cost\"\n                  data-testid=\"input-daily-cost\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Total Beds *</Label>\n                <Input\n                  type=\"number\"\n                  {...roomTypeForm.register(\"totalBeds\", { valueAsNumber: true })}\n                  placeholder=\"Enter total number of beds\"\n                  data-testid=\"input-total-beds\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsRoomTypeDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createRoomTypeMutation.isPending}\n                >\n                  {createRoomTypeMutation.isPending \n                    ? \"Saving...\" \n                    : editingRoomType \n                      ? \"Update Room Type\" \n                      : \"Add Room Type\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Room Dialog */}\n        <Dialog open={isRoomDialogOpen} onOpenChange={setIsRoomDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingRoom ? 'Edit Room' : 'Add Room'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={roomForm.handleSubmit(onRoomSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Room Number *</Label>\n                <Input\n                  {...roomForm.register(\"roomNumber\")}\n                  placeholder=\"e.g., GW-1, ICU-1, PR-1, AR-1\"\n                  data-testid=\"input-room-number\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Room Type *</Label>\n                <Select\n                  value={roomForm.watch(\"roomTypeId\")}\n                  onValueChange={(value) => roomForm.setValue(\"roomTypeId\", value)}\n                  disabled={!!selectedRoomTypeId && !editingRoom}\n                  data-testid=\"select-room-type\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select room type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roomTypes.map((roomType) => (\n                      <SelectItem key={roomType.id} value={roomType.id}>\n                        {roomType.name} - ₹{roomType.dailyCost}/day\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {selectedRoomTypeId && !editingRoom && (\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Auto-selected: {roomTypes.find(rt => rt.id === selectedRoomTypeId)?.name}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsRoomDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createRoomMutation.isPending}\n                >\n                  {createRoomMutation.isPending \n                    ? \"Saving...\" \n                    : editingRoom \n                      ? \"Update Room\" \n                      : \"Add Room\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Service Dialog */}\n        <Dialog open={isServiceDialogOpen} onOpenChange={setIsServiceDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingService ? 'Edit Service' : `Add ${serviceCategories.find(cat => cat.key === activeTab)?.label} Service`}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={serviceForm.handleSubmit(onServiceSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Service Name *</Label>\n                  <Input\n                    {...serviceForm.register(\"name\")}\n                    placeholder={`e.g., ${activeTab === 'diagnostics' ? 'ECG' : activeTab === 'procedures' ? 'Dressing' : activeTab === 'operations' ? 'Appendectomy' : activeTab === 'misc' ? 'Ambulance Service' : 'Service Name'}`}\n                    data-testid=\"input-service-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Price (₹) {activeTab !== 'rooms' ? '(Optional - Variable Pricing)' : '*'}</Label>\n                  <Input\n                    type=\"number\"\n                    {...serviceForm.register(\"price\", { valueAsNumber: true })}\n                    placeholder={activeTab !== 'rooms' ? 'Leave blank for variable pricing' : 'Enter price'}\n                    data-testid=\"input-service-price\"\n                  />\n                  {activeTab !== 'rooms' && (\n                    <p className=\"text-sm text-gray-500\">Price can be entered when adding to patient if left blank</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Description</Label>\n                <Textarea\n                  {...serviceForm.register(\"description\")}\n                  placeholder=\"Optional description of the service\"\n                  data-testid=\"textarea-service-description\"\n                />\n              </div>\n\n              {/* Doctor Assignment Section */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-base font-semibold\">Doctor Assignment (Optional)</Label>\n                  {serviceDoctors.length === 0 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={addDoctorToService}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      Add Doctor\n                    </Button>\n                  )}\n                </div>\n\n                {serviceDoctors.map((doctor, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 flex-1\">\n                        <div className=\"space-y-2\">\n                          <Label>Doctor {index + 1}</Label>\n                          <Select\n                            value={doctor.id}\n                            onValueChange={(value) => updateDoctorShare(index, \"id\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select doctor\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {doctors.map((doc: any) => (\n                                <SelectItem key={doc.id} value={doc.id}>\n                                  {doc.name} - {doc.specialization}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        {serviceDoctors.length > 1 && (\n                          <div className=\"space-y-2\">\n                            <Label>Share (₹)</Label>\n                            <Input\n                              type=\"number\"\n                              value={doctor.share || \"\"}\n                              onChange={(e) => updateDoctorShare(index, \"share\", parseFloat(e.target.value) || 0)}\n                              placeholder=\"Doctor's share amount\"\n                            />\n                          </div>\n                        )}\n                      </div>\n\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeDoctorFromService(index)}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    {index === serviceDoctors.length - 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={addDoctorToService}\n                        className=\"flex items-center gap-2 mt-2\"\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                        Add Another Doctor\n                      </Button>\n                    )}\n                  </div>\n                ))}\n\n                {serviceDoctors.length > 1 && (\n                  <div className=\"bg-blue-50 p-3 rounded-lg\">\n                    <p className=\"text-sm text-blue-800 font-medium\">Cost Distribution</p>\n                    <p className=\"text-sm text-blue-600\">\n                      Total service price: ₹{serviceForm.watch(\"price\") || 0}\n                    </p>\n                    <p className=\"text-sm text-blue-600\">\n                      Total doctor shares: ₹{serviceDoctors.reduce((sum, doc) => sum + (doc.share || 0), 0)}\n                    </p>\n                    <p className=\"text-sm text-blue-600\">\n                      Hospital share: ₹{Math.max(0, (serviceForm.watch(\"price\") || 0) - serviceDoctors.reduce((sum, doc) => sum + (doc.share || 0), 0))}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsServiceDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createServiceMutation.isPending}\n                >\n                  {createServiceMutation.isPending \n                    ? \"Saving...\" \n                    : editingService \n                      ? \"Update Service\" \n                      : \"Add Service\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":43567},"client/src/pages/settings.tsx":{"content":"import React, { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Settings as SettingsIcon, \n  Users, \n  Shield, \n  Database, \n  Bell, \n  Palette,\n  Plus,\n  Edit,\n  Trash2,\n  UserPlus\n} from \"lucide-react\";\nimport { insertServiceSchema, insertUserSchema } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { Service, User } from \"@shared/schema\";\n\nexport default function Settings() {\n  const [isNewServiceOpen, setIsNewServiceOpen] = useState(false);\n  const [isNewUserOpen, setIsNewUserOpen] = useState(false);\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [hospitalLogo, setHospitalLogo] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: hospitalSettings, isLoading: settingsLoading } = useQuery({\n    queryKey: [\"/api/settings/hospital\"],\n  });\n\n  const saveHospitalSettingsMutation = useMutation({\n    mutationFn: async (settingsData: any) => {\n      const response = await fetch(\"/api/settings/hospital\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(settingsData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to save hospital settings\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/hospital\"] });\n      toast({\n        title: \"Settings saved successfully\",\n        description: \"Hospital information has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error saving settings\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (serviceData: any) => {\n      const response = await fetch(\"/api/services\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(serviceData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create service\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setIsNewServiceOpen(false);\n      serviceForm.reset();\n      toast({\n        title: \"Service created successfully\",\n        description: \"The service has been added to the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating service\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"hospital_token\")}`,\n        },\n        body: JSON.stringify(userData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create user\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setIsNewUserOpen(false);\n      userForm.reset();\n      toast({\n        title: \"User created successfully\",\n        description: \"The user account has been created.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error creating user\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const serviceForm = useForm({\n    resolver: zodResolver(insertServiceSchema),\n    defaultValues: {\n      name: \"\",\n      category: \"\",\n      price: 0,\n      description: \"\",\n    },\n  });\n\n  const userForm = useForm({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      fullName: \"\",\n      role: \"\",\n    },\n  });\n\n  const hospitalForm = useForm({\n    defaultValues: {\n      name: hospitalSettings?.name || \"MedCare Pro Hospital\",\n      address: hospitalSettings?.address || \"123 Healthcare Street, Medical District, City - 123456\",\n      phone: hospitalSettings?.phone || \"+91 98765 43210\",\n      email: hospitalSettings?.email || \"info@medcarepro.com\",\n      registrationNumber: hospitalSettings?.registrationNumber || \"\",\n    },\n  });\n\n  // Update form when hospital settings are loaded\n  React.useEffect(() => {\n    if (hospitalSettings) {\n      hospitalForm.reset({\n        name: hospitalSettings.name,\n        address: hospitalSettings.address,\n        phone: hospitalSettings.phone,\n        email: hospitalSettings.email,\n        registrationNumber: hospitalSettings.registrationNumber,\n      });\n      setHospitalLogo(hospitalSettings.logoPath);\n    }\n  }, [hospitalSettings, hospitalForm]);\n\n  const onServiceSubmit = (data: any) => {\n    createServiceMutation.mutate(data);\n  };\n\n  const onUserSubmit = (data: any) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (file.size > 2 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image under 2MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      setHospitalLogo(result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const onHospitalSettingsSubmit = (data: any) => {\n    saveHospitalSettingsMutation.mutate({\n      ...data,\n      logoPath: hospitalLogo,\n    });\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const serviceCategories = [\n    \"consultation\",\n    \"pathology\", \n    \"radiology\",\n    \"procedure\",\n    \"surgery\",\n    \"pharmacy\",\n    \"emergency\"\n  ];\n\n  const userRoles = [\n    \"admin\",\n    \"doctor\",\n    \"receptionist\", \n    \"billing_staff\"\n  ];\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'consultation':\n        return 'bg-blue-100 text-blue-800';\n      case 'pathology':\n        return 'bg-purple-100 text-purple-800';\n      case 'radiology':\n        return 'bg-green-100 text-green-800';\n      case 'procedure':\n        return 'bg-orange-100 text-orange-800';\n      case 'surgery':\n        return 'bg-red-100 text-red-800';\n      case 'pharmacy':\n        return 'bg-teal-100 text-teal-800';\n      case 'emergency':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'bg-red-100 text-red-800';\n      case 'doctor':\n        return 'bg-blue-100 text-blue-800';\n      case 'receptionist':\n        return 'bg-green-100 text-green-800';\n      case 'billing_staff':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Only show settings if user is admin\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"System Settings\" />\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Shield className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Access Restricted</h3>\n              <p className=\"text-muted-foreground\">\n                Only administrators can access system settings.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"System Settings\" />\n      \n      <div className=\"p-6\">\n        <Tabs defaultValue=\"services\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"services\" data-testid=\"tab-services\">Services</TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"system\" data-testid=\"tab-system\">System</TabsTrigger>\n            <TabsTrigger value=\"backup\" data-testid=\"tab-backup\">Backup</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"services\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Service Management</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Manage billable services and their pricing\n                    </p>\n                  </div>\n                  <Button \n                    onClick={() => setIsNewServiceOpen(true)}\n                    className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                    data-testid=\"button-add-service\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Service\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {servicesLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Loading services...</p>\n                  </div>\n                ) : services?.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <SettingsIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No services configured</p>\n                    <Button \n                      onClick={() => setIsNewServiceOpen(true)}\n                      className=\"mt-4\"\n                      data-testid=\"button-first-service\"\n                    >\n                      Add your first service\n                    </Button>\n                  </div>\n                ) : (\n                  <Table data-testid=\"services-table\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Service Name</TableHead>\n                        <TableHead>Category</TableHead>\n                        <TableHead>Price</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {services?.map((service: Service) => (\n                        <TableRow key={service.id} data-testid={`service-row-${service.id}`}>\n                          <TableCell className=\"font-medium\" data-testid={`service-name-${service.id}`}>\n                            {service.name}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant=\"secondary\" \n                              className={getCategoryColor(service.category)}\n                              data-testid={`service-category-${service.id}`}\n                            >\n                              {service.category}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"font-medium\" data-testid={`service-price-${service.id}`}>\n                            {formatCurrency(service.price)}\n                          </TableCell>\n                          <TableCell className=\"max-w-xs truncate\" data-testid={`service-description-${service.id}`}>\n                            {service.description || \"No description\"}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant={service.isActive ? \"default\" : \"secondary\"}\n                              data-testid={`service-status-${service.id}`}\n                            >\n                              {service.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => setSelectedService(service)}\n                                data-testid={`button-edit-service-${service.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                className=\"text-destructive hover:text-destructive\"\n                                data-testid={`button-delete-service-${service.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>User Management</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Manage system users and their roles\n                    </p>\n                  </div>\n                  <Button \n                    onClick={() => setIsNewUserOpen(true)}\n                    className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                    data-testid=\"button-add-user\"\n                  >\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Add User\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">User listing functionality coming soon</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"system\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>System Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base\">Email Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">Send email alerts for important events</p>\n                    </div>\n                    <Switch data-testid=\"switch-email-notifications\" />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base\">SMS Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">Send SMS alerts to patients</p>\n                    </div>\n                    <Switch data-testid=\"switch-sms-notifications\" />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base\">Auto Backup</Label>\n                      <p className=\"text-sm text-muted-foreground\">Automatically backup data daily</p>\n                    </div>\n                    <Switch defaultChecked data-testid=\"switch-auto-backup\" />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-base\">Audit Logging</Label>\n                      <p className=\"text-sm text-muted-foreground\">Track all user actions</p>\n                    </div>\n                    <Switch defaultChecked data-testid=\"switch-audit-logging\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Hospital Information</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={hospitalForm.handleSubmit(onHospitalSettingsSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Hospital Logo</Label>\n                      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                        <div className=\"space-y-2\">\n                          {hospitalLogo ? (\n                            <div className=\"w-16 h-16 mx-auto rounded-lg overflow-hidden\">\n                              <img \n                                src={hospitalLogo} \n                                alt=\"Hospital Logo\" \n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                          ) : (\n                            <div className=\"w-16 h-16 mx-auto bg-gray-100 rounded-lg flex items-center justify-center\">\n                              <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                              </svg>\n                            </div>\n                          )}\n                          <div>\n                            <Input \n                              ref={fileInputRef}\n                              type=\"file\" \n                              accept=\"image/*\" \n                              className=\"hidden\" \n                              id=\"logo-upload\"\n                              onChange={handleLogoUpload}\n                              data-testid=\"input-hospital-logo\"\n                            />\n                            <Label \n                              htmlFor=\"logo-upload\" \n                              className=\"cursor-pointer text-sm text-blue-600 hover:text-blue-500\"\n                            >\n                              {hospitalLogo ? 'Change Hospital Logo' : 'Upload Hospital Logo'}\n                            </Label>\n                            <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG, GIF up to 2MB</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Hospital Name</Label>\n                      <Input \n                        {...hospitalForm.register(\"name\")}\n                        data-testid=\"input-hospital-name\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label>Address</Label>\n                      <Textarea \n                        {...hospitalForm.register(\"address\")}\n                        rows={3}\n                        data-testid=\"input-hospital-address\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Phone</Label>\n                        <Input \n                          {...hospitalForm.register(\"phone\")}\n                          data-testid=\"input-hospital-phone\" \n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label>Email</Label>\n                        <Input \n                          {...hospitalForm.register(\"email\")}\n                          data-testid=\"input-hospital-email\" \n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label>Registration Number</Label>\n                      <Input \n                        {...hospitalForm.register(\"registrationNumber\")}\n                        placeholder=\"Hospital registration number\"\n                        data-testid=\"input-hospital-registration\" \n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\"\n                      className=\"w-full\" \n                      disabled={saveHospitalSettingsMutation.isPending}\n                      data-testid=\"button-save-hospital-info\"\n                    >\n                      {saveHospitalSettingsMutation.isPending ? \"Saving...\" : \"Save Hospital Information\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"backup\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Data Backup</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"text-center py-4\">\n                    <Database className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground mb-4\">Protect your hospital data with regular backups</p>\n                    \n                    <div className=\"space-y-2\">\n                      <Button className=\"w-full\" data-testid=\"button-create-backup\">\n                        <Database className=\"w-4 h-4 mr-2\" />\n                        Create Backup Now\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-restore-backup\">\n                        Restore from Backup\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground\">\n                    <p>Last backup: Never</p>\n                    <p>Next scheduled backup: Tonight at 2:00 AM</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Export Data</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Export hospital data for reporting or compliance purposes\n                  </p>\n                  \n                  <div className=\"space-y-2\">\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-export-patients\">\n                      Export Patient Data\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-export-bills\">\n                      Export Billing Data\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-export-reports\">\n                      Export Lab Reports\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-export-audit\">\n                      Export Audit Logs\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* New Service Dialog */}\n      <Dialog open={isNewServiceOpen} onOpenChange={setIsNewServiceOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-service-dialog\">\n          <DialogHeader>\n            <DialogTitle>Add New Service</DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={serviceForm.handleSubmit(onServiceSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"serviceName\">Service Name *</Label>\n                <Input\n                  id=\"serviceName\"\n                  {...serviceForm.register(\"name\")}\n                  placeholder=\"e.g., Blood Test\"\n                  data-testid=\"input-service-name\"\n                />\n                {serviceForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive\">{serviceForm.formState.errors.name.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category *</Label>\n                <Select onValueChange={(value) => serviceForm.setValue(\"category\", value)}>\n                  <SelectTrigger data-testid=\"select-service-category\">\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {serviceCategories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category.charAt(0).toUpperCase() + category.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {serviceForm.formState.errors.category && (\n                  <p className=\"text-sm text-destructive\">{serviceForm.formState.errors.category.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"price\">Price (₹) *</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                step=\"0.01\"\n                {...serviceForm.register(\"price\", { valueAsNumber: true })}\n                placeholder=\"0.00\"\n                data-testid=\"input-service-price\"\n              />\n              {serviceForm.formState.errors.price && (\n                <p className=\"text-sm text-destructive\">{serviceForm.formState.errors.price.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                {...serviceForm.register(\"description\")}\n                placeholder=\"Optional description of the service\"\n                rows={3}\n                data-testid=\"input-service-description\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewServiceOpen(false)}\n                data-testid=\"button-cancel-service\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createServiceMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-service\"\n              >\n                {createServiceMutation.isPending ? \"Adding...\" : \"Add Service\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* New User Dialog */}\n      <Dialog open={isNewUserOpen} onOpenChange={setIsNewUserOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"new-user-dialog\">\n          <DialogHeader>\n            <DialogTitle>Add New User</DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={userForm.handleSubmit(onUserSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Full Name *</Label>\n                <Input\n                  id=\"fullName\"\n                  {...userForm.register(\"fullName\")}\n                  placeholder=\"John Doe\"\n                  data-testid=\"input-user-fullname\"\n                />\n                {userForm.formState.errors.fullName && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.fullName.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username *</Label>\n                <Input\n                  id=\"username\"\n                  {...userForm.register(\"username\")}\n                  placeholder=\"johndoe\"\n                  data-testid=\"input-user-username\"\n                />\n                {userForm.formState.errors.username && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.username.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  {...userForm.register(\"password\")}\n                  placeholder=\"••••••••\"\n                  data-testid=\"input-user-password\"\n                />\n                {userForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.password.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">Role *</Label>\n                <Select onValueChange={(value) => userForm.setValue(\"role\", value)}>\n                  <SelectTrigger data-testid=\"select-user-role\">\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {userRoles.map((role) => (\n                      <SelectItem key={role} value={role}>\n                        {role.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {userForm.formState.errors.role && (\n                  <p className=\"text-sm text-destructive\">{userForm.formState.errors.role.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsNewUserOpen(false)}\n                data-testid=\"button-cancel-user\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createUserMutation.isPending}\n                className=\"bg-medical-blue hover:bg-medical-blue/90\"\n                data-testid=\"button-save-user\"\n              >\n                {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":33262},"client/src/components/billing/bill-summary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Save, Loader2 } from \"lucide-react\";\nimport type { Service } from \"@shared/schema\";\n\ninterface BillItem {\n  serviceId: string;\n  service: Service;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\ninterface BillTotals {\n  subtotal: number;\n  taxAmount: number;\n  discountAmount: number;\n  totalAmount: number;\n}\n\ninterface BillSummaryProps {\n  billItems: BillItem[];\n  paymentMethod: \"cash\" | \"card\" | \"upi\" | \"insurance\";\n  onPaymentMethodChange: (method: \"cash\" | \"card\" | \"upi\" | \"insurance\") => void;\n  onGenerateBill: () => void;\n  isGenerating: boolean;\n  recentBills: any[];\n  totals: BillTotals;\n}\n\nexport default function BillSummary({\n  billItems,\n  paymentMethod,\n  onPaymentMethodChange,\n  onGenerateBill,\n  isGenerating,\n  recentBills,\n  totals,\n}: BillSummaryProps) {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-orange-100 text-orange-800';\n      case 'partial':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Bill Summary */}\n      <Card className=\"shadow-sm\">\n        <CardHeader>\n          <CardTitle>Bill Summary</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\" data-testid=\"bill-totals\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Subtotal:</span>\n              <span className=\"font-medium\" data-testid=\"subtotal\">\n                {formatCurrency(totals.subtotal)}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Tax (18%):</span>\n              <span className=\"font-medium\" data-testid=\"tax-amount\">\n                {formatCurrency(totals.taxAmount)}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Discount:</span>\n              <span className=\"font-medium text-green-600\" data-testid=\"discount-amount\">\n                -{formatCurrency(totals.discountAmount)}\n              </span>\n            </div>\n            <hr className=\"border-border\" />\n            <div className=\"flex justify-between\">\n              <span className=\"font-semibold\">Total Amount:</span>\n              <span className=\"font-bold text-xl text-medical-blue\" data-testid=\"total-amount\">\n                {formatCurrency(totals.totalAmount)}\n              </span>\n            </div>\n          </div>\n          \n          {/* Payment Method */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">Payment Method</label>\n            <Select value={paymentMethod} onValueChange={onPaymentMethodChange}>\n              <SelectTrigger data-testid=\"payment-method-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"cash\">Cash</SelectItem>\n                <SelectItem value=\"card\">Card</SelectItem>\n                <SelectItem value=\"upi\">UPI</SelectItem>\n                <SelectItem value=\"insurance\">Insurance</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <Button\n              onClick={onGenerateBill}\n              className=\"w-full bg-medical-blue hover:bg-medical-blue/90\"\n              disabled={isGenerating || billItems.length === 0}\n              data-testid=\"button-generate-bill\"\n            >\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Generate Bill\n                </>\n              )}\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              disabled={billItems.length === 0}\n              data-testid=\"button-save-draft\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save as Draft\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Bills */}\n      <Card className=\"shadow-sm\">\n        <CardHeader>\n          <CardTitle>Recent Bills</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recentBills.length === 0 ? (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              <p>No recent bills</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\" data-testid=\"recent-bills\">\n              {recentBills.map((billData: any) => {\n                const bill = billData.bill || billData;\n                const patient = billData.patient;\n                \n                return (\n                  <div\n                    key={bill.id}\n                    className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                    data-testid={`recent-bill-${bill.id}`}\n                  >\n                    <div>\n                      <p className=\"font-medium text-sm\" data-testid={`bill-number-${bill.id}`}>\n                        {bill.billNumber}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`bill-patient-${bill.id}`}>\n                        {patient?.name || \"Unknown Patient\"}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium text-sm\" data-testid={`bill-amount-${bill.id}`}>\n                        {formatCurrency(bill.totalAmount)}\n                      </p>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusColor(bill.paymentStatus)}\n                        data-testid={`bill-status-${bill.id}`}\n                      >\n                        {bill.paymentStatus}\n                      </Badge>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n          \n          <Button\n            variant=\"ghost\"\n            className=\"w-full mt-4 text-medical-blue hover:text-medical-blue/90\"\n            data-testid=\"button-view-all-bills\"\n          >\n            View All Bills\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7200},"client/src/components/billing/patient-search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Plus, Trash2 } from \"lucide-react\";\nimport type { Patient, Service } from \"@shared/schema\";\n\ninterface BillItem {\n  serviceId: string;\n  service: Service;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\ninterface PatientSearchProps {\n  selectedPatient: Patient | null;\n  onPatientSelect: (patient: Patient) => void;\n  billItems: BillItem[];\n  onAddService: () => void;\n  onRemoveService: (serviceId: string) => void;\n  onUpdateQuantity: (serviceId: string, quantity: number) => void;\n}\n\nexport default function PatientSearch({\n  selectedPatient,\n  onPatientSelect,\n  billItems,\n  onAddService,\n  onRemoveService,\n  onUpdateQuantity,\n}: PatientSearchProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: searchResults } = useQuery({\n    queryKey: [\"/api/patients/search\", { q: searchQuery }],\n    enabled: searchQuery.length > 0,\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle>Create New Bill</CardTitle>\n        <p className=\"text-sm text-muted-foreground\">Select patient and add services to generate bill</p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Patient Search */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Search Patient</label>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search by name, ID, or phone...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-patient-search\"\n            />\n            <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n          </div>\n          \n          {/* Search Results */}\n          {searchResults && searchResults.length > 0 && (\n            <div className=\"mt-3 space-y-2 max-h-40 overflow-y-auto\" data-testid=\"patient-search-results\">\n              {searchResults.map((patient: Patient) => (\n                <div\n                  key={patient.id}\n                  className=\"p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                  onClick={() => {\n                    onPatientSelect(patient);\n                    setSearchQuery(\"\");\n                  }}\n                  data-testid={`patient-result-${patient.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{patient.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        ID: {patient.patientId} | Phone: {patient.phone}\n                      </p>\n                    </div>\n                    <Badge variant=\"secondary\">\n                      {patient.gender} | {patient.age}y\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Selected Patient Info */}\n        {selectedPatient && (\n          <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"selected-patient-info\">\n            <h4 className=\"font-medium mb-2\">Selected Patient</h4>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Name:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-name\">{selectedPatient.name}</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">ID:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-id\">{selectedPatient.patientId}</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Age:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-age\">{selectedPatient.age} years</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Phone:</span>\n                <span className=\"ml-2 font-medium\" data-testid=\"patient-phone\">{selectedPatient.phone}</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Services & Charges */}\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"font-medium\">Services & Charges</h4>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onAddService}\n              data-testid=\"button-add-service\"\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Add Service\n            </Button>\n          </div>\n          \n          {billItems.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>No services added yet</p>\n              <Button variant=\"outline\" onClick={onAddService} className=\"mt-2\">\n                Add your first service\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-3\" data-testid=\"bill-items\">\n              {billItems.map((item) => (\n                <div\n                  key={item.serviceId}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  data-testid={`bill-item-${item.serviceId}`}\n                >\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{item.service.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{item.service.category}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onUpdateQuantity(item.serviceId, item.quantity - 1)}\n                        data-testid={`quantity-decrease-${item.serviceId}`}\n                      >\n                        -\n                      </Button>\n                      <span className=\"w-8 text-center\" data-testid={`quantity-${item.serviceId}`}>\n                        {item.quantity}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onUpdateQuantity(item.serviceId, item.quantity + 1)}\n                        data-testid={`quantity-increase-${item.serviceId}`}\n                      >\n                        +\n                      </Button>\n                    </div>\n                    <span className=\"font-medium min-w-20 text-right\" data-testid={`total-price-${item.serviceId}`}>\n                      {formatCurrency(item.totalPrice)}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onRemoveService(item.serviceId)}\n                      className=\"text-destructive hover:text-destructive\"\n                      data-testid={`remove-service-${item.serviceId}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7901},"client/src/components/billing/service-selector.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search } from \"lucide-react\";\nimport type { Service } from \"@shared/schema\";\n\ninterface ServiceSelectorProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectService: (service: Service) => void;\n}\n\nexport default function ServiceSelector({\n  isOpen,\n  onClose,\n  onSelectService,\n}: ServiceSelectorProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: services, isLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n    enabled: isOpen,\n  });\n\n  const { data: searchResults } = useQuery({\n    queryKey: [\"/api/services/search\", { q: searchQuery }],\n    enabled: searchQuery.length > 0 && isOpen,\n  });\n\n  const displayServices = searchQuery ? searchResults : services;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'consultation':\n        return 'bg-blue-100 text-blue-800';\n      case 'pathology':\n        return 'bg-purple-100 text-purple-800';\n      case 'radiology':\n        return 'bg-green-100 text-green-800';\n      case 'procedure':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"service-selector-modal\">\n        <DialogHeader>\n          <DialogTitle>Add Service</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search services...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-service-search\"\n            />\n            <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n          </div>\n          \n          {/* Service List */}\n          <div className=\"space-y-2 max-h-96 overflow-y-auto\" data-testid=\"service-list\">\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-blue mx-auto\"></div>\n                <p className=\"text-sm text-muted-foreground mt-2\">Loading services...</p>\n              </div>\n            ) : displayServices && displayServices.length > 0 ? (\n              displayServices.map((service: Service) => (\n                <div\n                  key={service.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                  onClick={() => {\n                    onSelectService(service);\n                    setSearchQuery(\"\");\n                  }}\n                  data-testid={`service-option-${service.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <p className=\"font-medium\">{service.name}</p>\n                      <Badge variant=\"secondary\" className={getCategoryColor(service.category)}>\n                        {service.category}\n                      </Badge>\n                    </div>\n                    {service.description && (\n                      <p className=\"text-sm text-muted-foreground\">{service.description}</p>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"font-medium text-lg\" data-testid={`service-price-${service.id}`}>\n                      {formatCurrency(service.price)}\n                    </span>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No services found</p>\n                {searchQuery && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setSearchQuery(\"\")}\n                    className=\"mt-2\"\n                  >\n                    Clear search\n                  </Button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4787},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Hospital, \n  FileText, \n  Users, \n  TestTube, \n  UserPlus, \n  BarChart3, \n  Settings,\n  LogOut,\n  Building2\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: BarChart3 },\n  { name: \"Patient Registration\", href: \"/patients\", icon: Users },\n  { name: \"Pathology Tests\", href: \"/pathology\", icon: TestTube },\n  { name: \"Doctor Management\", href: \"/doctors\", icon: UserPlus },\n  { name: \"Service Management\", href: \"/services\", icon: Building2 },\n  { name: \"Billing & Invoicing\", href: \"/billing\", icon: FileText },\n  { name: \"System Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const isActive = (href: string) => {\n    return location === href || (href !== \"/\" && location.startsWith(href));\n  };\n\n  return (\n    <aside className=\"w-64 bg-surface border-r border-border flex flex-col shadow-sm\">\n      {/* Logo and Hospital Name */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-medical-blue rounded-lg flex items-center justify-center\">\n            <Hospital className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-bold text-text-dark\">MedCare Pro</h1>\n            <p className=\"text-sm text-text-muted\">Hospital Management</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => (\n          <Link \n            key={item.name} \n            href={item.href}\n            className={cn(\n              \"flex items-center space-x-3 px-3 py-3 rounded-lg font-medium transition-colors\",\n              isActive(item.href)\n                ? \"bg-medical-blue text-white\"\n                : \"text-text-muted hover:bg-muted hover:text-text-dark\"\n            )}\n            data-testid={`nav-${item.href === \"/\" ? \"dashboard\" : item.href.substring(1)}`}\n          >\n            <item.icon className=\"w-5 h-5\" />\n            <span>{item.name}</span>\n          </Link>\n        ))}\n      </nav>\n\n      {/* User Profile Section */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <div className=\"w-10 h-10 bg-healthcare-green rounded-full flex items-center justify-center\">\n            <span className=\"text-white font-medium text-sm\" data-testid=\"user-initials\">\n              {user ? getInitials(user.fullName) : \"U\"}\n            </span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-text-dark truncate\" data-testid=\"user-name\">\n              {user?.fullName || \"User\"}\n            </p>\n            <p className=\"text-xs text-text-muted capitalize\" data-testid=\"user-role\">\n              {user?.role?.replace('_', ' ') || \"Role\"}\n            </p>\n          </div>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={logout}\n          className=\"w-full justify-start text-text-muted hover:text-text-dark\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </aside>\n  );\n}","size_bytes":3660},"client/src/components/layout/topbar.tsx":{"content":"import { Search, Bell, Plus } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface TopBarProps {\n  title: string;\n  searchPlaceholder?: string;\n  onSearch?: (query: string) => void;\n  onNewAction?: () => void;\n  newActionLabel?: string;\n  showNotifications?: boolean;\n  notificationCount?: number;\n}\n\nexport default function TopBar({\n  title,\n  searchPlaceholder = \"Search...\",\n  onSearch,\n  onNewAction,\n  newActionLabel = \"New\",\n  showNotifications = true,\n  notificationCount = 0,\n}: TopBarProps) {\n  const currentDate = new Date().toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n\n  return (\n    <header className=\"bg-surface border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-2xl font-bold text-text-dark\" data-testid=\"page-title\">\n            {title}\n          </h2>\n          <div className=\"flex items-center space-x-2 bg-muted px-3 py-1 rounded-full\">\n            <div className=\"w-4 h-4 text-text-muted\">📅</div>\n            <span className=\"text-sm text-text-muted\" data-testid=\"current-date\">\n              {currentDate}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search Bar */}\n          {onSearch && (\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder={searchPlaceholder}\n                className=\"w-80 pl-10\"\n                onChange={(e) => onSearch(e.target.value)}\n                data-testid=\"search-input\"\n              />\n              <Search className=\"absolute left-3 top-3 w-4 h-4 text-text-muted\" />\n            </div>\n          )}\n          \n          {/* New Action Button */}\n          {onNewAction && (\n            <Button \n              onClick={onNewAction}\n              className=\"bg-medical-blue hover:bg-medical-blue/90\"\n              data-testid=\"button-new-action\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {newActionLabel}\n            </Button>\n          )}\n          \n          {/* Notifications */}\n          {showNotifications && (\n            <div className=\"relative\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                className=\"relative\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"w-5 h-5\" />\n                {notificationCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center text-xs p-0\"\n                    data-testid=\"notification-count\"\n                  >\n                    {notificationCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3117},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admitted-today.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  UserCheck, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  Stethoscope,\n  Phone,\n  IndianRupee,\n  User\n} from \"lucide-react\";\nimport type { Admission, Patient, Doctor } from \"@shared/schema\";\n\ninterface AdmissionWithDetails extends Admission {\n  patient: Patient;\n  doctor: Doctor | null;\n}\n\nexport default function AdmittedTodayPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch today's admissions with IST timezone\n  const { data: todayAdmissions = [], isLoading } = useQuery<AdmissionWithDetails[]>({\n    queryKey: [\"/api/inpatients/admitted-today\"],\n  });\n\n  // Filter admissions based on search\n  const filteredAdmissions = useMemo(() => {\n    if (!searchQuery) return todayAdmissions;\n    \n    return todayAdmissions.filter(admission => {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        admission.patient?.name.toLowerCase().includes(searchLower) ||\n        admission.patient?.patientId.toLowerCase().includes(searchLower) ||\n        admission.admissionId.toLowerCase().includes(searchLower) ||\n        admission.currentWardType?.toLowerCase().includes(searchLower) ||\n        admission.doctor?.name.toLowerCase().includes(searchLower) ||\n        admission.reason?.toLowerCase().includes(searchLower)\n      );\n    });\n  }, [todayAdmissions, searchQuery]);\n\n  const formatTime = (dateTimeString: string) => {\n    const date = new Date(dateTimeString);\n    return date.toLocaleTimeString('en-IN', { \n      hour12: true, \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const getTotalRevenue = () => {\n    return todayAdmissions.reduce((sum, admission) => sum + (admission.initialDeposit || 0), 0);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Patients Admitted Today\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"Patients Admitted Today\" />\n      \n      <div className=\"p-6\">\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <UserCheck className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Admissions</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{todayAdmissions.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <IndianRupee className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Deposits Collected</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">₹{getTotalRevenue().toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Building2 className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Wards Occupied</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {new Set(todayAdmissions.map(p => p.currentWardType).filter(Boolean)).size}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Stethoscope className=\"h-8 w-8 text-purple-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Doctors Involved</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {new Set(todayAdmissions.map(p => p.doctorId).filter(Boolean)).size}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by patient name, ID, admission ID, ward type, doctor, or reason...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Admissions Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserCheck className=\"h-5 w-5\" />\n              Today's Admissions ({filteredAdmissions.length})\n            </CardTitle>\n            <CardDescription>\n              Patients admitted today (IST timezone) - {new Date().toLocaleDateString('en-IN')}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredAdmissions.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient Details</TableHead>\n                    <TableHead>Admission Info</TableHead>\n                    <TableHead>Ward/Room</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Reason</TableHead>\n                    <TableHead>Initial Deposit</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAdmissions.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.patient?.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            ID: {admission.patient?.patientId}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            {admission.patient?.phone}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Age: {admission.patient?.age} • {admission.patient?.gender}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-sm\">{admission.admissionId}</div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(admission.admissionDate).toLocaleDateString('en-IN')}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            {formatTime(admission.createdAt)}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.currentWardType || \"Not specified\"}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Room: {admission.currentRoomNumber || \"TBA\"}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Daily: ₹{admission.dailyCost.toLocaleString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {admission.doctor ? (\n                          <div>\n                            <div className=\"font-medium text-sm flex items-center gap-1\">\n                              <Stethoscope className=\"h-3 w-3\" />\n                              {admission.doctor.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {admission.doctor.specialization}\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">No doctor assigned</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs\">\n                          {admission.reason ? (\n                            <p className=\"text-sm\">{admission.reason}</p>\n                          ) : (\n                            <span className=\"text-gray-400\">No reason specified</span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium text-green-600\">\n                          ₹{(admission.initialDeposit || 0).toLocaleString()}\n                        </div>\n                        {admission.initialDeposit && admission.initialDeposit > 0 && (\n                          <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                            Paid\n                          </Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Patient\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <UserCheck className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No admissions match your search criteria.\" : \"No patients were admitted today.\"}\n                </p>\n                <Link href=\"/patients\">\n                  <Button className=\"mt-4\">\n                    Admit New Patient\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11629},"client/src/pages/bed-occupancy.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { \n  Bed, \n  Building2,\n  Users,\n  Activity\n} from \"lucide-react\";\n\ninterface OccupyingPatient {\n  name: string;\n  patientId: string;\n}\n\ninterface Room {\n  id: string;\n  roomNumber: string;\n  floor: string;\n  building: string;\n  capacity: number;\n  isOccupied: boolean;\n  isActive: boolean;\n  notes: string;\n  occupyingPatient: OccupyingPatient | null;\n}\n\ninterface RoomType {\n  id: string;\n  name: string;\n  category: string;\n  dailyCost: number;\n  totalBeds: number;\n  occupiedBeds: number;\n  isActive: boolean;\n  rooms: Room[];\n}\n\nexport default function BedOccupancyPage() {\n  const { data: bedOccupancy = [], isLoading } = useQuery<RoomType[]>({\n    queryKey: [\"/api/inpatients/bed-occupancy\"],\n  });\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"icu\":\n        return <Activity className=\"h-4 w-4\" />;\n      case \"emergency\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"ward\":\n        return <Building2 className=\"h-4 w-4\" />;\n      default:\n        return <Bed className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"icu\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"emergency\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"ward\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"room\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Bed Occupancy\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"space-y-6\">\n        <TopBar title=\"Bed Occupancy\" />\n        \n        <div className=\"p-6\">\n          {/* Summary Stats */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"flex items-center\">\n                  <Building2 className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Room Types</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{bedOccupancy.length}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Bed className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Beds</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {bedOccupancy.reduce((sum, rt) => sum + rt.totalBeds, 0)}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Users className=\"h-8 w-8 text-orange-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Occupied Beds</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {bedOccupancy.reduce((sum, rt) => sum + rt.occupiedBeds, 0)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Room Types and Rooms */}\n          <div className=\"space-y-6\">\n            {bedOccupancy.map((roomType) => (\n              <Card key={roomType.id}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {getCategoryIcon(roomType.category)}\n                    {roomType.name}\n                    <Badge className={getCategoryColor(roomType.category)} variant=\"secondary\">\n                      {roomType.category}\n                    </Badge>\n                  </CardTitle>\n                  <CardDescription>\n                    {roomType.occupiedBeds} of {roomType.totalBeds} beds occupied • ₹{roomType.dailyCost.toLocaleString()} per day\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {roomType.rooms.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n                      {roomType.rooms.map((room) => (\n                        <Tooltip key={room.id}>\n                          <TooltipTrigger asChild>\n                            <Card \n                              className={`cursor-pointer transition-all hover:shadow-md ${\n                                room.isOccupied \n                                  ? 'bg-green-50 border-green-200 hover:bg-green-100' \n                                  : 'bg-blue-50 border-blue-200 hover:bg-blue-100'\n                              }`}\n                            >\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Bed className={`h-4 w-4 ${\n                                      room.isOccupied ? 'text-green-600' : 'text-blue-600'\n                                    }`} />\n                                    <span className=\"font-medium text-sm\">\n                                      {room.roomNumber}\n                                    </span>\n                                  </div>\n                                  <Badge \n                                    variant={room.isOccupied ? \"default\" : \"secondary\"}\n                                    className={`text-xs ${\n                                      room.isOccupied \n                                        ? 'bg-green-100 text-green-800 hover:bg-green-100' \n                                        : 'bg-blue-100 text-blue-800 hover:bg-blue-100'\n                                    }`}\n                                  >\n                                    {room.isOccupied ? 'Occupied' : 'Available'}\n                                  </Badge>\n                                </div>\n                                {room.floor && (\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\n                                    Floor {room.floor}\n                                  </p>\n                                )}\n                              </CardContent>\n                            </Card>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <div className=\"p-2\">\n                              <p className=\"font-medium\">Room {room.roomNumber}</p>\n                              {room.floor && <p className=\"text-sm\">Floor: {room.floor}</p>}\n                              {room.building && <p className=\"text-sm\">Building: {room.building}</p>}\n                              <p className=\"text-sm\">Capacity: {room.capacity}</p>\n                              {room.isOccupied && room.occupyingPatient && (\n                                <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                                  <p className=\"text-sm font-medium\">\n                                    {room.occupyingPatient.name}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    ID: {room.occupyingPatient.patientId}\n                                  </p>\n                                </div>\n                              )}\n                              {room.notes && (\n                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                  {room.notes}\n                                </p>\n                              )}\n                            </div>\n                          </TooltipContent>\n                        </Tooltip>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-6\">\n                      <Bed className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-muted-foreground\">No rooms configured for this room type</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {bedOccupancy.length === 0 && (\n            <Card>\n              <CardContent className=\"p-12\">\n                <div className=\"text-center\">\n                  <Building2 className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Room Types Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    No room types are configured. Please add room types in the Services section.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":9784},"client/src/pages/currently-admitted.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  User, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  Stethoscope,\n  Phone,\n  MapPin\n} from \"lucide-react\";\nimport type { Admission, Patient, Doctor } from \"@shared/schema\";\n\ninterface AdmissionWithDetails extends Admission {\n  patient: Patient;\n  doctor: Doctor | null;\n}\n\nexport default function CurrentlyAdmittedPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch currently admitted patients\n  const { data: admittedPatients = [], isLoading } = useQuery<AdmissionWithDetails[]>({\n    queryKey: [\"/api/inpatients/currently-admitted\"],\n  });\n\n  // Filter patients based on search\n  const filteredPatients = useMemo(() => {\n    if (!searchQuery) return admittedPatients;\n    \n    return admittedPatients.filter(admission => {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        admission.patient?.name.toLowerCase().includes(searchLower) ||\n        admission.patient?.patientId.toLowerCase().includes(searchLower) ||\n        admission.admissionId.toLowerCase().includes(searchLower) ||\n        admission.currentWardType?.toLowerCase().includes(searchLower) ||\n        admission.doctor?.name.toLowerCase().includes(searchLower)\n      );\n    });\n  }, [admittedPatients, searchQuery]);\n\n  const calculateDays = (admissionDate: string) => {\n    const admission = new Date(admissionDate);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - admission.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Currently Admitted Patients\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"Currently Admitted Patients\" />\n      \n      <div className=\"p-6\">\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <User className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Patients</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{admittedPatients.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Building2 className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Occupied Wards</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {new Set(admittedPatients.map(p => p.currentWardType).filter(Boolean)).size}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Avg Stay (days)</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {admittedPatients.length > 0 \n                      ? Math.round(admittedPatients.reduce((sum, p) => \n                          sum + calculateDays(p.admissionDate), 0) / admittedPatients.length)\n                      : 0\n                    }\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by patient name, ID, admission ID, ward type, or doctor...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Patients Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Currently Admitted Patients ({filteredPatients.length})\n            </CardTitle>\n            <CardDescription>\n              All patients currently admitted to the hospital\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredPatients.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient Details</TableHead>\n                    <TableHead>Admission Info</TableHead>\n                    <TableHead>Ward/Room</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Stay Duration</TableHead>\n                    <TableHead>Daily Cost</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredPatients.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.patient?.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            ID: {admission.patient?.patientId}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            {admission.patient?.phone}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-sm\">{admission.admissionId}</div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(admission.admissionDate).toLocaleDateString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.currentWardType || \"Not specified\"}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Room: {admission.currentRoomNumber || \"TBA\"}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {admission.doctor ? (\n                          <div>\n                            <div className=\"font-medium text-sm flex items-center gap-1\">\n                              <Stethoscope className=\"h-3 w-3\" />\n                              {admission.doctor.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {admission.doctor.specialization}\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">No doctor assigned</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {calculateDays(admission.admissionDate)} days\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">₹{admission.dailyCost.toLocaleString()}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          Total: ₹{admission.totalCost.toLocaleString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Patient\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <User className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No patients match your search criteria.\" : \"No patients are currently admitted.\"}\n                </p>\n                <Link href=\"/patients\">\n                  <Button className=\"mt-4\">\n                    Admit New Patient\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10109},"client/src/pages/discharged-today.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  UserX, \n  Calendar, \n  Clock,\n  Search,\n  Building2,\n  Stethoscope,\n  Phone,\n  IndianRupee,\n  TrendingUp,\n  User\n} from \"lucide-react\";\nimport type { Admission, Patient, Doctor } from \"@shared/schema\";\n\ninterface AdmissionWithDetails extends Admission {\n  patient: Patient;\n  doctor: Doctor | null;\n}\n\nexport default function DischargedTodayPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch today's discharges with IST timezone\n  const { data: todayDischarges = [], isLoading } = useQuery<AdmissionWithDetails[]>({\n    queryKey: [\"/api/inpatients/discharged-today\"],\n  });\n\n  // Filter discharges based on search\n  const filteredDischarges = useMemo(() => {\n    if (!searchQuery) return todayDischarges;\n    \n    return todayDischarges.filter(admission => {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        admission.patient?.name.toLowerCase().includes(searchLower) ||\n        admission.patient?.patientId.toLowerCase().includes(searchLower) ||\n        admission.admissionId.toLowerCase().includes(searchLower) ||\n        admission.currentWardType?.toLowerCase().includes(searchLower) ||\n        admission.doctor?.name.toLowerCase().includes(searchLower) ||\n        admission.diagnosis?.toLowerCase().includes(searchLower)\n      );\n    });\n  }, [todayDischarges, searchQuery]);\n\n  const formatTime = (dateTimeString: string) => {\n    if (!dateTimeString) return 'N/A';\n    const date = new Date(dateTimeString);\n    return date.toLocaleTimeString('en-IN', { \n      hour12: true, \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const calculateStayDuration = (admissionDate: string, dischargeDate: string) => {\n    if (!dischargeDate) return 0;\n    const admission = new Date(admissionDate);\n    const discharge = new Date(dischargeDate);\n    const diffTime = Math.abs(discharge.getTime() - admission.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getTotalRevenue = () => {\n    return todayDischarges.reduce((sum, admission) => sum + (admission.totalCost || 0), 0);\n  };\n\n  const getAverageStay = () => {\n    if (todayDischarges.length === 0) return 0;\n    const totalDays = todayDischarges.reduce((sum, admission) => \n      sum + calculateStayDuration(admission.admissionDate, admission.dischargeDate || ''), 0);\n    return Math.round(totalDays / todayDischarges.length);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <TopBar title=\"Patients Discharged Today\" />\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <TopBar title=\"Patients Discharged Today\" />\n      \n      <div className=\"p-6\">\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <UserX className=\"h-8 w-8 text-red-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Discharges</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{todayDischarges.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <IndianRupee className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">₹{getTotalRevenue().toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Avg Stay (days)</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{getAverageStay()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Building2 className=\"h-8 w-8 text-purple-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Beds Freed</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{todayDischarges.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by patient name, ID, admission ID, ward type, doctor, or diagnosis...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Discharges Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserX className=\"h-5 w-5\" />\n              Today's Discharges ({filteredDischarges.length})\n            </CardTitle>\n            <CardDescription>\n              Patients discharged today (IST timezone) - {new Date().toLocaleDateString('en-IN')}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredDischarges.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient Details</TableHead>\n                    <TableHead>Stay Details</TableHead>\n                    <TableHead>Ward/Room</TableHead>\n                    <TableHead>Doctor</TableHead>\n                    <TableHead>Diagnosis</TableHead>\n                    <TableHead>Total Cost</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredDischarges.map((admission) => (\n                    <TableRow key={admission.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.patient?.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            ID: {admission.patient?.patientId}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            {admission.patient?.phone}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Age: {admission.patient?.age} • {admission.patient?.gender}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-sm\">{admission.admissionId}</div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(admission.admissionDate).toLocaleDateString('en-IN')} - {admission.dischargeDate ? new Date(admission.dischargeDate).toLocaleDateString('en-IN') : 'N/A'}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            Discharged: {formatTime(admission.updatedAt)}\n                          </div>\n                          <Badge variant=\"outline\" className=\"mt-1\">\n                            {calculateStayDuration(admission.admissionDate, admission.dischargeDate || '')} days\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{admission.currentWardType || \"Not specified\"}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Room: {admission.currentRoomNumber || \"N/A\"}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Daily: ₹{admission.dailyCost.toLocaleString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {admission.doctor ? (\n                          <div>\n                            <div className=\"font-medium text-sm flex items-center gap-1\">\n                              <Stethoscope className=\"h-3 w-3\" />\n                              {admission.doctor.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {admission.doctor.specialization}\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">No doctor assigned</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs\">\n                          {admission.diagnosis ? (\n                            <p className=\"text-sm\">{admission.diagnosis}</p>\n                          ) : (\n                            <span className=\"text-gray-400\">No diagnosis recorded</span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium text-green-600\">\n                          ₹{(admission.totalCost || 0).toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          Deposit: ₹{(admission.initialDeposit || 0).toLocaleString()}\n                        </div>\n                        <Badge \n                          variant={admission.status === 'discharged' ? 'default' : 'secondary'}\n                          className=\"mt-1\"\n                        >\n                          Discharged\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/patients/${admission.patientId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Patient\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <UserX className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No discharges match your search criteria.\" : \"No patients were discharged today.\"}\n                </p>\n                <Link href=\"/admissions\">\n                  <Button className=\"mt-4\">\n                    View All Admissions\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12694}},"version":1}